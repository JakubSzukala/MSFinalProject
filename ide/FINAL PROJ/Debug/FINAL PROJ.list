
FINAL PROJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007de4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08007fb4  08007fb4  00017fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008170  08008170  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008170  08008170  00018170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008178  08008178  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008178  08008178  00018178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800817c  0800817c  0001817c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  200001dc  0800835c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  0800835c  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6e6  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d18  00000000  00000000  0003b8f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f8  00000000  00000000  0003f610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d0  00000000  00000000  00040c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a73a  00000000  00000000  00041fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016567  00000000  00000000  0006c712  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fb134  00000000  00000000  00082c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017ddad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006110  00000000  00000000  0017de28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007f9c 	.word	0x08007f9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007f9c 	.word	0x08007f9c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b972 	b.w	8000df8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	4688      	mov	r8, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14b      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4615      	mov	r5, r2
 8000b3e:	d967      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0720 	rsb	r7, r2, #32
 8000b4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b52:	4095      	lsls	r5, r2
 8000b54:	ea47 0803 	orr.w	r8, r7, r3
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b64:	fa1f fc85 	uxth.w	ip, r5
 8000b68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b70:	fb07 f10c 	mul.w	r1, r7, ip
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18eb      	adds	r3, r5, r3
 8000b7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b7e:	f080 811b 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8118 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000b88:	3f02      	subs	r7, #2
 8000b8a:	442b      	add	r3, r5
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba0:	45a4      	cmp	ip, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	192c      	adds	r4, r5, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000baa:	f080 8107 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	f240 8104 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	442c      	add	r4, r5
 8000bb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bbc:	eba4 040c 	sub.w	r4, r4, ip
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	b11e      	cbz	r6, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0xbe>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80eb 	beq.w	8000db2 <__udivmoddi4+0x286>
 8000bdc:	2700      	movs	r7, #0
 8000bde:	e9c6 0100 	strd	r0, r1, [r6]
 8000be2:	4638      	mov	r0, r7
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	fab3 f783 	clz	r7, r3
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	d147      	bne.n	8000c82 <__udivmoddi4+0x156>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xd0>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 80fa 	bhi.w	8000df0 <__udivmoddi4+0x2c4>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4698      	mov	r8, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d0e0      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c0e:	e7dd      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c10:	b902      	cbnz	r2, 8000c14 <__udivmoddi4+0xe8>
 8000c12:	deff      	udf	#255	; 0xff
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f040 808f 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1e:	1b49      	subs	r1, r1, r5
 8000c20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c24:	fa1f f885 	uxth.w	r8, r5
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c38:	fb08 f10c 	mul.w	r1, r8, ip
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c40:	18eb      	adds	r3, r5, r3
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x14c>
 8000c68:	192c      	adds	r4, r5, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x14a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80b6 	bhi.w	8000de2 <__udivmoddi4+0x2b6>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e79f      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c82:	f1c7 0c20 	rsb	ip, r7, #32
 8000c86:	40bb      	lsls	r3, r7
 8000c88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c90:	fa01 f407 	lsl.w	r4, r1, r7
 8000c94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca0:	4325      	orrs	r5, r4
 8000ca2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ca6:	0c2c      	lsrs	r4, r5, #16
 8000ca8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cac:	fa1f fa8e 	uxth.w	sl, lr
 8000cb0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	fa02 f207 	lsl.w	r2, r2, r7
 8000cbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	f080 8087 	bcs.w	8000dde <__udivmoddi4+0x2b2>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f240 8084 	bls.w	8000dde <__udivmoddi4+0x2b2>
 8000cd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cda:	4473      	add	r3, lr
 8000cdc:	1b1b      	subs	r3, r3, r4
 8000cde:	b2ad      	uxth	r5, r5
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf0:	45a2      	cmp	sl, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	d26b      	bcs.n	8000dd6 <__udivmoddi4+0x2aa>
 8000cfe:	45a2      	cmp	sl, r4
 8000d00:	d969      	bls.n	8000dd6 <__udivmoddi4+0x2aa>
 8000d02:	3802      	subs	r0, #2
 8000d04:	4474      	add	r4, lr
 8000d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	eba4 040a 	sub.w	r4, r4, sl
 8000d12:	454c      	cmp	r4, r9
 8000d14:	46c2      	mov	sl, r8
 8000d16:	464b      	mov	r3, r9
 8000d18:	d354      	bcc.n	8000dc4 <__udivmoddi4+0x298>
 8000d1a:	d051      	beq.n	8000dc0 <__udivmoddi4+0x294>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d069      	beq.n	8000df4 <__udivmoddi4+0x2c8>
 8000d20:	ebb1 050a 	subs.w	r5, r1, sl
 8000d24:	eb64 0403 	sbc.w	r4, r4, r3
 8000d28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d2c:	40fd      	lsrs	r5, r7
 8000d2e:	40fc      	lsrs	r4, r7
 8000d30:	ea4c 0505 	orr.w	r5, ip, r5
 8000d34:	e9c6 5400 	strd	r5, r4, [r6]
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e747      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f703 	lsr.w	r7, r0, r3
 8000d44:	4095      	lsls	r5, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d52:	4338      	orrs	r0, r7
 8000d54:	0c01      	lsrs	r1, r0, #16
 8000d56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5a:	fa1f f885 	uxth.w	r8, r5
 8000d5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d66:	fb07 f308 	mul.w	r3, r7, r8
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x256>
 8000d72:	1869      	adds	r1, r5, r1
 8000d74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d78:	d22f      	bcs.n	8000dda <__udivmoddi4+0x2ae>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d92d      	bls.n	8000dda <__udivmoddi4+0x2ae>
 8000d7e:	3f02      	subs	r7, #2
 8000d80:	4429      	add	r1, r5
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	b281      	uxth	r1, r0
 8000d86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d92:	fb00 f308 	mul.w	r3, r0, r8
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x27e>
 8000d9a:	1869      	adds	r1, r5, r1
 8000d9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da0:	d217      	bcs.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d915      	bls.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4429      	add	r1, r5
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db0:	e73b      	b.n	8000c2a <__udivmoddi4+0xfe>
 8000db2:	4637      	mov	r7, r6
 8000db4:	4630      	mov	r0, r6
 8000db6:	e709      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db8:	4607      	mov	r7, r0
 8000dba:	e6e7      	b.n	8000b8c <__udivmoddi4+0x60>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6fb      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dc0:	4541      	cmp	r1, r8
 8000dc2:	d2ab      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dc8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dcc:	3801      	subs	r0, #1
 8000dce:	4613      	mov	r3, r2
 8000dd0:	e7a4      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd2:	4660      	mov	r0, ip
 8000dd4:	e7e9      	b.n	8000daa <__udivmoddi4+0x27e>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	e795      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000dda:	4667      	mov	r7, ip
 8000ddc:	e7d1      	b.n	8000d82 <__udivmoddi4+0x256>
 8000dde:	4681      	mov	r9, r0
 8000de0:	e77c      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	442c      	add	r4, r5
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0x14c>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	442b      	add	r3, r5
 8000dee:	e72f      	b.n	8000c50 <__udivmoddi4+0x124>
 8000df0:	4638      	mov	r0, r7
 8000df2:	e708      	b.n	8000c06 <__udivmoddi4+0xda>
 8000df4:	4637      	mov	r7, r6
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0xa0>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e02:	463b      	mov	r3, r7
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e0e:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e10:	4a28      	ldr	r2, [pc, #160]	; (8000eb4 <MX_ADC1_Init+0xb8>)
 8000e12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e16:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e1c:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e22:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e28:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e3e:	4a1e      	ldr	r2, [pc, #120]	; (8000eb8 <MX_ADC1_Init+0xbc>)
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e5c:	4814      	ldr	r0, [pc, #80]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e5e:	f001 fb6d 	bl	800253c <HAL_ADC_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e68:	f000 fe18 	bl	8001a9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000e74:	2307      	movs	r3, #7
 8000e76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e7e:	f001 fba1 	bl	80025c4 <HAL_ADC_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e88:	f000 fe08 	bl	8001a9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e8c:	2306      	movs	r3, #6
 8000e8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_ADC1_Init+0xb4>)
 8000e9a:	f001 fb93 	bl	80025c4 <HAL_ADC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ea4:	f000 fdfa 	bl	8001a9c <Error_Handler>
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000208 	.word	0x20000208
 8000eb4:	40012000 	.word	0x40012000
 8000eb8:	0f000001 	.word	0x0f000001

08000ebc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a39      	ldr	r2, [pc, #228]	; (8000fc0 <HAL_ADC_MspInit+0x104>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d16b      	bne.n	8000fb6 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ede:	4b39      	ldr	r3, [pc, #228]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a38      	ldr	r2, [pc, #224]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a32      	ldr	r2, [pc, #200]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b30      	ldr	r3, [pc, #192]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a2c      	ldr	r2, [pc, #176]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <HAL_ADC_MspInit+0x108>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = POT1_AIN_Pin;
 8000f26:	2304      	movs	r3, #4
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT1_AIN_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4823      	ldr	r0, [pc, #140]	; (8000fc8 <HAL_ADC_MspInit+0x10c>)
 8000f3a:	f002 fa11 	bl	8003360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT2_AIN_Pin;
 8000f3e:	2340      	movs	r3, #64	; 0x40
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f42:	2303      	movs	r3, #3
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT2_AIN_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481e      	ldr	r0, [pc, #120]	; (8000fcc <HAL_ADC_MspInit+0x110>)
 8000f52:	f002 fa05 	bl	8003360 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f58:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <HAL_ADC_MspInit+0x118>)
 8000f5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f68:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f9c:	f001 fed6 	bl	8002d4c <HAL_DMA_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8000fa6:	f000 fd79 	bl	8001a9c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000fae:	639a      	str	r2, [r3, #56]	; 0x38
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	; 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40012000 	.word	0x40012000
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	20000250 	.word	0x20000250
 8000fd4:	40026410 	.word	0x40026410

08000fd8 <COM_Init>:
  */

#include "communication.h"

void COM_Init()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, data, 4);
 8000fdc:	2204      	movs	r2, #4
 8000fde:	4903      	ldr	r1, [pc, #12]	; (8000fec <COM_Init+0x14>)
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <COM_Init+0x18>)
 8000fe2:	f005 fafb 	bl	80065dc <HAL_UART_Receive_IT>
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200002b0 	.word	0x200002b0
 8000ff0:	20000508 	.word	0x20000508

08000ff4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_UART_RxCpltCallback+0x30>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d109      	bne.n	800101a <HAL_UART_RxCpltCallback+0x26>
	{
		sscanf(data,"%d", &ref_val);
 8001006:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_UART_RxCpltCallback+0x34>)
 8001008:	4908      	ldr	r1, [pc, #32]	; (800102c <HAL_UART_RxCpltCallback+0x38>)
 800100a:	4809      	ldr	r0, [pc, #36]	; (8001030 <HAL_UART_RxCpltCallback+0x3c>)
 800100c:	f006 f9ec 	bl	80073e8 <siscanf>
		HAL_UART_Receive_IT(&huart3, data, 4);
 8001010:	2204      	movs	r2, #4
 8001012:	4907      	ldr	r1, [pc, #28]	; (8001030 <HAL_UART_RxCpltCallback+0x3c>)
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <HAL_UART_RxCpltCallback+0x40>)
 8001016:	f005 fae1 	bl	80065dc <HAL_UART_Receive_IT>
	}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40004800 	.word	0x40004800
 8001028:	20000398 	.word	0x20000398
 800102c:	08007fb4 	.word	0x08007fb4
 8001030:	200002b0 	.word	0x200002b0
 8001034:	20000508 	.word	0x20000508

08001038 <PID_Init>:
/**
  * @brief Initialize PID
  * @retval None
  */
void PID_Init()
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	/* Set parameters for PID */
	PID.Kp = PID_PARAM_KP; //gain
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <PID_Init+0x24>)
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <PID_Init+0x28>)
 8001040:	619a      	str	r2, [r3, #24]
	PID.Ki = PID_PARAM_KI; //inte
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <PID_Init+0x24>)
 8001044:	4a06      	ldr	r2, [pc, #24]	; (8001060 <PID_Init+0x28>)
 8001046:	61da      	str	r2, [r3, #28]
	PID.Kd = PID_PARAM_KD; //deriv
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <PID_Init+0x24>)
 800104a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800104e:	621a      	str	r2, [r3, #32]

	/* Initialize PID */
	arm_pid_init_f32 (&PID, 1);
 8001050:	2101      	movs	r1, #1
 8001052:	4802      	ldr	r0, [pc, #8]	; (800105c <PID_Init+0x24>)
 8001054:	f000 f926 	bl	80012a4 <arm_pid_init_f32>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000374 	.word	0x20000374
 8001060:	41200000 	.word	0x41200000

08001064 <PID_GetDuty>:
  * @param meas_val Value measured from sensor
  * @param ref_val Value desired by user
  * @retval Duty
  */
float PID_GetDuty(float meas_val, float ref_val)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	ed87 0a01 	vstr	s0, [r7, #4]
 800106e:	edc7 0a00 	vstr	s1, [r7]
	float pid_error = ref_val - meas_val;
 8001072:	ed97 7a00 	vldr	s14, [r7]
 8001076:	edd7 7a01 	vldr	s15, [r7, #4]
 800107a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800107e:	edc7 7a07 	vstr	s15, [r7, #28]
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <PID_GetDuty+0x98>)
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	ed93 7a00 	vldr	s14, [r3]
 8001090:	edd7 7a04 	vldr	s15, [r7, #16]
 8001094:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	edd3 6a01 	vldr	s13, [r3, #4]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80010a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80010a8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80010b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80010c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ca:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80010e2:	68fb      	ldr	r3, [r7, #12]
	float duty = arm_pid_f32(&PID, pid_error);
 80010e4:	61bb      	str	r3, [r7, #24]
	return duty;
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	ee07 3a90 	vmov	s15, r3
}
 80010ec:	eeb0 0a67 	vmov.f32	s0, s15
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000374 	.word	0x20000374

08001100 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_DAC_Init+0x4c>)
 8001110:	4a0f      	ldr	r2, [pc, #60]	; (8001150 <MX_DAC_Init+0x50>)
 8001112:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <MX_DAC_Init+0x4c>)
 8001116:	f001 fdaa 	bl	8002c6e <HAL_DAC_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001120:	f000 fcbc 	bl	8001a9c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <MX_DAC_Init+0x4c>)
 8001134:	f001 fdbd 	bl	8002cb2 <HAL_DAC_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800113e:	f000 fcad 	bl	8001a9c <Error_Handler>
  }

}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000314 	.word	0x20000314
 8001150:	40007400 	.word	0x40007400

08001154 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a2e      	ldr	r2, [pc, #184]	; (800122c <HAL_DAC_MspInit+0xd8>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d155      	bne.n	8001222 <HAL_DAC_MspInit+0xce>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001176:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <HAL_DAC_MspInit+0xdc>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a2d      	ldr	r2, [pc, #180]	; (8001230 <HAL_DAC_MspInit+0xdc>)
 800117c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <HAL_DAC_MspInit+0xdc>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <HAL_DAC_MspInit+0xdc>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a27      	ldr	r2, [pc, #156]	; (8001230 <HAL_DAC_MspInit+0xdc>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <HAL_DAC_MspInit+0xdc>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = OSC_AOUT_Pin;
 80011a6:	2310      	movs	r3, #16
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011aa:	2303      	movs	r3, #3
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OSC_AOUT_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	481e      	ldr	r0, [pc, #120]	; (8001234 <HAL_DAC_MspInit+0xe0>)
 80011ba:	f002 f8d1 	bl	8003360 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80011be:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <HAL_DAC_MspInit+0xe4>)
 80011c0:	4a1e      	ldr	r2, [pc, #120]	; (800123c <HAL_DAC_MspInit+0xe8>)
 80011c2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80011c4:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <HAL_DAC_MspInit+0xe4>)
 80011c6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80011ca:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_DAC_MspInit+0xe4>)
 80011ce:	2240      	movs	r2, #64	; 0x40
 80011d0:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_DAC_MspInit+0xe4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_DAC_MspInit+0xe4>)
 80011da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011de:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_DAC_MspInit+0xe4>)
 80011e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011e6:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <HAL_DAC_MspInit+0xe4>)
 80011ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ee:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_DAC_MspInit+0xe4>)
 80011f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f6:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_DAC_MspInit+0xe4>)
 80011fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011fe:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001200:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <HAL_DAC_MspInit+0xe4>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001206:	480c      	ldr	r0, [pc, #48]	; (8001238 <HAL_DAC_MspInit+0xe4>)
 8001208:	f001 fda0 	bl	8002d4c <HAL_DMA_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 8001212:	f000 fc43 	bl	8001a9c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <HAL_DAC_MspInit+0xe4>)
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	4a06      	ldr	r2, [pc, #24]	; (8001238 <HAL_DAC_MspInit+0xe4>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	; 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40007400 	.word	0x40007400
 8001230:	40023800 	.word	0x40023800
 8001234:	40020000 	.word	0x40020000
 8001238:	200002b4 	.word	0x200002b4
 800123c:	40026088 	.word	0x40026088

08001240 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_DMA_Init+0x60>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <MX_DMA_Init+0x60>)
 800124c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_DMA_Init+0x60>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MX_DMA_Init+0x60>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <MX_DMA_Init+0x60>)
 8001264:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <MX_DMA_Init+0x60>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	2010      	movs	r0, #16
 800127c:	f001 fcc1 	bl	8002c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001280:	2010      	movs	r0, #16
 8001282:	f001 fcda 	bl	8002c3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2038      	movs	r0, #56	; 0x38
 800128c:	f001 fcb9 	bl	8002c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001290:	2038      	movs	r0, #56	; 0x38
 8001292:	f001 fcd2 	bl	8002c3a <HAL_NVIC_EnableIRQ>

}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800

080012a4 <arm_pid_init_f32>:
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	ed93 7a06 	vldr	s14, [r3, #24]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	edd3 7a07 	vldr	s15, [r3, #28]
 80012ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	edd3 7a08 	vldr	s15, [r3, #32]
 80012c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	edc3 7a00 	vstr	s15, [r3]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80012d4:	eeb1 7a67 	vneg.f32	s14, s15
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	edd3 7a08 	vldr	s15, [r3, #32]
 80012de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	edc3 7a01 	vstr	s15, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1a      	ldr	r2, [r3, #32]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d006      	beq.n	8001308 <arm_pid_init_f32+0x64>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	330c      	adds	r3, #12
 80012fe:	220c      	movs	r2, #12
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f006 f868 	bl	80073d8 <memset>
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08e      	sub	sp, #56	; 0x38
 8001314:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001326:	4bb3      	ldr	r3, [pc, #716]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4ab2      	ldr	r2, [pc, #712]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 800132c:	f043 0310 	orr.w	r3, r3, #16
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4bb0      	ldr	r3, [pc, #704]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	623b      	str	r3, [r7, #32]
 800133c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	4bad      	ldr	r3, [pc, #692]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4aac      	ldr	r2, [pc, #688]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4baa      	ldr	r3, [pc, #680]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001356:	4ba7      	ldr	r3, [pc, #668]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4aa6      	ldr	r2, [pc, #664]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 800135c:	f043 0320 	orr.w	r3, r3, #32
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4ba4      	ldr	r3, [pc, #656]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0320 	and.w	r3, r3, #32
 800136a:	61bb      	str	r3, [r7, #24]
 800136c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800136e:	4ba1      	ldr	r3, [pc, #644]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4aa0      	ldr	r2, [pc, #640]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 8001374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b9e      	ldr	r3, [pc, #632]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b9b      	ldr	r3, [pc, #620]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a9a      	ldr	r2, [pc, #616]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b98      	ldr	r3, [pc, #608]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	4b95      	ldr	r3, [pc, #596]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a94      	ldr	r2, [pc, #592]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b92      	ldr	r3, [pc, #584]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013b6:	4b8f      	ldr	r3, [pc, #572]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a8e      	ldr	r2, [pc, #568]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 80013bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b8c      	ldr	r3, [pc, #560]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ce:	4b89      	ldr	r3, [pc, #548]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a88      	ldr	r2, [pc, #544]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b86      	ldr	r3, [pc, #536]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin, GPIO_PIN_SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	2118      	movs	r1, #24
 80013ea:	4883      	ldr	r0, [pc, #524]	; (80015f8 <MX_GPIO_Init+0x2e8>)
 80013ec:	f002 f962 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DISP_F_Pin|DISP_E_Pin|DISP_2_Pin|DISP_1_Pin
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 80013f6:	4881      	ldr	r0, [pc, #516]	; (80015fc <MX_GPIO_Init+0x2ec>)
 80013f8:	f002 f95c 	bl	80036b4 <HAL_GPIO_WritePin>
                          |DISP_3_Pin|DISP_D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISP_H_Pin|LCD_RS_Pin|LAMP_TRIAC_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2149      	movs	r1, #73	; 0x49
 8001400:	487f      	ldr	r0, [pc, #508]	; (8001600 <MX_GPIO_Init+0x2f0>)
 8001402:	f002 f957 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2108      	movs	r1, #8
 800140a:	487e      	ldr	r0, [pc, #504]	; (8001604 <MX_GPIO_Init+0x2f4>)
 800140c:	f002 f952 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 8001410:	2200      	movs	r2, #0
 8001412:	f644 4181 	movw	r1, #19585	; 0x4c81
 8001416:	487c      	ldr	r0, [pc, #496]	; (8001608 <MX_GPIO_Init+0x2f8>)
 8001418:	f002 f94c 	bl	80036b4 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISP_A_Pin|DISP_4_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	2143      	movs	r1, #67	; 0x43
 8001420:	487a      	ldr	r0, [pc, #488]	; (800160c <MX_GPIO_Init+0x2fc>)
 8001422:	f002 f947 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1EX_GPIO_Port, LD1EX_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142c:	4872      	ldr	r0, [pc, #456]	; (80015f8 <MX_GPIO_Init+0x2e8>)
 800142e:	f002 f941 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISP_C_Pin|DISP_B_Pin|DISP_G_Pin|LCD_D4_Pin
 8001432:	2200      	movs	r2, #0
 8001434:	21fb      	movs	r1, #251	; 0xfb
 8001436:	4876      	ldr	r0, [pc, #472]	; (8001610 <MX_GPIO_Init+0x300>)
 8001438:	f002 f93c 	bl	80036b4 <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin;
 800143c:	2318      	movs	r3, #24
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800144c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001450:	4619      	mov	r1, r3
 8001452:	4869      	ldr	r0, [pc, #420]	; (80015f8 <MX_GPIO_Init+0x2e8>)
 8001454:	f001 ff84 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800145e:	4b6d      	ldr	r3, [pc, #436]	; (8001614 <MX_GPIO_Init+0x304>)
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146a:	4619      	mov	r1, r3
 800146c:	4864      	ldr	r0, [pc, #400]	; (8001600 <MX_GPIO_Init+0x2f0>)
 800146e:	f001 ff77 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = DISP_F_Pin|DISP_E_Pin|DISP_D_Pin;
 8001472:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001478:	2311      	movs	r3, #17
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147c:	2301      	movs	r3, #1
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	485c      	ldr	r0, [pc, #368]	; (80015fc <MX_GPIO_Init+0x2ec>)
 800148c:	f001 ff68 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = DISP_2_Pin|DISP_1_Pin|DISP_3_Pin;
 8001490:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	4619      	mov	r1, r3
 80014a8:	4854      	ldr	r0, [pc, #336]	; (80015fc <MX_GPIO_Init+0x2ec>)
 80014aa:	f001 ff59 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISP_H_Pin;
 80014ae:	2301      	movs	r3, #1
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014b2:	2311      	movs	r3, #17
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DISP_H_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c2:	4619      	mov	r1, r3
 80014c4:	484e      	ldr	r0, [pc, #312]	; (8001600 <MX_GPIO_Init+0x2f0>)
 80014c6:	f001 ff4b 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80014ca:	2332      	movs	r3, #50	; 0x32
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014da:	230b      	movs	r3, #11
 80014dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e2:	4619      	mov	r1, r3
 80014e4:	4846      	ldr	r0, [pc, #280]	; (8001600 <MX_GPIO_Init+0x2f0>)
 80014e6:	f001 ff3b 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 80014ea:	2308      	movs	r3, #8
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	483f      	ldr	r0, [pc, #252]	; (8001600 <MX_GPIO_Init+0x2f0>)
 8001502:	f001 ff2d 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001506:	2306      	movs	r3, #6
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001516:	230b      	movs	r3, #11
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	4619      	mov	r1, r3
 8001520:	4838      	ldr	r0, [pc, #224]	; (8001604 <MX_GPIO_Init+0x2f4>)
 8001522:	f001 ff1d 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 8001526:	2308      	movs	r3, #8
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	4619      	mov	r1, r3
 800153c:	4831      	ldr	r0, [pc, #196]	; (8001604 <MX_GPIO_Init+0x2f4>)
 800153e:	f001 ff0f 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX1_Btn_Pin;
 8001542:	2320      	movs	r3, #32
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001546:	4b34      	ldr	r3, [pc, #208]	; (8001618 <MX_GPIO_Init+0x308>)
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX1_Btn_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001552:	4619      	mov	r1, r3
 8001554:	482b      	ldr	r0, [pc, #172]	; (8001604 <MX_GPIO_Init+0x2f4>)
 8001556:	f001 ff03 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 800155a:	f644 4381 	movw	r3, #19585	; 0x4c81
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001570:	4619      	mov	r1, r3
 8001572:	4825      	ldr	r0, [pc, #148]	; (8001608 <MX_GPIO_Init+0x2f8>)
 8001574:	f001 fef4 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX2_Btn_Pin;
 8001578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800157e:	4b25      	ldr	r3, [pc, #148]	; (8001614 <MX_GPIO_Init+0x304>)
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX2_Btn_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158a:	4619      	mov	r1, r3
 800158c:	481b      	ldr	r0, [pc, #108]	; (80015fc <MX_GPIO_Init+0x2ec>)
 800158e:	f001 fee7 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISP_A_Pin;
 8001592:	2301      	movs	r3, #1
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001596:	2311      	movs	r3, #17
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159a:	2301      	movs	r3, #1
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DISP_A_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a6:	4619      	mov	r1, r3
 80015a8:	4818      	ldr	r0, [pc, #96]	; (800160c <MX_GPIO_Init+0x2fc>)
 80015aa:	f001 fed9 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = DISP_4_Pin|USB_PowerSwitchOn_Pin;
 80015ae:	2342      	movs	r3, #66	; 0x42
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c2:	4619      	mov	r1, r3
 80015c4:	4811      	ldr	r0, [pc, #68]	; (800160c <MX_GPIO_Init+0x2fc>)
 80015c6:	f001 fecb 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1EX_Pin;
 80015ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD1EX_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_GPIO_Init+0x2e8>)
 80015e4:	f001 febc 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	e014      	b.n	800161c <MX_GPIO_Init+0x30c>
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40021400 	.word	0x40021400
 8001600:	40020800 	.word	0x40020800
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400
 800160c:	40021800 	.word	0x40021800
 8001610:	40020c00 	.word	0x40020c00
 8001614:	10110000 	.word	0x10110000
 8001618:	10210000 	.word	0x10210000
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001622:	2303      	movs	r3, #3
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001626:	230b      	movs	r3, #11
 8001628:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162e:	4619      	mov	r1, r3
 8001630:	4851      	ldr	r0, [pc, #324]	; (8001778 <MX_GPIO_Init+0x468>)
 8001632:	f001 fe95 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 8001636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800163c:	4b4f      	ldr	r3, [pc, #316]	; (800177c <MX_GPIO_Init+0x46c>)
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	4619      	mov	r1, r3
 800164a:	484b      	ldr	r0, [pc, #300]	; (8001778 <MX_GPIO_Init+0x468>)
 800164c:	f001 fe88 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001650:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001656:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <MX_GPIO_Init+0x470>)
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001662:	4619      	mov	r1, r3
 8001664:	4847      	ldr	r0, [pc, #284]	; (8001784 <MX_GPIO_Init+0x474>)
 8001666:	f001 fe7b 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 800166a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001670:	2300      	movs	r3, #0
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	4841      	ldr	r0, [pc, #260]	; (8001784 <MX_GPIO_Init+0x474>)
 8001680:	f001 fe6e 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001688:	2300      	movs	r3, #0
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	483c      	ldr	r0, [pc, #240]	; (8001788 <MX_GPIO_Init+0x478>)
 8001698:	f001 fe62 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 800169c:	2340      	movs	r3, #64	; 0x40
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a8:	2302      	movs	r3, #2
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	4619      	mov	r1, r3
 80016b2:	4836      	ldr	r0, [pc, #216]	; (800178c <MX_GPIO_Init+0x47c>)
 80016b4:	f001 fe54 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016b8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016ca:	230a      	movs	r3, #10
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d2:	4619      	mov	r1, r3
 80016d4:	482e      	ldr	r0, [pc, #184]	; (8001790 <MX_GPIO_Init+0x480>)
 80016d6:	f001 fe43 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ec:	4619      	mov	r1, r3
 80016ee:	4828      	ldr	r0, [pc, #160]	; (8001790 <MX_GPIO_Init+0x480>)
 80016f0:	f001 fe36 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DISP_C_Pin|DISP_B_Pin|DISP_G_Pin;
 80016f4:	230b      	movs	r3, #11
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016f8:	2311      	movs	r3, #17
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001708:	4619      	mov	r1, r3
 800170a:	481e      	ldr	r0, [pc, #120]	; (8001784 <MX_GPIO_Init+0x474>)
 800170c:	f001 fe28 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8001710:	23f0      	movs	r3, #240	; 0xf0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001724:	4619      	mov	r1, r3
 8001726:	4817      	ldr	r0, [pc, #92]	; (8001784 <MX_GPIO_Init+0x474>)
 8001728:	f001 fe1a 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800172c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800173e:	230b      	movs	r3, #11
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001746:	4619      	mov	r1, r3
 8001748:	480f      	ldr	r0, [pc, #60]	; (8001788 <MX_GPIO_Init+0x478>)
 800174a:	f001 fe09 	bl	8003360 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	2017      	movs	r0, #23
 8001754:	f001 fa55 	bl	8002c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001758:	2017      	movs	r0, #23
 800175a:	f001 fa6e 	bl	8002c3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2028      	movs	r0, #40	; 0x28
 8001764:	f001 fa4d 	bl	8002c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001768:	2028      	movs	r0, #40	; 0x28
 800176a:	f001 fa66 	bl	8002c3a <HAL_NVIC_EnableIRQ>

}
 800176e:	bf00      	nop
 8001770:	3738      	adds	r7, #56	; 0x38
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40020400 	.word	0x40020400
 800177c:	10110000 	.word	0x10110000
 8001780:	10210000 	.word	0x10210000
 8001784:	40020c00 	.word	0x40020c00
 8001788:	40021800 	.word	0x40021800
 800178c:	40020800 	.word	0x40020800
 8001790:	40020000 	.word	0x40020000

08001794 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <MX_I2C1_Init+0x74>)
 800179a:	4a1c      	ldr	r2, [pc, #112]	; (800180c <MX_I2C1_Init+0x78>)
 800179c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_I2C1_Init+0x74>)
 80017a0:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <MX_I2C1_Init+0x7c>)
 80017a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <MX_I2C1_Init+0x74>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <MX_I2C1_Init+0x74>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <MX_I2C1_Init+0x74>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_I2C1_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_I2C1_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_I2C1_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_I2C1_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017ce:	480e      	ldr	r0, [pc, #56]	; (8001808 <MX_I2C1_Init+0x74>)
 80017d0:	f001 ffae 	bl	8003730 <HAL_I2C_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017da:	f000 f95f 	bl	8001a9c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017de:	2100      	movs	r1, #0
 80017e0:	4809      	ldr	r0, [pc, #36]	; (8001808 <MX_I2C1_Init+0x74>)
 80017e2:	f002 fbff 	bl	8003fe4 <HAL_I2CEx_ConfigAnalogFilter>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017ec:	f000 f956 	bl	8001a9c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017f0:	2100      	movs	r1, #0
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_I2C1_Init+0x74>)
 80017f4:	f002 fc41 	bl	800407a <HAL_I2CEx_ConfigDigitalFilter>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017fe:	f000 f94d 	bl	8001a9c <Error_Handler>
  }

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000328 	.word	0x20000328
 800180c:	40005400 	.word	0x40005400
 8001810:	20404768 	.word	0x20404768

08001814 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a17      	ldr	r2, [pc, #92]	; (8001890 <HAL_I2C_MspInit+0x7c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d128      	bne.n	8001888 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_I2C_MspInit+0x80>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a16      	ldr	r2, [pc, #88]	; (8001894 <HAL_I2C_MspInit+0x80>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_I2C_MspInit+0x80>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 800184e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001854:	2312      	movs	r3, #18
 8001856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001858:	2301      	movs	r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001860:	2304      	movs	r3, #4
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	480b      	ldr	r0, [pc, #44]	; (8001898 <HAL_I2C_MspInit+0x84>)
 800186c:	f001 fd78 	bl	8003360 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_I2C_MspInit+0x80>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_I2C_MspInit+0x80>)
 8001876:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800187a:	6413      	str	r3, [r2, #64]	; 0x40
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_I2C_MspInit+0x80>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001888:	bf00      	nop
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40005400 	.word	0x40005400
 8001894:	40023800 	.word	0x40023800
 8001898:	40020400 	.word	0x40020400

0800189c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
int swv=0;
float duty;
float meas_val;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a18      	ldr	r2, [pc, #96]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d12a      	bne.n	8001904 <HAL_TIM_PeriodElapsedCallback+0x68>
	{
		/* Getting measurement from sensor BH1750 */
		meas_val = BH1750_Read();
 80018ae:	f000 f919 	bl	8001ae4 <BH1750_Read>
 80018b2:	eef0 7a40 	vmov.f32	s15, s0
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80018b8:	edc3 7a00 	vstr	s15, [r3]

		/* Converting measured value to int for SWV */
		swv = (int)meas_val;
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80018be:	edd3 7a00 	vldr	s15, [r3]
 80018c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c6:	ee17 2a90 	vmov	r2, s15
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80018cc:	601a      	str	r2, [r3, #0]

		/* Getting duty from PID controller */
		duty = PID_GetDuty(meas_val, ref_val);
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	ee07 3a10 	vmov	s14, r3
 80018dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018e0:	eef0 0a47 	vmov.f32	s1, s14
 80018e4:	eeb0 0a67 	vmov.f32	s0, s15
 80018e8:	f7ff fbbc 	bl	8001064 <PID_GetDuty>
 80018ec:	eef0 7a40 	vmov.f32	s15, s0
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80018f2:	edc3 7a00 	vstr	s15, [r3]

		/* Setting duty of PWM */
		PWM_SetDuty(duty);
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001900:	f000 f920 	bl	8001b44 <PWM_SetDuty>
	}
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40000800 	.word	0x40000800
 8001910:	2000039c 	.word	0x2000039c
 8001914:	200001f8 	.word	0x200001f8
 8001918:	20000398 	.word	0x20000398
 800191c:	200003a0 	.word	0x200003a0

08001920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001924:	f000 fdad 	bl	8002482 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001928:	f000 f824 	bl	8001974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800192c:	f7ff fcf0 	bl	8001310 <MX_GPIO_Init>
  MX_DMA_Init();
 8001930:	f7ff fc86 	bl	8001240 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001934:	f000 fd00 	bl	8002338 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001938:	f000 fa9e 	bl	8001e78 <MX_TIM2_Init>
  MX_TIM3_Init();
 800193c:	f000 faf2 	bl	8001f24 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001940:	f000 fb68 	bl	8002014 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001944:	f7ff ff26 	bl	8001794 <MX_I2C1_Init>
  MX_SPI4_Init();
 8001948:	f000 f922 	bl	8001b90 <MX_SPI4_Init>
  MX_ADC1_Init();
 800194c:	f7ff fa56 	bl	8000dfc <MX_ADC1_Init>
  MX_DAC_Init();
 8001950:	f7ff fbd6 	bl	8001100 <MX_DAC_Init>
  MX_TIM6_Init();
 8001954:	f000 fbae 	bl	80020b4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  COM_Init();// initialize USART
 8001958:	f7ff fb3e 	bl	8000fd8 <COM_Init>
  BH1750_Init();//sensor inti
 800195c:	f000 f8a2 	bl	8001aa4 <BH1750_Init>
  PID_Init();//PID controoler init
 8001960:	f7ff fb6a 	bl	8001038 <PID_Init>
  PWM_Init();// PWM init
 8001964:	f000 f90a 	bl	8001b7c <PWM_Init>
  HAL_TIM_Base_Start_IT(&htim4); //Start timer for control loop period  100ms
 8001968:	4801      	ldr	r0, [pc, #4]	; (8001970 <main+0x50>)
 800196a:	f003 fd7b 	bl	8005464 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800196e:	e7fe      	b.n	800196e <main+0x4e>
 8001970:	20000408 	.word	0x20000408

08001974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b0b4      	sub	sp, #208	; 0xd0
 8001978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800197e:	2230      	movs	r2, #48	; 0x30
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f005 fd28 	bl	80073d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001988:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	2284      	movs	r2, #132	; 0x84
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f005 fd19 	bl	80073d8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019a6:	f002 fbb5 	bl	8004114 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	4b3a      	ldr	r3, [pc, #232]	; (8001a94 <SystemClock_Config+0x120>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a39      	ldr	r2, [pc, #228]	; (8001a94 <SystemClock_Config+0x120>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b37      	ldr	r3, [pc, #220]	; (8001a94 <SystemClock_Config+0x120>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c2:	4b35      	ldr	r3, [pc, #212]	; (8001a98 <SystemClock_Config+0x124>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a34      	ldr	r2, [pc, #208]	; (8001a98 <SystemClock_Config+0x124>)
 80019c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <SystemClock_Config+0x124>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019da:	2301      	movs	r3, #1
 80019dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e8:	2302      	movs	r3, #2
 80019ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019f6:	2304      	movs	r3, #4
 80019f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80019fc:	23d8      	movs	r3, #216	; 0xd8
 80019fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a02:	2302      	movs	r3, #2
 8001a04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f002 fbde 	bl	80041d4 <HAL_RCC_OscConfig>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001a1e:	f000 f83d 	bl	8001a9c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a22:	f002 fb87 	bl	8004134 <HAL_PWREx_EnableOverDrive>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001a2c:	f000 f836 	bl	8001a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a30:	230f      	movs	r3, #15
 8001a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a36:	2302      	movs	r3, #2
 8001a38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001a52:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a56:	2107      	movs	r1, #7
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 fe5f 	bl	800471c <HAL_RCC_ClockConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001a64:	f000 f81a 	bl	8001a9c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8001a68:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001a6c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 f846 	bl	8004b0c <HAL_RCCEx_PeriphCLKConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8001a86:	f000 f809 	bl	8001a9c <Error_Handler>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	37d0      	adds	r7, #208	; 0xd0
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40007000 	.word	0x40007000

08001a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <Error_Handler+0x6>

08001aa4 <BH1750_Init>:
/**
  * @brief Initialize sensor BH1750
  * @retval None
  */
void BH1750_Init()
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af02      	add	r7, sp, #8
	uint8_t command;

	/* Power sensor ON */
	command = BH1750_POWER_ON;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, BH1750_ADDRESS, &command, 1, 0xffff);
 8001aae:	1dfa      	adds	r2, r7, #7
 8001ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2146      	movs	r1, #70	; 0x46
 8001aba:	4809      	ldr	r0, [pc, #36]	; (8001ae0 <BH1750_Init+0x3c>)
 8001abc:	f001 fec8 	bl	8003850 <HAL_I2C_Master_Transmit>

	/* Select measurement mode */
	command = BH1750_CONTINOUS_H_RES_MODE;
 8001ac0:	2310      	movs	r3, #16
 8001ac2:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, BH1750_ADDRESS, &command, 1, 0xffff);
 8001ac4:	1dfa      	adds	r2, r7, #7
 8001ac6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2301      	movs	r3, #1
 8001ace:	2146      	movs	r1, #70	; 0x46
 8001ad0:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <BH1750_Init+0x3c>)
 8001ad2:	f001 febd 	bl	8003850 <HAL_I2C_Master_Transmit>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000328 	.word	0x20000328

08001ae4 <BH1750_Read>:
/**
  * @brief Read value from sensor BH1750
  * @retval Measured luminous intensity in lux
  */
float BH1750_Read()
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af02      	add	r7, sp, #8
	float light = 0;
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	607b      	str	r3, [r7, #4]
	uint8_t buff[2];

	/* Read value from sensor */
	HAL_I2C_Master_Receive(&hi2c1, BH1750_ADDRESS, buff, 2, 0xffff);
 8001af0:	463a      	mov	r2, r7
 8001af2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2302      	movs	r3, #2
 8001afa:	2146      	movs	r1, #70	; 0x46
 8001afc:	480f      	ldr	r0, [pc, #60]	; (8001b3c <BH1750_Read+0x58>)
 8001afe:	f001 ff9b 	bl	8003a38 <HAL_I2C_Master_Receive>

	/* Convert value to lux */
	light = ((buff[0]<<8) | buff[1]) / 1.2;
 8001b02:	783b      	ldrb	r3, [r7, #0]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	787a      	ldrb	r2, [r7, #1]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd2a 	bl	8000564 <__aeabi_i2d>
 8001b10:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <BH1750_Read+0x5c>)
 8001b16:	f7fe feb9 	bl	800088c <__aeabi_ddiv>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	460c      	mov	r4, r1
 8001b1e:	4618      	mov	r0, r3
 8001b20:	4621      	mov	r1, r4
 8001b22:	f7fe ff9b 	bl	8000a5c <__aeabi_d2f>
 8001b26:	4603      	mov	r3, r0
 8001b28:	607b      	str	r3, [r7, #4]

	return light;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	ee07 3a90 	vmov	s15, r3
}
 8001b30:	eeb0 0a67 	vmov.f32	s0, s15
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd90      	pop	{r4, r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000328 	.word	0x20000328
 8001b40:	3ff33333 	.word	0x3ff33333

08001b44 <PWM_SetDuty>:
/**
  * @brief Set PWM duty
  * @retval None
  */
void PWM_SetDuty(float duty)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	ed87 0a01 	vstr	s0, [r7, #4]
	TIM3 -> CCR1 = duty/100;
 8001b4e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b52:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001b74 <PWM_SetDuty+0x30>
 8001b56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <PWM_SetDuty+0x34>)
 8001b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b60:	ee17 2a90 	vmov	r2, s15
 8001b64:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	42c80000 	.word	0x42c80000
 8001b78:	40000400 	.word	0x40000400

08001b7c <PWM_Init>:
/**
  * @brief Initialize PWM
  * @retval None
  */
void PWM_Init()
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b80:	2100      	movs	r1, #0
 8001b82:	4802      	ldr	r0, [pc, #8]	; (8001b8c <PWM_Init+0x10>)
 8001b84:	f003 fcce 	bl	8005524 <HAL_TIM_PWM_Start>
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000448 	.word	0x20000448

08001b90 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <MX_SPI4_Init+0x74>)
 8001b96:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <MX_SPI4_Init+0x78>)
 8001b98:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_SPI4_Init+0x74>)
 8001b9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ba0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <MX_SPI4_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <MX_SPI4_Init+0x74>)
 8001baa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bae:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <MX_SPI4_Init+0x74>)
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_SPI4_Init+0x74>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <MX_SPI4_Init+0x74>)
 8001bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <MX_SPI4_Init+0x74>)
 8001bc6:	2218      	movs	r2, #24
 8001bc8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_SPI4_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <MX_SPI4_Init+0x74>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <MX_SPI4_Init+0x74>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <MX_SPI4_Init+0x74>)
 8001bde:	2207      	movs	r2, #7
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <MX_SPI4_Init+0x74>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <MX_SPI4_Init+0x74>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_SPI4_Init+0x74>)
 8001bf0:	f003 fb7a 	bl	80052e8 <HAL_SPI_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001bfa:	f7ff ff4f 	bl	8001a9c <Error_Handler>
  }

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200003a4 	.word	0x200003a4
 8001c08:	40013400 	.word	0x40013400

08001c0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <HAL_SPI_MspInit+0x7c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d127      	bne.n	8001c7e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c2e:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <HAL_SPI_MspInit+0x80>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a16      	ldr	r2, [pc, #88]	; (8001c8c <HAL_SPI_MspInit+0x80>)
 8001c34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_SPI_MspInit+0x80>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_SPI_MspInit+0x80>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a10      	ldr	r2, [pc, #64]	; (8001c8c <HAL_SPI_MspInit+0x80>)
 8001c4c:	f043 0310 	orr.w	r3, r3, #16
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_SPI_MspInit+0x80>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SCK_Pin|BMP280_MISO_Pin|BMP280_MOSI_Pin;
 8001c5e:	2364      	movs	r3, #100	; 0x64
 8001c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001c6e:	2305      	movs	r3, #5
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c72:	f107 0314 	add.w	r3, r7, #20
 8001c76:	4619      	mov	r1, r3
 8001c78:	4805      	ldr	r0, [pc, #20]	; (8001c90 <HAL_SPI_MspInit+0x84>)
 8001c7a:	f001 fb71 	bl	8003360 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001c7e:	bf00      	nop
 8001c80:	3728      	adds	r7, #40	; 0x28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40013400 	.word	0x40013400
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40021000 	.word	0x40021000

08001c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_MspInit+0x44>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <HAL_MspInit+0x44>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_MspInit+0x44>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <MemManage_Handler+0x4>

08001cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d28:	f000 fbe8 	bl	80024fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <DMA1_Stream5_IRQHandler+0x10>)
 8001d36:	f001 f8d9 	bl	8002eec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200002b4 	.word	0x200002b4

08001d44 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001d48:	2020      	movs	r0, #32
 8001d4a:	f001 fccd 	bl	80036e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <TIM2_IRQHandler+0x10>)
 8001d5a:	f003 fc6d 	bl	8005638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200004c8 	.word	0x200004c8

08001d68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <TIM3_IRQHandler+0x10>)
 8001d6e:	f003 fc63 	bl	8005638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000448 	.word	0x20000448

08001d7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <TIM4_IRQHandler+0x10>)
 8001d82:	f003 fc59 	bl	8005638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000408 	.word	0x20000408

08001d90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <USART3_IRQHandler+0x10>)
 8001d96:	f004 fcc3 	bl	8006720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000508 	.word	0x20000508

08001da4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001da8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001dac:	f001 fc9c 	bl	80036e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001db0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001db4:	f001 fc98 	bl	80036e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001db8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001dbc:	f001 fc94 	bl	80036e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001dc0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001dc4:	f001 fc90 	bl	80036e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <DMA2_Stream0_IRQHandler+0x10>)
 8001dd2:	f001 f88b 	bl	8002eec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000250 	.word	0x20000250

08001de0 <_sbrk>:
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <_sbrk+0x5c>)
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <_sbrk+0x60>)
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <_sbrk+0x22>
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <_sbrk+0x64>)
 8001dfe:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <_sbrk+0x68>)
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d207      	bcs.n	8001e20 <_sbrk+0x40>
 8001e10:	f005 fab8 	bl	8007384 <__errno>
 8001e14:	4602      	mov	r2, r0
 8001e16:	230c      	movs	r3, #12
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1e:	e009      	b.n	8001e34 <_sbrk+0x54>
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <_sbrk+0x64>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <_sbrk+0x64>)
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20050000 	.word	0x20050000
 8001e40:	00000400 	.word	0x00000400
 8001e44:	200001fc 	.word	0x200001fc
 8001e48:	20000590 	.word	0x20000590

08001e4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <SystemInit+0x28>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e56:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <SystemInit+0x28>)
 8001e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <SystemInit+0x28>)
 8001e62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e66:	609a      	str	r2, [r3, #8]
#endif
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001e96:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <MX_TIM2_Init+0xa8>)
 8001e98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <MX_TIM2_Init+0xa8>)
 8001ea0:	226b      	movs	r2, #107	; 0x6b
 8001ea2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <MX_TIM2_Init+0xa8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <MX_TIM2_Init+0xa8>)
 8001eac:	f241 3287 	movw	r2, #4999	; 0x1387
 8001eb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <MX_TIM2_Init+0xa8>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <MX_TIM2_Init+0xa8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ebe:	4818      	ldr	r0, [pc, #96]	; (8001f20 <MX_TIM2_Init+0xa8>)
 8001ec0:	f003 faa4 	bl	800540c <HAL_TIM_Base_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001eca:	f7ff fde7 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ed4:	f107 0310 	add.w	r3, r7, #16
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4811      	ldr	r0, [pc, #68]	; (8001f20 <MX_TIM2_Init+0xa8>)
 8001edc:	f003 fde4 	bl	8005aa8 <HAL_TIM_ConfigClockSource>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ee6:	f7ff fdd9 	bl	8001a9c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8001eea:	2108      	movs	r1, #8
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <MX_TIM2_Init+0xa8>)
 8001eee:	f003 fb5d 	bl	80055ac <HAL_TIM_OnePulse_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ef8:	f7ff fdd0 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efc:	2300      	movs	r3, #0
 8001efe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	4619      	mov	r1, r3
 8001f08:	4805      	ldr	r0, [pc, #20]	; (8001f20 <MX_TIM2_Init+0xa8>)
 8001f0a:	f004 fa6d 	bl	80063e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001f14:	f7ff fdc2 	bl	8001a9c <Error_Handler>
  }

}
 8001f18:	bf00      	nop
 8001f1a:	3720      	adds	r7, #32
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200004c8 	.word	0x200004c8

08001f24 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08e      	sub	sp, #56	; 0x38
 8001f28:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f44:	463b      	mov	r3, r7
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
 8001f50:	611a      	str	r2, [r3, #16]
 8001f52:	615a      	str	r2, [r3, #20]
 8001f54:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001f56:	4b2d      	ldr	r3, [pc, #180]	; (800200c <MX_TIM3_Init+0xe8>)
 8001f58:	4a2d      	ldr	r2, [pc, #180]	; (8002010 <MX_TIM3_Init+0xec>)
 8001f5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <MX_TIM3_Init+0xe8>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f62:	4b2a      	ldr	r3, [pc, #168]	; (800200c <MX_TIM3_Init+0xe8>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001f68:	4b28      	ldr	r3, [pc, #160]	; (800200c <MX_TIM3_Init+0xe8>)
 8001f6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f70:	4b26      	ldr	r3, [pc, #152]	; (800200c <MX_TIM3_Init+0xe8>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f76:	4b25      	ldr	r3, [pc, #148]	; (800200c <MX_TIM3_Init+0xe8>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f7c:	4823      	ldr	r0, [pc, #140]	; (800200c <MX_TIM3_Init+0xe8>)
 8001f7e:	f003 fa45 	bl	800540c <HAL_TIM_Base_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f88:	f7ff fd88 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f96:	4619      	mov	r1, r3
 8001f98:	481c      	ldr	r0, [pc, #112]	; (800200c <MX_TIM3_Init+0xe8>)
 8001f9a:	f003 fd85 	bl	8005aa8 <HAL_TIM_ConfigClockSource>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001fa4:	f7ff fd7a 	bl	8001a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fa8:	4818      	ldr	r0, [pc, #96]	; (800200c <MX_TIM3_Init+0xe8>)
 8001faa:	f003 fa85 	bl	80054b8 <HAL_TIM_PWM_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001fb4:	f7ff fd72 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fc0:	f107 031c 	add.w	r3, r7, #28
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4811      	ldr	r0, [pc, #68]	; (800200c <MX_TIM3_Init+0xe8>)
 8001fc8:	f004 fa0e 	bl	80063e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001fd2:	f7ff fd63 	bl	8001a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fd6:	2360      	movs	r3, #96	; 0x60
 8001fd8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fe6:	463b      	mov	r3, r7
 8001fe8:	2200      	movs	r2, #0
 8001fea:	4619      	mov	r1, r3
 8001fec:	4807      	ldr	r0, [pc, #28]	; (800200c <MX_TIM3_Init+0xe8>)
 8001fee:	f003 fc43 	bl	8005878 <HAL_TIM_PWM_ConfigChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001ff8:	f7ff fd50 	bl	8001a9c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001ffc:	4803      	ldr	r0, [pc, #12]	; (800200c <MX_TIM3_Init+0xe8>)
 8001ffe:	f000 f963 	bl	80022c8 <HAL_TIM_MspPostInit>

}
 8002002:	bf00      	nop
 8002004:	3738      	adds	r7, #56	; 0x38
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000448 	.word	0x20000448
 8002010:	40000400 	.word	0x40000400

08002014 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201a:	f107 0310 	add.w	r3, r7, #16
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8002032:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <MX_TIM4_Init+0x98>)
 8002034:	4a1e      	ldr	r2, [pc, #120]	; (80020b0 <MX_TIM4_Init+0x9c>)
 8002036:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 8002038:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <MX_TIM4_Init+0x98>)
 800203a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800203e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002040:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <MX_TIM4_Init+0x98>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002046:	4b19      	ldr	r3, [pc, #100]	; (80020ac <MX_TIM4_Init+0x98>)
 8002048:	f242 720f 	movw	r2, #9999	; 0x270f
 800204c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <MX_TIM4_Init+0x98>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002054:	4b15      	ldr	r3, [pc, #84]	; (80020ac <MX_TIM4_Init+0x98>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800205a:	4814      	ldr	r0, [pc, #80]	; (80020ac <MX_TIM4_Init+0x98>)
 800205c:	f003 f9d6 	bl	800540c <HAL_TIM_Base_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002066:	f7ff fd19 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800206a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800206e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	4619      	mov	r1, r3
 8002076:	480d      	ldr	r0, [pc, #52]	; (80020ac <MX_TIM4_Init+0x98>)
 8002078:	f003 fd16 	bl	8005aa8 <HAL_TIM_ConfigClockSource>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002082:	f7ff fd0b 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	4619      	mov	r1, r3
 8002092:	4806      	ldr	r0, [pc, #24]	; (80020ac <MX_TIM4_Init+0x98>)
 8002094:	f004 f9a8 	bl	80063e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800209e:	f7ff fcfd 	bl	8001a9c <Error_Handler>
  }

}
 80020a2:	bf00      	nop
 80020a4:	3720      	adds	r7, #32
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000408 	.word	0x20000408
 80020b0:	40000800 	.word	0x40000800

080020b4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <MX_TIM6_Init+0x64>)
 80020c6:	4a15      	ldr	r2, [pc, #84]	; (800211c <MX_TIM6_Init+0x68>)
 80020c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 107;
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <MX_TIM6_Init+0x64>)
 80020cc:	226b      	movs	r2, #107	; 0x6b
 80020ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <MX_TIM6_Init+0x64>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <MX_TIM6_Init+0x64>)
 80020d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020de:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <MX_TIM6_Init+0x64>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020e4:	480c      	ldr	r0, [pc, #48]	; (8002118 <MX_TIM6_Init+0x64>)
 80020e6:	f003 f991 	bl	800540c <HAL_TIM_Base_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80020f0:	f7ff fcd4 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020f4:	2320      	movs	r3, #32
 80020f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	4619      	mov	r1, r3
 8002100:	4805      	ldr	r0, [pc, #20]	; (8002118 <MX_TIM6_Init+0x64>)
 8002102:	f004 f971 	bl	80063e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800210c:	f7ff fcc6 	bl	8001a9c <Error_Handler>
  }

}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000488 	.word	0x20000488
 800211c:	40001000 	.word	0x40001000

08002120 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08e      	sub	sp, #56	; 0x38
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002140:	d114      	bne.n	800216c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002142:	4b5a      	ldr	r3, [pc, #360]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	4a59      	ldr	r2, [pc, #356]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6413      	str	r3, [r2, #64]	; 0x40
 800214e:	4b57      	ldr	r3, [pc, #348]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	623b      	str	r3, [r7, #32]
 8002158:	6a3b      	ldr	r3, [r7, #32]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	201c      	movs	r0, #28
 8002160:	f000 fd4f 	bl	8002c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002164:	201c      	movs	r0, #28
 8002166:	f000 fd68 	bl	8002c3a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800216a:	e09a      	b.n	80022a2 <HAL_TIM_Base_MspInit+0x182>
  else if(tim_baseHandle->Instance==TIM3)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a4f      	ldr	r2, [pc, #316]	; (80022b0 <HAL_TIM_Base_MspInit+0x190>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d14d      	bne.n	8002212 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002176:	4b4d      	ldr	r3, [pc, #308]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	4a4c      	ldr	r2, [pc, #304]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	6413      	str	r3, [r2, #64]	; 0x40
 8002182:	4b4a      	ldr	r3, [pc, #296]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	61fb      	str	r3, [r7, #28]
 800218c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218e:	4b47      	ldr	r3, [pc, #284]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a46      	ldr	r2, [pc, #280]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b44      	ldr	r3, [pc, #272]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a6:	4b41      	ldr	r3, [pc, #260]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a40      	ldr	r2, [pc, #256]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 80021ac:	f043 0304 	orr.w	r3, r3, #4
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b3e      	ldr	r3, [pc, #248]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TM3_PWM_CH4_Pin;
 80021be:	2302      	movs	r3, #2
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021ce:	2302      	movs	r3, #2
 80021d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TM3_PWM_CH4_GPIO_Port, &GPIO_InitStruct);
 80021d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d6:	4619      	mov	r1, r3
 80021d8:	4836      	ldr	r0, [pc, #216]	; (80022b4 <HAL_TIM_Base_MspInit+0x194>)
 80021da:	f001 f8c1 	bl	8003360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_RGB_CH_G_Pin|LED_RGB_CH_B_Pin;
 80021de:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2300      	movs	r3, #0
 80021ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021f0:	2302      	movs	r3, #2
 80021f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f8:	4619      	mov	r1, r3
 80021fa:	482f      	ldr	r0, [pc, #188]	; (80022b8 <HAL_TIM_Base_MspInit+0x198>)
 80021fc:	f001 f8b0 	bl	8003360 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002200:	2200      	movs	r2, #0
 8002202:	2100      	movs	r1, #0
 8002204:	201d      	movs	r0, #29
 8002206:	f000 fcfc 	bl	8002c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800220a:	201d      	movs	r0, #29
 800220c:	f000 fd15 	bl	8002c3a <HAL_NVIC_EnableIRQ>
}
 8002210:	e047      	b.n	80022a2 <HAL_TIM_Base_MspInit+0x182>
  else if(tim_baseHandle->Instance==TIM4)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a29      	ldr	r2, [pc, #164]	; (80022bc <HAL_TIM_Base_MspInit+0x19c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d131      	bne.n	8002280 <HAL_TIM_Base_MspInit+0x160>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800221c:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	4a22      	ldr	r2, [pc, #136]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	6413      	str	r3, [r2, #64]	; 0x40
 8002228:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	4a1c      	ldr	r2, [pc, #112]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 800223a:	f043 0308 	orr.w	r3, r3, #8
 800223e:	6313      	str	r3, [r2, #48]	; 0x30
 8002240:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC_TIM_DT_Pin|ENC_TIM_CLK_Pin;
 800224c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	2300      	movs	r3, #0
 800225c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800225e:	2302      	movs	r3, #2
 8002260:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002266:	4619      	mov	r1, r3
 8002268:	4815      	ldr	r0, [pc, #84]	; (80022c0 <HAL_TIM_Base_MspInit+0x1a0>)
 800226a:	f001 f879 	bl	8003360 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	201e      	movs	r0, #30
 8002274:	f000 fcc5 	bl	8002c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002278:	201e      	movs	r0, #30
 800227a:	f000 fcde 	bl	8002c3a <HAL_NVIC_EnableIRQ>
}
 800227e:	e010      	b.n	80022a2 <HAL_TIM_Base_MspInit+0x182>
  else if(tim_baseHandle->Instance==TIM6)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0f      	ldr	r2, [pc, #60]	; (80022c4 <HAL_TIM_Base_MspInit+0x1a4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d10b      	bne.n	80022a2 <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a07      	ldr	r2, [pc, #28]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 8002290:	f043 0310 	orr.w	r3, r3, #16
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_TIM_Base_MspInit+0x18c>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
}
 80022a2:	bf00      	nop
 80022a4:	3738      	adds	r7, #56	; 0x38
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40000400 	.word	0x40000400
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40000800 	.word	0x40000800
 80022c0:	40020c00 	.word	0x40020c00
 80022c4:	40001000 	.word	0x40001000

080022c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 030c 	add.w	r3, r7, #12
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a11      	ldr	r2, [pc, #68]	; (800232c <HAL_TIM_MspPostInit+0x64>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d11b      	bne.n	8002322 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ea:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_TIM_MspPostInit+0x68>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a10      	ldr	r2, [pc, #64]	; (8002330 <HAL_TIM_MspPostInit+0x68>)
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_TIM_MspPostInit+0x68>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LED_RGB_CH_R_Pin;
 8002302:	2310      	movs	r3, #16
 8002304:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002312:	2302      	movs	r3, #2
 8002314:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_RGB_CH_R_GPIO_Port, &GPIO_InitStruct);
 8002316:	f107 030c 	add.w	r3, r7, #12
 800231a:	4619      	mov	r1, r3
 800231c:	4805      	ldr	r0, [pc, #20]	; (8002334 <HAL_TIM_MspPostInit+0x6c>)
 800231e:	f001 f81f 	bl	8003360 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002322:	bf00      	nop
 8002324:	3720      	adds	r7, #32
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40000400 	.word	0x40000400
 8002330:	40023800 	.word	0x40023800
 8002334:	40020400 	.word	0x40020400

08002338 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800233c:	4b14      	ldr	r3, [pc, #80]	; (8002390 <MX_USART3_UART_Init+0x58>)
 800233e:	4a15      	ldr	r2, [pc, #84]	; (8002394 <MX_USART3_UART_Init+0x5c>)
 8002340:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <MX_USART3_UART_Init+0x58>)
 8002344:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002348:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <MX_USART3_UART_Init+0x58>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <MX_USART3_UART_Init+0x58>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <MX_USART3_UART_Init+0x58>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <MX_USART3_UART_Init+0x58>)
 800235e:	220c      	movs	r2, #12
 8002360:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <MX_USART3_UART_Init+0x58>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <MX_USART3_UART_Init+0x58>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <MX_USART3_UART_Init+0x58>)
 8002370:	2200      	movs	r2, #0
 8002372:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <MX_USART3_UART_Init+0x58>)
 8002376:	2200      	movs	r2, #0
 8002378:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800237a:	4805      	ldr	r0, [pc, #20]	; (8002390 <MX_USART3_UART_Init+0x58>)
 800237c:	f004 f8e0 	bl	8006540 <HAL_UART_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002386:	f7ff fb89 	bl	8001a9c <Error_Handler>
  }

}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000508 	.word	0x20000508
 8002394:	40004800 	.word	0x40004800

08002398 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <HAL_UART_MspInit+0x8c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d130      	bne.n	800241c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023ba:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_UART_MspInit+0x90>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	4a1a      	ldr	r2, [pc, #104]	; (8002428 <HAL_UART_MspInit+0x90>)
 80023c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c4:	6413      	str	r3, [r2, #64]	; 0x40
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <HAL_UART_MspInit+0x90>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <HAL_UART_MspInit+0x90>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a14      	ldr	r2, [pc, #80]	; (8002428 <HAL_UART_MspInit+0x90>)
 80023d8:	f043 0308 	orr.w	r3, r3, #8
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <HAL_UART_MspInit+0x90>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80023ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f8:	2303      	movs	r3, #3
 80023fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023fc:	2307      	movs	r3, #7
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	4619      	mov	r1, r3
 8002406:	4809      	ldr	r0, [pc, #36]	; (800242c <HAL_UART_MspInit+0x94>)
 8002408:	f000 ffaa 	bl	8003360 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800240c:	2200      	movs	r2, #0
 800240e:	2100      	movs	r1, #0
 8002410:	2027      	movs	r0, #39	; 0x27
 8002412:	f000 fbf6 	bl	8002c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002416:	2027      	movs	r0, #39	; 0x27
 8002418:	f000 fc0f 	bl	8002c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800241c:	bf00      	nop
 800241e:	3728      	adds	r7, #40	; 0x28
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40004800 	.word	0x40004800
 8002428:	40023800 	.word	0x40023800
 800242c:	40020c00 	.word	0x40020c00

08002430 <Reset_Handler>:
 8002430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002468 <LoopFillZerobss+0x14>
 8002434:	2100      	movs	r1, #0
 8002436:	e003      	b.n	8002440 <LoopCopyDataInit>

08002438 <CopyDataInit>:
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <LoopFillZerobss+0x18>)
 800243a:	585b      	ldr	r3, [r3, r1]
 800243c:	5043      	str	r3, [r0, r1]
 800243e:	3104      	adds	r1, #4

08002440 <LoopCopyDataInit>:
 8002440:	480b      	ldr	r0, [pc, #44]	; (8002470 <LoopFillZerobss+0x1c>)
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <LoopFillZerobss+0x20>)
 8002444:	1842      	adds	r2, r0, r1
 8002446:	429a      	cmp	r2, r3
 8002448:	d3f6      	bcc.n	8002438 <CopyDataInit>
 800244a:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <LoopFillZerobss+0x24>)
 800244c:	e002      	b.n	8002454 <LoopFillZerobss>

0800244e <FillZerobss>:
 800244e:	2300      	movs	r3, #0
 8002450:	f842 3b04 	str.w	r3, [r2], #4

08002454 <LoopFillZerobss>:
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <LoopFillZerobss+0x28>)
 8002456:	429a      	cmp	r2, r3
 8002458:	d3f9      	bcc.n	800244e <FillZerobss>
 800245a:	f7ff fcf7 	bl	8001e4c <SystemInit>
 800245e:	f004 ff97 	bl	8007390 <__libc_init_array>
 8002462:	f7ff fa5d 	bl	8001920 <main>
 8002466:	4770      	bx	lr
 8002468:	20050000 	.word	0x20050000
 800246c:	08008180 	.word	0x08008180
 8002470:	20000000 	.word	0x20000000
 8002474:	200001dc 	.word	0x200001dc
 8002478:	200001dc 	.word	0x200001dc
 800247c:	20000590 	.word	0x20000590

08002480 <ADC_IRQHandler>:
 8002480:	e7fe      	b.n	8002480 <ADC_IRQHandler>

08002482 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002486:	2003      	movs	r0, #3
 8002488:	f000 fbb0 	bl	8002bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800248c:	2000      	movs	r0, #0
 800248e:	f000 f805 	bl	800249c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002492:	f7ff fbff 	bl	8001c94 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_InitTick+0x54>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_InitTick+0x58>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	4619      	mov	r1, r3
 80024ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fbcb 	bl	8002c56 <HAL_SYSTICK_Config>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e00e      	b.n	80024e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b0f      	cmp	r3, #15
 80024ce:	d80a      	bhi.n	80024e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d0:	2200      	movs	r2, #0
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295
 80024d8:	f000 fb93 	bl	8002c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024dc:	4a06      	ldr	r2, [pc, #24]	; (80024f8 <HAL_InitTick+0x5c>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	e000      	b.n	80024e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000000 	.word	0x20000000
 80024f4:	20000008 	.word	0x20000008
 80024f8:	20000004 	.word	0x20000004

080024fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_IncTick+0x20>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_IncTick+0x24>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4413      	add	r3, r2
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_IncTick+0x24>)
 800250e:	6013      	str	r3, [r2, #0]
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000008 	.word	0x20000008
 8002520:	20000588 	.word	0x20000588

08002524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return uwTick;
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <HAL_GetTick+0x14>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000588 	.word	0x20000588

0800253c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e031      	b.n	80025b6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7fe fcae 	bl	8000ebc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	d116      	bne.n	80025a8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HAL_ADC_Init+0x84>)
 8002580:	4013      	ands	r3, r2
 8002582:	f043 0202 	orr.w	r2, r3, #2
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f964 	bl	8002858 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f023 0303 	bic.w	r3, r3, #3
 800259e:	f043 0201 	orr.w	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
 80025a6:	e001      	b.n	80025ac <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	ffffeefd 	.word	0xffffeefd

080025c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x1c>
 80025dc:	2302      	movs	r3, #2
 80025de:	e12a      	b.n	8002836 <HAL_ADC_ConfigChannel+0x272>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b09      	cmp	r3, #9
 80025ee:	d93a      	bls.n	8002666 <HAL_ADC_ConfigChannel+0xa2>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025f8:	d035      	beq.n	8002666 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68d9      	ldr	r1, [r3, #12]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	b29b      	uxth	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	3b1e      	subs	r3, #30
 8002610:	2207      	movs	r2, #7
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43da      	mvns	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	400a      	ands	r2, r1
 800261e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a87      	ldr	r2, [pc, #540]	; (8002844 <HAL_ADC_ConfigChannel+0x280>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d10a      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68d9      	ldr	r1, [r3, #12]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	061a      	lsls	r2, r3, #24
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800263e:	e035      	b.n	80026ac <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68d9      	ldr	r1, [r3, #12]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	4618      	mov	r0, r3
 8002652:	4603      	mov	r3, r0
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4403      	add	r3, r0
 8002658:	3b1e      	subs	r3, #30
 800265a:	409a      	lsls	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002664:	e022      	b.n	80026ac <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6919      	ldr	r1, [r3, #16]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	2207      	movs	r2, #7
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43da      	mvns	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	400a      	ands	r2, r1
 8002688:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6919      	ldr	r1, [r3, #16]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	4618      	mov	r0, r3
 800269c:	4603      	mov	r3, r0
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4403      	add	r3, r0
 80026a2:	409a      	lsls	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b06      	cmp	r3, #6
 80026b2:	d824      	bhi.n	80026fe <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	3b05      	subs	r3, #5
 80026c6:	221f      	movs	r2, #31
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43da      	mvns	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	400a      	ands	r2, r1
 80026d4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	4618      	mov	r0, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	3b05      	subs	r3, #5
 80026f0:	fa00 f203 	lsl.w	r2, r0, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	635a      	str	r2, [r3, #52]	; 0x34
 80026fc:	e04c      	b.n	8002798 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b0c      	cmp	r3, #12
 8002704:	d824      	bhi.n	8002750 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	3b23      	subs	r3, #35	; 0x23
 8002718:	221f      	movs	r2, #31
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	400a      	ands	r2, r1
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	4618      	mov	r0, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	3b23      	subs	r3, #35	; 0x23
 8002742:	fa00 f203 	lsl.w	r2, r0, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
 800274e:	e023      	b.n	8002798 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	3b41      	subs	r3, #65	; 0x41
 8002762:	221f      	movs	r2, #31
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43da      	mvns	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	400a      	ands	r2, r1
 8002770:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	b29b      	uxth	r3, r3
 800277e:	4618      	mov	r0, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	3b41      	subs	r3, #65	; 0x41
 800278c:	fa00 f203 	lsl.w	r2, r0, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a2a      	ldr	r2, [pc, #168]	; (8002848 <HAL_ADC_ConfigChannel+0x284>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d10a      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x1f4>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027aa:	d105      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80027ac:	4b27      	ldr	r3, [pc, #156]	; (800284c <HAL_ADC_ConfigChannel+0x288>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4a26      	ldr	r2, [pc, #152]	; (800284c <HAL_ADC_ConfigChannel+0x288>)
 80027b2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80027b6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a22      	ldr	r2, [pc, #136]	; (8002848 <HAL_ADC_ConfigChannel+0x284>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d109      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x212>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b12      	cmp	r3, #18
 80027c8:	d105      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80027ca:	4b20      	ldr	r3, [pc, #128]	; (800284c <HAL_ADC_ConfigChannel+0x288>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4a1f      	ldr	r2, [pc, #124]	; (800284c <HAL_ADC_ConfigChannel+0x288>)
 80027d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027d4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a1b      	ldr	r2, [pc, #108]	; (8002848 <HAL_ADC_ConfigChannel+0x284>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d125      	bne.n	800282c <HAL_ADC_ConfigChannel+0x268>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a17      	ldr	r2, [pc, #92]	; (8002844 <HAL_ADC_ConfigChannel+0x280>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d003      	beq.n	80027f2 <HAL_ADC_ConfigChannel+0x22e>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b11      	cmp	r3, #17
 80027f0:	d11c      	bne.n	800282c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <HAL_ADC_ConfigChannel+0x288>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4a15      	ldr	r2, [pc, #84]	; (800284c <HAL_ADC_ConfigChannel+0x288>)
 80027f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027fc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a10      	ldr	r2, [pc, #64]	; (8002844 <HAL_ADC_ConfigChannel+0x280>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d111      	bne.n	800282c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_ADC_ConfigChannel+0x28c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a11      	ldr	r2, [pc, #68]	; (8002854 <HAL_ADC_ConfigChannel+0x290>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0c9a      	lsrs	r2, r3, #18
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800281e:	e002      	b.n	8002826 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3b01      	subs	r3, #1
 8002824:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f9      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	10000012 	.word	0x10000012
 8002848:	40012000 	.word	0x40012000
 800284c:	40012300 	.word	0x40012300
 8002850:	20000000 	.word	0x20000000
 8002854:	431bde83 	.word	0x431bde83

08002858 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002860:	4b78      	ldr	r3, [pc, #480]	; (8002a44 <ADC_Init+0x1ec>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a77      	ldr	r2, [pc, #476]	; (8002a44 <ADC_Init+0x1ec>)
 8002866:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800286a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800286c:	4b75      	ldr	r3, [pc, #468]	; (8002a44 <ADC_Init+0x1ec>)
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4973      	ldr	r1, [pc, #460]	; (8002a44 <ADC_Init+0x1ec>)
 8002876:	4313      	orrs	r3, r2
 8002878:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002888:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	021a      	lsls	r2, r3, #8
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6899      	ldr	r1, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <ADC_Init+0x1f0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d022      	beq.n	8002932 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6899      	ldr	r1, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800291c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6899      	ldr	r1, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	e00f      	b.n	8002952 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002950:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0202 	bic.w	r2, r2, #2
 8002960:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6899      	ldr	r1, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	005a      	lsls	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01b      	beq.n	80029b8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800298e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800299e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	3b01      	subs	r3, #1
 80029ac:	035a      	lsls	r2, r3, #13
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	e007      	b.n	80029c8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	051a      	lsls	r2, r3, #20
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6899      	ldr	r1, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a0a:	025a      	lsls	r2, r3, #9
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6899      	ldr	r1, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	029a      	lsls	r2, r3, #10
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	609a      	str	r2, [r3, #8]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	40012300 	.word	0x40012300
 8002a48:	0f000001 	.word	0x0f000001

08002a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <__NVIC_SetPriorityGrouping+0x40>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7a:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <__NVIC_SetPriorityGrouping+0x40>)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	60d3      	str	r3, [r2, #12]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00
 8002a90:	05fa0000 	.word	0x05fa0000

08002a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <__NVIC_GetPriorityGrouping+0x18>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	f003 0307 	and.w	r3, r3, #7
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	db0b      	blt.n	8002ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	4907      	ldr	r1, [pc, #28]	; (8002ae8 <__NVIC_EnableIRQ+0x38>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000e100 	.word	0xe000e100

08002aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	6039      	str	r1, [r7, #0]
 8002af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	db0a      	blt.n	8002b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	490c      	ldr	r1, [pc, #48]	; (8002b38 <__NVIC_SetPriority+0x4c>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	0112      	lsls	r2, r2, #4
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b14:	e00a      	b.n	8002b2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	4908      	ldr	r1, [pc, #32]	; (8002b3c <__NVIC_SetPriority+0x50>)
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	3b04      	subs	r3, #4
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	440b      	add	r3, r1
 8002b2a:	761a      	strb	r2, [r3, #24]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000e100 	.word	0xe000e100
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f1c3 0307 	rsb	r3, r3, #7
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	bf28      	it	cs
 8002b5e:	2304      	movcs	r3, #4
 8002b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d902      	bls.n	8002b70 <NVIC_EncodePriority+0x30>
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3b03      	subs	r3, #3
 8002b6e:	e000      	b.n	8002b72 <NVIC_EncodePriority+0x32>
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	f04f 32ff 	mov.w	r2, #4294967295
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	401a      	ands	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b88:	f04f 31ff 	mov.w	r1, #4294967295
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	43d9      	mvns	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	4313      	orrs	r3, r2
         );
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3724      	adds	r7, #36	; 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb8:	d301      	bcc.n	8002bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e00f      	b.n	8002bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bbe:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <SysTick_Config+0x40>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc6:	210f      	movs	r1, #15
 8002bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bcc:	f7ff ff8e 	bl	8002aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <SysTick_Config+0x40>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd6:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <SysTick_Config+0x40>)
 8002bd8:	2207      	movs	r2, #7
 8002bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	e000e010 	.word	0xe000e010

08002bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ff29 	bl	8002a4c <__NVIC_SetPriorityGrouping>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	4603      	mov	r3, r0
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c14:	f7ff ff3e 	bl	8002a94 <__NVIC_GetPriorityGrouping>
 8002c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	6978      	ldr	r0, [r7, #20]
 8002c20:	f7ff ff8e 	bl	8002b40 <NVIC_EncodePriority>
 8002c24:	4602      	mov	r2, r0
 8002c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff5d 	bl	8002aec <__NVIC_SetPriority>
}
 8002c32:	bf00      	nop
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4603      	mov	r3, r0
 8002c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff31 	bl	8002ab0 <__NVIC_EnableIRQ>
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff ffa2 	bl	8002ba8 <SysTick_Config>
 8002c64:	4603      	mov	r3, r0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e014      	b.n	8002caa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	791b      	ldrb	r3, [r3, #4]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d105      	bne.n	8002c96 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7fe fa5f 	bl	8001154 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b087      	sub	sp, #28
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	795b      	ldrb	r3, [r3, #5]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_DAC_ConfigChannel+0x20>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e036      	b.n	8002d40 <HAL_DAC_ConfigChannel+0x8e>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002ce6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6819      	ldr	r1, [r3, #0]
 8002d20:	22c0      	movs	r2, #192	; 0xc0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43da      	mvns	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	400a      	ands	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	371c      	adds	r7, #28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d58:	f7ff fbe4 	bl	8002524 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e099      	b.n	8002e9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0201 	bic.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d88:	e00f      	b.n	8002daa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d8a:	f7ff fbcb 	bl	8002524 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b05      	cmp	r3, #5
 8002d96:	d908      	bls.n	8002daa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2203      	movs	r2, #3
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e078      	b.n	8002e9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1e8      	bne.n	8002d8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4b38      	ldr	r3, [pc, #224]	; (8002ea4 <HAL_DMA_Init+0x158>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d107      	bne.n	8002e14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f023 0307 	bic.w	r3, r3, #7
 8002e2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d117      	bne.n	8002e6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00e      	beq.n	8002e6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fa0b 	bl	800326c <DMA_CheckFifoParam>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2240      	movs	r2, #64	; 0x40
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e016      	b.n	8002e9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f9c2 	bl	8003200 <DMA_CalcBaseAndBitshift>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	223f      	movs	r2, #63	; 0x3f
 8002e86:	409a      	lsls	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	f010803f 	.word	0xf010803f

08002ea8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d004      	beq.n	8002ec6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2280      	movs	r2, #128	; 0x80
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e00c      	b.n	8002ee0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2205      	movs	r2, #5
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002ef8:	4b92      	ldr	r3, [pc, #584]	; (8003144 <HAL_DMA_IRQHandler+0x258>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a92      	ldr	r2, [pc, #584]	; (8003148 <HAL_DMA_IRQHandler+0x25c>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	0a9b      	lsrs	r3, r3, #10
 8002f04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	2208      	movs	r2, #8
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d01a      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d013      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0204 	bic.w	r2, r2, #4
 8002f3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f44:	2208      	movs	r2, #8
 8002f46:	409a      	lsls	r2, r3
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d012      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00b      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	409a      	lsls	r2, r3
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f86:	f043 0202 	orr.w	r2, r3, #2
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f92:	2204      	movs	r2, #4
 8002f94:	409a      	lsls	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d012      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb0:	2204      	movs	r2, #4
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	f043 0204 	orr.w	r2, r3, #4
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc8:	2210      	movs	r2, #16
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d043      	beq.n	800305c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d03c      	beq.n	800305c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe6:	2210      	movs	r2, #16
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d018      	beq.n	800302e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d108      	bne.n	800301c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d024      	beq.n	800305c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4798      	blx	r3
 800301a:	e01f      	b.n	800305c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003020:	2b00      	cmp	r3, #0
 8003022:	d01b      	beq.n	800305c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
 800302c:	e016      	b.n	800305c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d107      	bne.n	800304c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0208 	bic.w	r2, r2, #8
 800304a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003060:	2220      	movs	r2, #32
 8003062:	409a      	lsls	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4013      	ands	r3, r2
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 808e 	beq.w	800318a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 8086 	beq.w	800318a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	2220      	movs	r2, #32
 8003084:	409a      	lsls	r2, r3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b05      	cmp	r3, #5
 8003094:	d136      	bne.n	8003104 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0216 	bic.w	r2, r2, #22
 80030a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d103      	bne.n	80030c6 <HAL_DMA_IRQHandler+0x1da>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0208 	bic.w	r2, r2, #8
 80030d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030da:	223f      	movs	r2, #63	; 0x3f
 80030dc:	409a      	lsls	r2, r3
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d07d      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	4798      	blx	r3
        }
        return;
 8003102:	e078      	b.n	80031f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d01c      	beq.n	800314c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d108      	bne.n	8003132 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	2b00      	cmp	r3, #0
 8003126:	d030      	beq.n	800318a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	4798      	blx	r3
 8003130:	e02b      	b.n	800318a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d027      	beq.n	800318a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	4798      	blx	r3
 8003142:	e022      	b.n	800318a <HAL_DMA_IRQHandler+0x29e>
 8003144:	20000000 	.word	0x20000000
 8003148:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0210 	bic.w	r2, r2, #16
 8003168:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318e:	2b00      	cmp	r3, #0
 8003190:	d032      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d022      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2205      	movs	r2, #5
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0201 	bic.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	3301      	adds	r3, #1
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d307      	bcc.n	80031d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f2      	bne.n	80031b6 <HAL_DMA_IRQHandler+0x2ca>
 80031d0:	e000      	b.n	80031d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031d2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	4798      	blx	r3
 80031f4:	e000      	b.n	80031f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031f6:	bf00      	nop
    }
  }
}
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop

08003200 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	3b10      	subs	r3, #16
 8003210:	4a13      	ldr	r2, [pc, #76]	; (8003260 <DMA_CalcBaseAndBitshift+0x60>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800321a:	4a12      	ldr	r2, [pc, #72]	; (8003264 <DMA_CalcBaseAndBitshift+0x64>)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b03      	cmp	r3, #3
 800322c:	d908      	bls.n	8003240 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <DMA_CalcBaseAndBitshift+0x68>)
 8003236:	4013      	ands	r3, r2
 8003238:	1d1a      	adds	r2, r3, #4
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	659a      	str	r2, [r3, #88]	; 0x58
 800323e:	e006      	b.n	800324e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <DMA_CalcBaseAndBitshift+0x68>)
 8003248:	4013      	ands	r3, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	aaaaaaab 	.word	0xaaaaaaab
 8003264:	08007fdc 	.word	0x08007fdc
 8003268:	fffffc00 	.word	0xfffffc00

0800326c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d11f      	bne.n	80032c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b03      	cmp	r3, #3
 800328a:	d855      	bhi.n	8003338 <DMA_CheckFifoParam+0xcc>
 800328c:	a201      	add	r2, pc, #4	; (adr r2, 8003294 <DMA_CheckFifoParam+0x28>)
 800328e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003292:	bf00      	nop
 8003294:	080032a5 	.word	0x080032a5
 8003298:	080032b7 	.word	0x080032b7
 800329c:	080032a5 	.word	0x080032a5
 80032a0:	08003339 	.word	0x08003339
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d045      	beq.n	800333c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b4:	e042      	b.n	800333c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032be:	d13f      	bne.n	8003340 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032c4:	e03c      	b.n	8003340 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ce:	d121      	bne.n	8003314 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	d836      	bhi.n	8003344 <DMA_CheckFifoParam+0xd8>
 80032d6:	a201      	add	r2, pc, #4	; (adr r2, 80032dc <DMA_CheckFifoParam+0x70>)
 80032d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032dc:	080032ed 	.word	0x080032ed
 80032e0:	080032f3 	.word	0x080032f3
 80032e4:	080032ed 	.word	0x080032ed
 80032e8:	08003305 	.word	0x08003305
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
      break;
 80032f0:	e02f      	b.n	8003352 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d024      	beq.n	8003348 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003302:	e021      	b.n	8003348 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800330c:	d11e      	bne.n	800334c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003312:	e01b      	b.n	800334c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d902      	bls.n	8003320 <DMA_CheckFifoParam+0xb4>
 800331a:	2b03      	cmp	r3, #3
 800331c:	d003      	beq.n	8003326 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800331e:	e018      	b.n	8003352 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
      break;
 8003324:	e015      	b.n	8003352 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00e      	beq.n	8003350 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	73fb      	strb	r3, [r7, #15]
      break;
 8003336:	e00b      	b.n	8003350 <DMA_CheckFifoParam+0xe4>
      break;
 8003338:	bf00      	nop
 800333a:	e00a      	b.n	8003352 <DMA_CheckFifoParam+0xe6>
      break;
 800333c:	bf00      	nop
 800333e:	e008      	b.n	8003352 <DMA_CheckFifoParam+0xe6>
      break;
 8003340:	bf00      	nop
 8003342:	e006      	b.n	8003352 <DMA_CheckFifoParam+0xe6>
      break;
 8003344:	bf00      	nop
 8003346:	e004      	b.n	8003352 <DMA_CheckFifoParam+0xe6>
      break;
 8003348:	bf00      	nop
 800334a:	e002      	b.n	8003352 <DMA_CheckFifoParam+0xe6>
      break;   
 800334c:	bf00      	nop
 800334e:	e000      	b.n	8003352 <DMA_CheckFifoParam+0xe6>
      break;
 8003350:	bf00      	nop
    }
  } 
  
  return status; 
 8003352:	7bfb      	ldrb	r3, [r7, #15]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003360:	b480      	push	{r7}
 8003362:	b089      	sub	sp, #36	; 0x24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003372:	2300      	movs	r3, #0
 8003374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003376:	2300      	movs	r3, #0
 8003378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	e175      	b.n	800366c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003380:	2201      	movs	r2, #1
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	429a      	cmp	r2, r3
 800339a:	f040 8164 	bne.w	8003666 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d00b      	beq.n	80033be <HAL_GPIO_Init+0x5e>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d007      	beq.n	80033be <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033b2:	2b11      	cmp	r3, #17
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b12      	cmp	r3, #18
 80033bc:	d130      	bne.n	8003420 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	2203      	movs	r2, #3
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033f4:	2201      	movs	r2, #1
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 0201 	and.w	r2, r3, #1
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	2203      	movs	r2, #3
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d003      	beq.n	8003460 <HAL_GPIO_Init+0x100>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b12      	cmp	r3, #18
 800345e:	d123      	bne.n	80034a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	08da      	lsrs	r2, r3, #3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3208      	adds	r2, #8
 8003468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	220f      	movs	r2, #15
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	08da      	lsrs	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3208      	adds	r2, #8
 80034a2:	69b9      	ldr	r1, [r7, #24]
 80034a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	2203      	movs	r2, #3
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0203 	and.w	r2, r3, #3
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80be 	beq.w	8003666 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ea:	4b65      	ldr	r3, [pc, #404]	; (8003680 <HAL_GPIO_Init+0x320>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	4a64      	ldr	r2, [pc, #400]	; (8003680 <HAL_GPIO_Init+0x320>)
 80034f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034f4:	6453      	str	r3, [r2, #68]	; 0x44
 80034f6:	4b62      	ldr	r3, [pc, #392]	; (8003680 <HAL_GPIO_Init+0x320>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003502:	4a60      	ldr	r2, [pc, #384]	; (8003684 <HAL_GPIO_Init+0x324>)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	3302      	adds	r3, #2
 800350a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	220f      	movs	r2, #15
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a57      	ldr	r2, [pc, #348]	; (8003688 <HAL_GPIO_Init+0x328>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d037      	beq.n	800359e <HAL_GPIO_Init+0x23e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a56      	ldr	r2, [pc, #344]	; (800368c <HAL_GPIO_Init+0x32c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d031      	beq.n	800359a <HAL_GPIO_Init+0x23a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a55      	ldr	r2, [pc, #340]	; (8003690 <HAL_GPIO_Init+0x330>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d02b      	beq.n	8003596 <HAL_GPIO_Init+0x236>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a54      	ldr	r2, [pc, #336]	; (8003694 <HAL_GPIO_Init+0x334>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d025      	beq.n	8003592 <HAL_GPIO_Init+0x232>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a53      	ldr	r2, [pc, #332]	; (8003698 <HAL_GPIO_Init+0x338>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01f      	beq.n	800358e <HAL_GPIO_Init+0x22e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a52      	ldr	r2, [pc, #328]	; (800369c <HAL_GPIO_Init+0x33c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d019      	beq.n	800358a <HAL_GPIO_Init+0x22a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a51      	ldr	r2, [pc, #324]	; (80036a0 <HAL_GPIO_Init+0x340>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <HAL_GPIO_Init+0x226>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a50      	ldr	r2, [pc, #320]	; (80036a4 <HAL_GPIO_Init+0x344>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00d      	beq.n	8003582 <HAL_GPIO_Init+0x222>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4f      	ldr	r2, [pc, #316]	; (80036a8 <HAL_GPIO_Init+0x348>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d007      	beq.n	800357e <HAL_GPIO_Init+0x21e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4e      	ldr	r2, [pc, #312]	; (80036ac <HAL_GPIO_Init+0x34c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d101      	bne.n	800357a <HAL_GPIO_Init+0x21a>
 8003576:	2309      	movs	r3, #9
 8003578:	e012      	b.n	80035a0 <HAL_GPIO_Init+0x240>
 800357a:	230a      	movs	r3, #10
 800357c:	e010      	b.n	80035a0 <HAL_GPIO_Init+0x240>
 800357e:	2308      	movs	r3, #8
 8003580:	e00e      	b.n	80035a0 <HAL_GPIO_Init+0x240>
 8003582:	2307      	movs	r3, #7
 8003584:	e00c      	b.n	80035a0 <HAL_GPIO_Init+0x240>
 8003586:	2306      	movs	r3, #6
 8003588:	e00a      	b.n	80035a0 <HAL_GPIO_Init+0x240>
 800358a:	2305      	movs	r3, #5
 800358c:	e008      	b.n	80035a0 <HAL_GPIO_Init+0x240>
 800358e:	2304      	movs	r3, #4
 8003590:	e006      	b.n	80035a0 <HAL_GPIO_Init+0x240>
 8003592:	2303      	movs	r3, #3
 8003594:	e004      	b.n	80035a0 <HAL_GPIO_Init+0x240>
 8003596:	2302      	movs	r3, #2
 8003598:	e002      	b.n	80035a0 <HAL_GPIO_Init+0x240>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <HAL_GPIO_Init+0x240>
 800359e:	2300      	movs	r3, #0
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	f002 0203 	and.w	r2, r2, #3
 80035a6:	0092      	lsls	r2, r2, #2
 80035a8:	4093      	lsls	r3, r2
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80035b0:	4934      	ldr	r1, [pc, #208]	; (8003684 <HAL_GPIO_Init+0x324>)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	089b      	lsrs	r3, r3, #2
 80035b6:	3302      	adds	r3, #2
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035be:	4b3c      	ldr	r3, [pc, #240]	; (80036b0 <HAL_GPIO_Init+0x350>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035e2:	4a33      	ldr	r2, [pc, #204]	; (80036b0 <HAL_GPIO_Init+0x350>)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035e8:	4b31      	ldr	r3, [pc, #196]	; (80036b0 <HAL_GPIO_Init+0x350>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800360c:	4a28      	ldr	r2, [pc, #160]	; (80036b0 <HAL_GPIO_Init+0x350>)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003612:	4b27      	ldr	r3, [pc, #156]	; (80036b0 <HAL_GPIO_Init+0x350>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003636:	4a1e      	ldr	r2, [pc, #120]	; (80036b0 <HAL_GPIO_Init+0x350>)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800363c:	4b1c      	ldr	r3, [pc, #112]	; (80036b0 <HAL_GPIO_Init+0x350>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003660:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <HAL_GPIO_Init+0x350>)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3301      	adds	r3, #1
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b0f      	cmp	r3, #15
 8003670:	f67f ae86 	bls.w	8003380 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003674:	bf00      	nop
 8003676:	3724      	adds	r7, #36	; 0x24
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40023800 	.word	0x40023800
 8003684:	40013800 	.word	0x40013800
 8003688:	40020000 	.word	0x40020000
 800368c:	40020400 	.word	0x40020400
 8003690:	40020800 	.word	0x40020800
 8003694:	40020c00 	.word	0x40020c00
 8003698:	40021000 	.word	0x40021000
 800369c:	40021400 	.word	0x40021400
 80036a0:	40021800 	.word	0x40021800
 80036a4:	40021c00 	.word	0x40021c00
 80036a8:	40022000 	.word	0x40022000
 80036ac:	40022400 	.word	0x40022400
 80036b0:	40013c00 	.word	0x40013c00

080036b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	807b      	strh	r3, [r7, #2]
 80036c0:	4613      	mov	r3, r2
 80036c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036c4:	787b      	ldrb	r3, [r7, #1]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ca:	887a      	ldrh	r2, [r7, #2]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036d0:	e003      	b.n	80036da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036d2:	887b      	ldrh	r3, [r7, #2]
 80036d4:	041a      	lsls	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	619a      	str	r2, [r3, #24]
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d006      	beq.n	800370c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036fe:	4a05      	ldr	r2, [pc, #20]	; (8003714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	4618      	mov	r0, r3
 8003708:	f000 f806 	bl	8003718 <HAL_GPIO_EXTI_Callback>
  }
}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40013c00 	.word	0x40013c00

08003718 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e07f      	b.n	8003842 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fe f85c 	bl	8001814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2224      	movs	r2, #36	; 0x24
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003780:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003790:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d107      	bne.n	80037aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	e006      	b.n	80037b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d104      	bne.n	80037ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6859      	ldr	r1, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_I2C_Init+0x11c>)
 80037d6:	430b      	orrs	r3, r1
 80037d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	ea42 0103 	orr.w	r1, r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	021a      	lsls	r2, r3, #8
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69d9      	ldr	r1, [r3, #28]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1a      	ldr	r2, [r3, #32]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	02008000 	.word	0x02008000

08003850 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af02      	add	r7, sp, #8
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	461a      	mov	r2, r3
 800385c:	460b      	mov	r3, r1
 800385e:	817b      	strh	r3, [r7, #10]
 8003860:	4613      	mov	r3, r2
 8003862:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b20      	cmp	r3, #32
 800386e:	f040 80da 	bne.w	8003a26 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_I2C_Master_Transmit+0x30>
 800387c:	2302      	movs	r3, #2
 800387e:	e0d3      	b.n	8003a28 <HAL_I2C_Master_Transmit+0x1d8>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003888:	f7fe fe4c 	bl	8002524 <HAL_GetTick>
 800388c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	2319      	movs	r3, #25
 8003894:	2201      	movs	r2, #1
 8003896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f9e6 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e0be      	b.n	8003a28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2221      	movs	r2, #33	; 0x21
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2210      	movs	r2, #16
 80038b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	893a      	ldrh	r2, [r7, #8]
 80038ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2bff      	cmp	r3, #255	; 0xff
 80038da:	d90e      	bls.n	80038fa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	22ff      	movs	r2, #255	; 0xff
 80038e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	8979      	ldrh	r1, [r7, #10]
 80038ea:	4b51      	ldr	r3, [pc, #324]	; (8003a30 <HAL_I2C_Master_Transmit+0x1e0>)
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 fb48 	bl	8003f88 <I2C_TransferConfig>
 80038f8:	e06c      	b.n	80039d4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003908:	b2da      	uxtb	r2, r3
 800390a:	8979      	ldrh	r1, [r7, #10]
 800390c:	4b48      	ldr	r3, [pc, #288]	; (8003a30 <HAL_I2C_Master_Transmit+0x1e0>)
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fb37 	bl	8003f88 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800391a:	e05b      	b.n	80039d4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	6a39      	ldr	r1, [r7, #32]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f9e3 	bl	8003cec <I2C_WaitOnTXISFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e07b      	b.n	8003a28 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	781a      	ldrb	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d034      	beq.n	80039d4 <HAL_I2C_Master_Transmit+0x184>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396e:	2b00      	cmp	r3, #0
 8003970:	d130      	bne.n	80039d4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	2200      	movs	r2, #0
 800397a:	2180      	movs	r1, #128	; 0x80
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f975 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e04d      	b.n	8003a28 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	2bff      	cmp	r3, #255	; 0xff
 8003994:	d90e      	bls.n	80039b4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	22ff      	movs	r2, #255	; 0xff
 800399a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	8979      	ldrh	r1, [r7, #10]
 80039a4:	2300      	movs	r3, #0
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 faeb 	bl	8003f88 <I2C_TransferConfig>
 80039b2:	e00f      	b.n	80039d4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	8979      	ldrh	r1, [r7, #10]
 80039c6:	2300      	movs	r3, #0
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fada 	bl	8003f88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d19e      	bne.n	800391c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	6a39      	ldr	r1, [r7, #32]
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f9c2 	bl	8003d6c <I2C_WaitOnSTOPFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e01a      	b.n	8003a28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2220      	movs	r2, #32
 80039f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <HAL_I2C_Master_Transmit+0x1e4>)
 8003a06:	400b      	ands	r3, r1
 8003a08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e000      	b.n	8003a28 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
  }
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	80002000 	.word	0x80002000
 8003a34:	fe00e800 	.word	0xfe00e800

08003a38 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	607a      	str	r2, [r7, #4]
 8003a42:	461a      	mov	r2, r3
 8003a44:	460b      	mov	r3, r1
 8003a46:	817b      	strh	r3, [r7, #10]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	f040 80db 	bne.w	8003c10 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_I2C_Master_Receive+0x30>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e0d4      	b.n	8003c12 <HAL_I2C_Master_Receive+0x1da>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a70:	f7fe fd58 	bl	8002524 <HAL_GetTick>
 8003a74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2319      	movs	r3, #25
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f8f2 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0bf      	b.n	8003c12 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2222      	movs	r2, #34	; 0x22
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2210      	movs	r2, #16
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	893a      	ldrh	r2, [r7, #8]
 8003ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2bff      	cmp	r3, #255	; 0xff
 8003ac2:	d90e      	bls.n	8003ae2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	22ff      	movs	r2, #255	; 0xff
 8003ac8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	8979      	ldrh	r1, [r7, #10]
 8003ad2:	4b52      	ldr	r3, [pc, #328]	; (8003c1c <HAL_I2C_Master_Receive+0x1e4>)
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fa54 	bl	8003f88 <I2C_TransferConfig>
 8003ae0:	e06d      	b.n	8003bbe <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	8979      	ldrh	r1, [r7, #10]
 8003af4:	4b49      	ldr	r3, [pc, #292]	; (8003c1c <HAL_I2C_Master_Receive+0x1e4>)
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fa43 	bl	8003f88 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003b02:	e05c      	b.n	8003bbe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	6a39      	ldr	r1, [r7, #32]
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f96b 	bl	8003de4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e07c      	b.n	8003c12 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d034      	beq.n	8003bbe <HAL_I2C_Master_Receive+0x186>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d130      	bne.n	8003bbe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	2200      	movs	r2, #0
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f880 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e04d      	b.n	8003c12 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2bff      	cmp	r3, #255	; 0xff
 8003b7e:	d90e      	bls.n	8003b9e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	22ff      	movs	r2, #255	; 0xff
 8003b84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	8979      	ldrh	r1, [r7, #10]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f9f6 	bl	8003f88 <I2C_TransferConfig>
 8003b9c:	e00f      	b.n	8003bbe <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	8979      	ldrh	r1, [r7, #10]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f9e5 	bl	8003f88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d19d      	bne.n	8003b04 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	6a39      	ldr	r1, [r7, #32]
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f8cd 	bl	8003d6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e01a      	b.n	8003c12 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2220      	movs	r2, #32
 8003be2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6859      	ldr	r1, [r3, #4]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <HAL_I2C_Master_Receive+0x1e8>)
 8003bf0:	400b      	ands	r3, r1
 8003bf2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	e000      	b.n	8003c12 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003c10:	2302      	movs	r3, #2
  }
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	80002400 	.word	0x80002400
 8003c20:	fe00e800 	.word	0xfe00e800

08003c24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d103      	bne.n	8003c42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d007      	beq.n	8003c60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	619a      	str	r2, [r3, #24]
  }
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c7c:	e022      	b.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d01e      	beq.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c86:	f7fe fc4d 	bl	8002524 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d302      	bcc.n	8003c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d113      	bne.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e00f      	b.n	8003ce4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	bf0c      	ite	eq
 8003cd4:	2301      	moveq	r3, #1
 8003cd6:	2300      	movne	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d0cd      	beq.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cf8:	e02c      	b.n	8003d54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f8dc 	bl	8003ebc <I2C_IsAcknowledgeFailed>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e02a      	b.n	8003d64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d14:	d01e      	beq.n	8003d54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d16:	f7fe fc05 	bl	8002524 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d302      	bcc.n	8003d2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d113      	bne.n	8003d54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d30:	f043 0220 	orr.w	r2, r3, #32
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e007      	b.n	8003d64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d1cb      	bne.n	8003cfa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d78:	e028      	b.n	8003dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f89c 	bl	8003ebc <I2C_IsAcknowledgeFailed>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e026      	b.n	8003ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d8e:	f7fe fbc9 	bl	8002524 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d302      	bcc.n	8003da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d113      	bne.n	8003dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	f043 0220 	orr.w	r2, r3, #32
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e007      	b.n	8003ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d1cf      	bne.n	8003d7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003df0:	e055      	b.n	8003e9e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f860 	bl	8003ebc <I2C_IsAcknowledgeFailed>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e053      	b.n	8003eae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d129      	bne.n	8003e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d105      	bne.n	8003e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e03f      	b.n	8003eae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2220      	movs	r2, #32
 8003e34:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6859      	ldr	r1, [r3, #4]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003e42:	400b      	ands	r3, r1
 8003e44:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e022      	b.n	8003eae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e68:	f7fe fb5c 	bl	8002524 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d302      	bcc.n	8003e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f043 0220 	orr.w	r2, r3, #32
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e007      	b.n	8003eae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d1a2      	bne.n	8003df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	fe00e800 	.word	0xfe00e800

08003ebc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	2b10      	cmp	r3, #16
 8003ed4:	d151      	bne.n	8003f7a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ed6:	e022      	b.n	8003f1e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d01e      	beq.n	8003f1e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee0:	f7fe fb20 	bl	8002524 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d302      	bcc.n	8003ef6 <I2C_IsAcknowledgeFailed+0x3a>
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d113      	bne.n	8003f1e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f043 0220 	orr.w	r2, r3, #32
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e02e      	b.n	8003f7c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d1d5      	bne.n	8003ed8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2210      	movs	r2, #16
 8003f32:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f7ff fe71 	bl	8003c24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6859      	ldr	r1, [r3, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <I2C_IsAcknowledgeFailed+0xc8>)
 8003f4e:	400b      	ands	r3, r1
 8003f50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	f043 0204 	orr.w	r2, r3, #4
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	fe00e800 	.word	0xfe00e800

08003f88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	460b      	mov	r3, r1
 8003f94:	817b      	strh	r3, [r7, #10]
 8003f96:	4613      	mov	r3, r2
 8003f98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	0d5b      	lsrs	r3, r3, #21
 8003fa4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <I2C_TransferConfig+0x58>)
 8003faa:	430b      	orrs	r3, r1
 8003fac:	43db      	mvns	r3, r3
 8003fae:	ea02 0103 	and.w	r1, r2, r3
 8003fb2:	897b      	ldrh	r3, [r7, #10]
 8003fb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fb8:	7a7b      	ldrb	r3, [r7, #9]
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	03ff63ff 	.word	0x03ff63ff

08003fe4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d138      	bne.n	800406c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004004:	2302      	movs	r3, #2
 8004006:	e032      	b.n	800406e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004036:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	e000      	b.n	800406e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800407a:	b480      	push	{r7}
 800407c:	b085      	sub	sp, #20
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b20      	cmp	r3, #32
 800408e:	d139      	bne.n	8004104 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800409a:	2302      	movs	r3, #2
 800409c:	e033      	b.n	8004106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2224      	movs	r2, #36	; 0x24
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0201 	bic.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	e000      	b.n	8004106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004104:	2302      	movs	r3, #2
  }
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a04      	ldr	r2, [pc, #16]	; (8004130 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800411e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004122:	6013      	str	r3, [r2, #0]
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40007000 	.word	0x40007000

08004134 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800413e:	4b23      	ldr	r3, [pc, #140]	; (80041cc <HAL_PWREx_EnableOverDrive+0x98>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	4a22      	ldr	r2, [pc, #136]	; (80041cc <HAL_PWREx_EnableOverDrive+0x98>)
 8004144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004148:	6413      	str	r3, [r2, #64]	; 0x40
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_PWREx_EnableOverDrive+0x98>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004156:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1d      	ldr	r2, [pc, #116]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004160:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004162:	f7fe f9df 	bl	8002524 <HAL_GetTick>
 8004166:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004168:	e009      	b.n	800417e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800416a:	f7fe f9db 	bl	8002524 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004178:	d901      	bls.n	800417e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e022      	b.n	80041c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800417e:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418a:	d1ee      	bne.n	800416a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800418c:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a0f      	ldr	r2, [pc, #60]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004196:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004198:	f7fe f9c4 	bl	8002524 <HAL_GetTick>
 800419c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800419e:	e009      	b.n	80041b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041a0:	f7fe f9c0 	bl	8002524 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ae:	d901      	bls.n	80041b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e007      	b.n	80041c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041c0:	d1ee      	bne.n	80041a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40023800 	.word	0x40023800
 80041d0:	40007000 	.word	0x40007000

080041d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80041dc:	2300      	movs	r3, #0
 80041de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e291      	b.n	800470e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 8087 	beq.w	8004306 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041f8:	4b96      	ldr	r3, [pc, #600]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 030c 	and.w	r3, r3, #12
 8004200:	2b04      	cmp	r3, #4
 8004202:	d00c      	beq.n	800421e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004204:	4b93      	ldr	r3, [pc, #588]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 030c 	and.w	r3, r3, #12
 800420c:	2b08      	cmp	r3, #8
 800420e:	d112      	bne.n	8004236 <HAL_RCC_OscConfig+0x62>
 8004210:	4b90      	ldr	r3, [pc, #576]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800421c:	d10b      	bne.n	8004236 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421e:	4b8d      	ldr	r3, [pc, #564]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d06c      	beq.n	8004304 <HAL_RCC_OscConfig+0x130>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d168      	bne.n	8004304 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e26b      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x7a>
 8004240:	4b84      	ldr	r3, [pc, #528]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a83      	ldr	r2, [pc, #524]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	e02e      	b.n	80042ac <HAL_RCC_OscConfig+0xd8>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x9c>
 8004256:	4b7f      	ldr	r3, [pc, #508]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a7e      	ldr	r2, [pc, #504]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800425c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b7c      	ldr	r3, [pc, #496]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a7b      	ldr	r2, [pc, #492]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e01d      	b.n	80042ac <HAL_RCC_OscConfig+0xd8>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0xc0>
 800427a:	4b76      	ldr	r3, [pc, #472]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a75      	ldr	r2, [pc, #468]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4b73      	ldr	r3, [pc, #460]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a72      	ldr	r2, [pc, #456]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e00b      	b.n	80042ac <HAL_RCC_OscConfig+0xd8>
 8004294:	4b6f      	ldr	r3, [pc, #444]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a6e      	ldr	r2, [pc, #440]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800429a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4b6c      	ldr	r3, [pc, #432]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a6b      	ldr	r2, [pc, #428]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80042a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fe f936 	bl	8002524 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042bc:	f7fe f932 	bl	8002524 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e21f      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ce:	4b61      	ldr	r3, [pc, #388]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0xe8>
 80042da:	e014      	b.n	8004306 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fe f922 	bl	8002524 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fe f91e 	bl	8002524 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e20b      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f6:	4b57      	ldr	r3, [pc, #348]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x110>
 8004302:	e000      	b.n	8004306 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d069      	beq.n	80043e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004312:	4b50      	ldr	r3, [pc, #320]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800431e:	4b4d      	ldr	r3, [pc, #308]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b08      	cmp	r3, #8
 8004328:	d11c      	bne.n	8004364 <HAL_RCC_OscConfig+0x190>
 800432a:	4b4a      	ldr	r3, [pc, #296]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d116      	bne.n	8004364 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004336:	4b47      	ldr	r3, [pc, #284]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_RCC_OscConfig+0x17a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d001      	beq.n	800434e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e1df      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434e:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	493d      	ldr	r1, [pc, #244]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004362:	e040      	b.n	80043e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d023      	beq.n	80043b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800436c:	4b39      	ldr	r3, [pc, #228]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a38      	ldr	r2, [pc, #224]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fe f8d4 	bl	8002524 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004380:	f7fe f8d0 	bl	8002524 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e1bd      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004392:	4b30      	ldr	r3, [pc, #192]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439e:	4b2d      	ldr	r3, [pc, #180]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4929      	ldr	r1, [pc, #164]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]
 80043b2:	e018      	b.n	80043e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043b4:	4b27      	ldr	r3, [pc, #156]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a26      	ldr	r2, [pc, #152]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043ba:	f023 0301 	bic.w	r3, r3, #1
 80043be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fe f8b0 	bl	8002524 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c8:	f7fe f8ac 	bl	8002524 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e199      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043da:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d038      	beq.n	8004464 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d019      	beq.n	800442e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fa:	4b16      	ldr	r3, [pc, #88]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fe:	4a15      	ldr	r2, [pc, #84]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004406:	f7fe f88d 	bl	8002524 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800440e:	f7fe f889 	bl	8002524 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e176      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x23a>
 800442c:	e01a      	b.n	8004464 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004432:	4a08      	ldr	r2, [pc, #32]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443a:	f7fe f873 	bl	8002524 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004440:	e00a      	b.n	8004458 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004442:	f7fe f86f 	bl	8002524 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d903      	bls.n	8004458 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e15c      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
 8004454:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004458:	4b91      	ldr	r3, [pc, #580]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800445a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1ee      	bne.n	8004442 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80a4 	beq.w	80045ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004472:	4b8b      	ldr	r3, [pc, #556]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10d      	bne.n	800449a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800447e:	4b88      	ldr	r3, [pc, #544]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	4a87      	ldr	r2, [pc, #540]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004488:	6413      	str	r3, [r2, #64]	; 0x40
 800448a:	4b85      	ldr	r3, [pc, #532]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004492:	60bb      	str	r3, [r7, #8]
 8004494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004496:	2301      	movs	r3, #1
 8004498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800449a:	4b82      	ldr	r3, [pc, #520]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d118      	bne.n	80044d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80044a6:	4b7f      	ldr	r3, [pc, #508]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a7e      	ldr	r2, [pc, #504]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 80044ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b2:	f7fe f837 	bl	8002524 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ba:	f7fe f833 	bl	8002524 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b64      	cmp	r3, #100	; 0x64
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e120      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044cc:	4b75      	ldr	r3, [pc, #468]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d106      	bne.n	80044ee <HAL_RCC_OscConfig+0x31a>
 80044e0:	4b6f      	ldr	r3, [pc, #444]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	4a6e      	ldr	r2, [pc, #440]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	6713      	str	r3, [r2, #112]	; 0x70
 80044ec:	e02d      	b.n	800454a <HAL_RCC_OscConfig+0x376>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10c      	bne.n	8004510 <HAL_RCC_OscConfig+0x33c>
 80044f6:	4b6a      	ldr	r3, [pc, #424]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fa:	4a69      	ldr	r2, [pc, #420]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	6713      	str	r3, [r2, #112]	; 0x70
 8004502:	4b67      	ldr	r3, [pc, #412]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	4a66      	ldr	r2, [pc, #408]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004508:	f023 0304 	bic.w	r3, r3, #4
 800450c:	6713      	str	r3, [r2, #112]	; 0x70
 800450e:	e01c      	b.n	800454a <HAL_RCC_OscConfig+0x376>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b05      	cmp	r3, #5
 8004516:	d10c      	bne.n	8004532 <HAL_RCC_OscConfig+0x35e>
 8004518:	4b61      	ldr	r3, [pc, #388]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	4a60      	ldr	r2, [pc, #384]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800451e:	f043 0304 	orr.w	r3, r3, #4
 8004522:	6713      	str	r3, [r2, #112]	; 0x70
 8004524:	4b5e      	ldr	r3, [pc, #376]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	4a5d      	ldr	r2, [pc, #372]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	6713      	str	r3, [r2, #112]	; 0x70
 8004530:	e00b      	b.n	800454a <HAL_RCC_OscConfig+0x376>
 8004532:	4b5b      	ldr	r3, [pc, #364]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	4a5a      	ldr	r2, [pc, #360]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	6713      	str	r3, [r2, #112]	; 0x70
 800453e:	4b58      	ldr	r3, [pc, #352]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	4a57      	ldr	r2, [pc, #348]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004544:	f023 0304 	bic.w	r3, r3, #4
 8004548:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d015      	beq.n	800457e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004552:	f7fd ffe7 	bl	8002524 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004558:	e00a      	b.n	8004570 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455a:	f7fd ffe3 	bl	8002524 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	f241 3288 	movw	r2, #5000	; 0x1388
 8004568:	4293      	cmp	r3, r2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e0ce      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004570:	4b4b      	ldr	r3, [pc, #300]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ee      	beq.n	800455a <HAL_RCC_OscConfig+0x386>
 800457c:	e014      	b.n	80045a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457e:	f7fd ffd1 	bl	8002524 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004584:	e00a      	b.n	800459c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004586:	f7fd ffcd 	bl	8002524 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	f241 3288 	movw	r2, #5000	; 0x1388
 8004594:	4293      	cmp	r3, r2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e0b8      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800459c:	4b40      	ldr	r3, [pc, #256]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1ee      	bne.n	8004586 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d105      	bne.n	80045ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ae:	4b3c      	ldr	r3, [pc, #240]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	4a3b      	ldr	r2, [pc, #236]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80045b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80a4 	beq.w	800470c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c4:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 030c 	and.w	r3, r3, #12
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d06b      	beq.n	80046a8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d149      	bne.n	800466c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d8:	4b31      	ldr	r3, [pc, #196]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a30      	ldr	r2, [pc, #192]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80045de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd ff9e 	bl	8002524 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd ff9a 	bl	8002524 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e087      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fe:	4b28      	ldr	r3, [pc, #160]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	019b      	lsls	r3, r3, #6
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	085b      	lsrs	r3, r3, #1
 8004622:	3b01      	subs	r3, #1
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	061b      	lsls	r3, r3, #24
 800462e:	4313      	orrs	r3, r2
 8004630:	4a1b      	ldr	r2, [pc, #108]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004632:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004636:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a18      	ldr	r2, [pc, #96]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800463e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fd ff6e 	bl	8002524 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464c:	f7fd ff6a 	bl	8002524 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e057      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x478>
 800466a:	e04f      	b.n	800470c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a0b      	ldr	r2, [pc, #44]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fd ff54 	bl	8002524 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004680:	f7fd ff50 	bl	8002524 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e03d      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004692:	4b03      	ldr	r3, [pc, #12]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x4ac>
 800469e:	e035      	b.n	800470c <HAL_RCC_OscConfig+0x538>
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80046a8:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <HAL_RCC_OscConfig+0x544>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d028      	beq.n	8004708 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d121      	bne.n	8004708 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d11a      	bne.n	8004708 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046d8:	4013      	ands	r3, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d111      	bne.n	8004708 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	085b      	lsrs	r3, r3, #1
 80046f0:	3b01      	subs	r3, #1
 80046f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d107      	bne.n	8004708 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40023800 	.word	0x40023800

0800471c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0d0      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004734:	4b6a      	ldr	r3, [pc, #424]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d910      	bls.n	8004764 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004742:	4b67      	ldr	r3, [pc, #412]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 020f 	bic.w	r2, r3, #15
 800474a:	4965      	ldr	r1, [pc, #404]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	4313      	orrs	r3, r2
 8004750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004752:	4b63      	ldr	r3, [pc, #396]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d001      	beq.n	8004764 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0b8      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d020      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800477c:	4b59      	ldr	r3, [pc, #356]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4a58      	ldr	r2, [pc, #352]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004786:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004794:	4b53      	ldr	r3, [pc, #332]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	4a52      	ldr	r2, [pc, #328]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 800479a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800479e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047a0:	4b50      	ldr	r3, [pc, #320]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	494d      	ldr	r1, [pc, #308]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d040      	beq.n	8004840 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d107      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	4b47      	ldr	r3, [pc, #284]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d115      	bne.n	80047fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e07f      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047de:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e073      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ee:	4b3d      	ldr	r3, [pc, #244]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e06b      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fe:	4b39      	ldr	r3, [pc, #228]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f023 0203 	bic.w	r2, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	4936      	ldr	r1, [pc, #216]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 800480c:	4313      	orrs	r3, r2
 800480e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004810:	f7fd fe88 	bl	8002524 <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	e00a      	b.n	800482e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004818:	f7fd fe84 	bl	8002524 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	; 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e053      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482e:	4b2d      	ldr	r3, [pc, #180]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 020c 	and.w	r2, r3, #12
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	429a      	cmp	r2, r3
 800483e:	d1eb      	bne.n	8004818 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004840:	4b27      	ldr	r3, [pc, #156]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d210      	bcs.n	8004870 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 020f 	bic.w	r2, r3, #15
 8004856:	4922      	ldr	r1, [pc, #136]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b20      	ldr	r3, [pc, #128]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e032      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800487c:	4b19      	ldr	r3, [pc, #100]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	4916      	ldr	r1, [pc, #88]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800489a:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	490e      	ldr	r1, [pc, #56]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ae:	f000 f821 	bl	80048f4 <HAL_RCC_GetSysClockFreq>
 80048b2:	4601      	mov	r1, r0
 80048b4:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	4a0a      	ldr	r2, [pc, #40]	; (80048e8 <HAL_RCC_ClockConfig+0x1cc>)
 80048c0:	5cd3      	ldrb	r3, [r2, r3]
 80048c2:	fa21 f303 	lsr.w	r3, r1, r3
 80048c6:	4a09      	ldr	r2, [pc, #36]	; (80048ec <HAL_RCC_ClockConfig+0x1d0>)
 80048c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048ca:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <HAL_RCC_ClockConfig+0x1d4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fd fde4 	bl	800249c <HAL_InitTick>

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40023c00 	.word	0x40023c00
 80048e4:	40023800 	.word	0x40023800
 80048e8:	08007fc4 	.word	0x08007fc4
 80048ec:	20000000 	.word	0x20000000
 80048f0:	20000004 	.word	0x20000004

080048f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80048fa:	2300      	movs	r3, #0
 80048fc:	607b      	str	r3, [r7, #4]
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	2300      	movs	r3, #0
 8004904:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004906:	2300      	movs	r3, #0
 8004908:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800490a:	4b63      	ldr	r3, [pc, #396]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b04      	cmp	r3, #4
 8004914:	d007      	beq.n	8004926 <HAL_RCC_GetSysClockFreq+0x32>
 8004916:	2b08      	cmp	r3, #8
 8004918:	d008      	beq.n	800492c <HAL_RCC_GetSysClockFreq+0x38>
 800491a:	2b00      	cmp	r3, #0
 800491c:	f040 80b4 	bne.w	8004a88 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004920:	4b5e      	ldr	r3, [pc, #376]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004922:	60bb      	str	r3, [r7, #8]
      break;
 8004924:	e0b3      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004926:	4b5e      	ldr	r3, [pc, #376]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004928:	60bb      	str	r3, [r7, #8]
      break;
 800492a:	e0b0      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800492c:	4b5a      	ldr	r3, [pc, #360]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004934:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004936:	4b58      	ldr	r3, [pc, #352]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d04a      	beq.n	80049d8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004942:	4b55      	ldr	r3, [pc, #340]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	f04f 0400 	mov.w	r4, #0
 800494c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	ea03 0501 	and.w	r5, r3, r1
 8004958:	ea04 0602 	and.w	r6, r4, r2
 800495c:	4629      	mov	r1, r5
 800495e:	4632      	mov	r2, r6
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	f04f 0400 	mov.w	r4, #0
 8004968:	0154      	lsls	r4, r2, #5
 800496a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800496e:	014b      	lsls	r3, r1, #5
 8004970:	4619      	mov	r1, r3
 8004972:	4622      	mov	r2, r4
 8004974:	1b49      	subs	r1, r1, r5
 8004976:	eb62 0206 	sbc.w	r2, r2, r6
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	f04f 0400 	mov.w	r4, #0
 8004982:	0194      	lsls	r4, r2, #6
 8004984:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004988:	018b      	lsls	r3, r1, #6
 800498a:	1a5b      	subs	r3, r3, r1
 800498c:	eb64 0402 	sbc.w	r4, r4, r2
 8004990:	f04f 0100 	mov.w	r1, #0
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	00e2      	lsls	r2, r4, #3
 800499a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800499e:	00d9      	lsls	r1, r3, #3
 80049a0:	460b      	mov	r3, r1
 80049a2:	4614      	mov	r4, r2
 80049a4:	195b      	adds	r3, r3, r5
 80049a6:	eb44 0406 	adc.w	r4, r4, r6
 80049aa:	f04f 0100 	mov.w	r1, #0
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	0262      	lsls	r2, r4, #9
 80049b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80049b8:	0259      	lsls	r1, r3, #9
 80049ba:	460b      	mov	r3, r1
 80049bc:	4614      	mov	r4, r2
 80049be:	4618      	mov	r0, r3
 80049c0:	4621      	mov	r1, r4
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f04f 0400 	mov.w	r4, #0
 80049c8:	461a      	mov	r2, r3
 80049ca:	4623      	mov	r3, r4
 80049cc:	f7fc f896 	bl	8000afc <__aeabi_uldivmod>
 80049d0:	4603      	mov	r3, r0
 80049d2:	460c      	mov	r4, r1
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	e049      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d8:	4b2f      	ldr	r3, [pc, #188]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	099b      	lsrs	r3, r3, #6
 80049de:	f04f 0400 	mov.w	r4, #0
 80049e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	ea03 0501 	and.w	r5, r3, r1
 80049ee:	ea04 0602 	and.w	r6, r4, r2
 80049f2:	4629      	mov	r1, r5
 80049f4:	4632      	mov	r2, r6
 80049f6:	f04f 0300 	mov.w	r3, #0
 80049fa:	f04f 0400 	mov.w	r4, #0
 80049fe:	0154      	lsls	r4, r2, #5
 8004a00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a04:	014b      	lsls	r3, r1, #5
 8004a06:	4619      	mov	r1, r3
 8004a08:	4622      	mov	r2, r4
 8004a0a:	1b49      	subs	r1, r1, r5
 8004a0c:	eb62 0206 	sbc.w	r2, r2, r6
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	f04f 0400 	mov.w	r4, #0
 8004a18:	0194      	lsls	r4, r2, #6
 8004a1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a1e:	018b      	lsls	r3, r1, #6
 8004a20:	1a5b      	subs	r3, r3, r1
 8004a22:	eb64 0402 	sbc.w	r4, r4, r2
 8004a26:	f04f 0100 	mov.w	r1, #0
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	00e2      	lsls	r2, r4, #3
 8004a30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a34:	00d9      	lsls	r1, r3, #3
 8004a36:	460b      	mov	r3, r1
 8004a38:	4614      	mov	r4, r2
 8004a3a:	195b      	adds	r3, r3, r5
 8004a3c:	eb44 0406 	adc.w	r4, r4, r6
 8004a40:	f04f 0100 	mov.w	r1, #0
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	02a2      	lsls	r2, r4, #10
 8004a4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a4e:	0299      	lsls	r1, r3, #10
 8004a50:	460b      	mov	r3, r1
 8004a52:	4614      	mov	r4, r2
 8004a54:	4618      	mov	r0, r3
 8004a56:	4621      	mov	r1, r4
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f04f 0400 	mov.w	r4, #0
 8004a5e:	461a      	mov	r2, r3
 8004a60:	4623      	mov	r3, r4
 8004a62:	f7fc f84b 	bl	8000afc <__aeabi_uldivmod>
 8004a66:	4603      	mov	r3, r0
 8004a68:	460c      	mov	r4, r1
 8004a6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	0c1b      	lsrs	r3, r3, #16
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	3301      	adds	r3, #1
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a84:	60bb      	str	r3, [r7, #8]
      break;
 8004a86:	e002      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a88:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a8a:	60bb      	str	r3, [r7, #8]
      break;
 8004a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	00f42400 	.word	0x00f42400
 8004aa0:	007a1200 	.word	0x007a1200

08004aa4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa8:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20000000 	.word	0x20000000

08004abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ac0:	f7ff fff0 	bl	8004aa4 <HAL_RCC_GetHCLKFreq>
 8004ac4:	4601      	mov	r1, r0
 8004ac6:	4b05      	ldr	r3, [pc, #20]	; (8004adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	0a9b      	lsrs	r3, r3, #10
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	4a03      	ldr	r2, [pc, #12]	; (8004ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ad2:	5cd3      	ldrb	r3, [r2, r3]
 8004ad4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	08007fd4 	.word	0x08007fd4

08004ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ae8:	f7ff ffdc 	bl	8004aa4 <HAL_RCC_GetHCLKFreq>
 8004aec:	4601      	mov	r1, r0
 8004aee:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	0b5b      	lsrs	r3, r3, #13
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	4a03      	ldr	r2, [pc, #12]	; (8004b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004afa:	5cd3      	ldrb	r3, [r2, r3]
 8004afc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40023800 	.word	0x40023800
 8004b08:	08007fd4 	.word	0x08007fd4

08004b0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d012      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b34:	4b69      	ldr	r3, [pc, #420]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4a68      	ldr	r2, [pc, #416]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b3e:	6093      	str	r3, [r2, #8]
 8004b40:	4b66      	ldr	r3, [pc, #408]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b48:	4964      	ldr	r1, [pc, #400]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b56:	2301      	movs	r3, #1
 8004b58:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d017      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b66:	4b5d      	ldr	r3, [pc, #372]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b74:	4959      	ldr	r1, [pc, #356]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b84:	d101      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b86:	2301      	movs	r3, #1
 8004b88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b92:	2301      	movs	r3, #1
 8004b94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d017      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ba2:	4b4e      	ldr	r3, [pc, #312]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	494a      	ldr	r1, [pc, #296]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc0:	d101      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004bde:	2301      	movs	r3, #1
 8004be0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 808b 	beq.w	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bf0:	4b3a      	ldr	r3, [pc, #232]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	4a39      	ldr	r2, [pc, #228]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8004bfc:	4b37      	ldr	r3, [pc, #220]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c08:	4b35      	ldr	r3, [pc, #212]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a34      	ldr	r2, [pc, #208]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c14:	f7fd fc86 	bl	8002524 <HAL_GetTick>
 8004c18:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c1c:	f7fd fc82 	bl	8002524 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b64      	cmp	r3, #100	; 0x64
 8004c28:	d901      	bls.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e355      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c2e:	4b2c      	ldr	r3, [pc, #176]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c3a:	4b28      	ldr	r3, [pc, #160]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c42:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d035      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d02e      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c58:	4b20      	ldr	r3, [pc, #128]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c60:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c62:	4b1e      	ldr	r3, [pc, #120]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c66:	4a1d      	ldr	r2, [pc, #116]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c72:	4a1a      	ldr	r2, [pc, #104]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c7a:	4a18      	ldr	r2, [pc, #96]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c80:	4b16      	ldr	r3, [pc, #88]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d114      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8c:	f7fd fc4a 	bl	8002524 <HAL_GetTick>
 8004c90:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c92:	e00a      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c94:	f7fd fc46 	bl	8002524 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e317      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004caa:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0ee      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cc2:	d111      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004cc4:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004cd0:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cd2:	400b      	ands	r3, r1
 8004cd4:	4901      	ldr	r1, [pc, #4]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	608b      	str	r3, [r1, #8]
 8004cda:	e00b      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	40007000 	.word	0x40007000
 8004ce4:	0ffffcff 	.word	0x0ffffcff
 8004ce8:	4bb0      	ldr	r3, [pc, #704]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	4aaf      	ldr	r2, [pc, #700]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004cee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cf2:	6093      	str	r3, [r2, #8]
 8004cf4:	4bad      	ldr	r3, [pc, #692]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004cf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d00:	49aa      	ldr	r1, [pc, #680]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d010      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d12:	4ba6      	ldr	r3, [pc, #664]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d18:	4aa4      	ldr	r2, [pc, #656]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d22:	4ba2      	ldr	r3, [pc, #648]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d24:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2c:	499f      	ldr	r1, [pc, #636]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d40:	4b9a      	ldr	r3, [pc, #616]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d4e:	4997      	ldr	r1, [pc, #604]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d62:	4b92      	ldr	r3, [pc, #584]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d70:	498e      	ldr	r1, [pc, #568]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d84:	4b89      	ldr	r3, [pc, #548]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d92:	4986      	ldr	r1, [pc, #536]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004da6:	4b81      	ldr	r3, [pc, #516]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db4:	497d      	ldr	r1, [pc, #500]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dc8:	4b78      	ldr	r3, [pc, #480]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dce:	f023 0203 	bic.w	r2, r3, #3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd6:	4975      	ldr	r1, [pc, #468]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dea:	4b70      	ldr	r3, [pc, #448]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df0:	f023 020c 	bic.w	r2, r3, #12
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df8:	496c      	ldr	r1, [pc, #432]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e0c:	4b67      	ldr	r3, [pc, #412]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1a:	4964      	ldr	r1, [pc, #400]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e2e:	4b5f      	ldr	r3, [pc, #380]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e34:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3c:	495b      	ldr	r1, [pc, #364]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e50:	4b56      	ldr	r3, [pc, #344]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	4953      	ldr	r1, [pc, #332]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e72:	4b4e      	ldr	r3, [pc, #312]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e80:	494a      	ldr	r1, [pc, #296]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e94:	4b45      	ldr	r3, [pc, #276]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea2:	4942      	ldr	r1, [pc, #264]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004eb6:	4b3d      	ldr	r3, [pc, #244]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec4:	4939      	ldr	r1, [pc, #228]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ed8:	4b34      	ldr	r3, [pc, #208]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ede:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee6:	4931      	ldr	r1, [pc, #196]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d011      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004efa:	4b2c      	ldr	r3, [pc, #176]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f00:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f08:	4928      	ldr	r1, [pc, #160]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f18:	d101      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f3a:	4b1c      	ldr	r3, [pc, #112]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f40:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f48:	4918      	ldr	r1, [pc, #96]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00b      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f5c:	4b13      	ldr	r3, [pc, #76]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f62:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f6c:	490f      	ldr	r1, [pc, #60]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d005      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f82:	f040 80d8 	bne.w	8005136 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f86:	4b09      	ldr	r3, [pc, #36]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a08      	ldr	r2, [pc, #32]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f92:	f7fd fac7 	bl	8002524 <HAL_GetTick>
 8004f96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f98:	e00a      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f9a:	f7fd fac3 	bl	8002524 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b64      	cmp	r3, #100	; 0x64
 8004fa6:	d903      	bls.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e196      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004fac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fb0:	4b6c      	ldr	r3, [pc, #432]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1ee      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d021      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d11d      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fd0:	4b64      	ldr	r3, [pc, #400]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd6:	0c1b      	lsrs	r3, r3, #16
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fde:	4b61      	ldr	r3, [pc, #388]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe4:	0e1b      	lsrs	r3, r3, #24
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	019a      	lsls	r2, r3, #6
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	041b      	lsls	r3, r3, #16
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	061b      	lsls	r3, r3, #24
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	071b      	lsls	r3, r3, #28
 8005004:	4957      	ldr	r1, [pc, #348]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d004      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800502a:	2b00      	cmp	r3, #0
 800502c:	d02e      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005036:	d129      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005038:	4b4a      	ldr	r3, [pc, #296]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800503a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800503e:	0c1b      	lsrs	r3, r3, #16
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005046:	4b47      	ldr	r3, [pc, #284]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800504c:	0f1b      	lsrs	r3, r3, #28
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	019a      	lsls	r2, r3, #6
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	041b      	lsls	r3, r3, #16
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	061b      	lsls	r3, r3, #24
 8005066:	431a      	orrs	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	071b      	lsls	r3, r3, #28
 800506c:	493d      	ldr	r1, [pc, #244]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005074:	4b3b      	ldr	r3, [pc, #236]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800507a:	f023 021f 	bic.w	r2, r3, #31
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	3b01      	subs	r3, #1
 8005084:	4937      	ldr	r1, [pc, #220]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01d      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005098:	4b32      	ldr	r3, [pc, #200]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800509a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800509e:	0e1b      	lsrs	r3, r3, #24
 80050a0:	f003 030f 	and.w	r3, r3, #15
 80050a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050a6:	4b2f      	ldr	r3, [pc, #188]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ac:	0f1b      	lsrs	r3, r3, #28
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	019a      	lsls	r2, r3, #6
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	041b      	lsls	r3, r3, #16
 80050c0:	431a      	orrs	r2, r3
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	061b      	lsls	r3, r3, #24
 80050c6:	431a      	orrs	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	071b      	lsls	r3, r3, #28
 80050cc:	4925      	ldr	r1, [pc, #148]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d011      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	019a      	lsls	r2, r3, #6
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	041b      	lsls	r3, r3, #16
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	061b      	lsls	r3, r3, #24
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	071b      	lsls	r3, r3, #28
 80050fc:	4919      	ldr	r1, [pc, #100]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005104:	4b17      	ldr	r3, [pc, #92]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a16      	ldr	r2, [pc, #88]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800510a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800510e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005110:	f7fd fa08 	bl	8002524 <HAL_GetTick>
 8005114:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005116:	e008      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005118:	f7fd fa04 	bl	8002524 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b64      	cmp	r3, #100	; 0x64
 8005124:	d901      	bls.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e0d7      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800512a:	4b0e      	ldr	r3, [pc, #56]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0f0      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	2b01      	cmp	r3, #1
 800513a:	f040 80cd 	bne.w	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800513e:	4b09      	ldr	r3, [pc, #36]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a08      	ldr	r2, [pc, #32]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514a:	f7fd f9eb 	bl	8002524 <HAL_GetTick>
 800514e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005150:	e00a      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005152:	f7fd f9e7 	bl	8002524 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b64      	cmp	r3, #100	; 0x64
 800515e:	d903      	bls.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e0ba      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005164:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005168:	4b5e      	ldr	r3, [pc, #376]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005174:	d0ed      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005186:	2b00      	cmp	r3, #0
 8005188:	d009      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005192:	2b00      	cmp	r3, #0
 8005194:	d02e      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d12a      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800519e:	4b51      	ldr	r3, [pc, #324]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80051a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a4:	0c1b      	lsrs	r3, r3, #16
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051ac:	4b4d      	ldr	r3, [pc, #308]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	0f1b      	lsrs	r3, r3, #28
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	019a      	lsls	r2, r3, #6
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	041b      	lsls	r3, r3, #16
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	061b      	lsls	r3, r3, #24
 80051cc:	431a      	orrs	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	071b      	lsls	r3, r3, #28
 80051d2:	4944      	ldr	r1, [pc, #272]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051da:	4b42      	ldr	r3, [pc, #264]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80051dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e8:	3b01      	subs	r3, #1
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	493d      	ldr	r1, [pc, #244]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d022      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005208:	d11d      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800520a:	4b36      	ldr	r3, [pc, #216]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005210:	0e1b      	lsrs	r3, r3, #24
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005218:	4b32      	ldr	r3, [pc, #200]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	0f1b      	lsrs	r3, r3, #28
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	019a      	lsls	r2, r3, #6
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	041b      	lsls	r3, r3, #16
 8005232:	431a      	orrs	r2, r3
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	061b      	lsls	r3, r3, #24
 8005238:	431a      	orrs	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	071b      	lsls	r3, r3, #28
 800523e:	4929      	ldr	r1, [pc, #164]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005240:	4313      	orrs	r3, r2
 8005242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d028      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005252:	4b24      	ldr	r3, [pc, #144]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005258:	0e1b      	lsrs	r3, r3, #24
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005260:	4b20      	ldr	r3, [pc, #128]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005266:	0c1b      	lsrs	r3, r3, #16
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	019a      	lsls	r2, r3, #6
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	041b      	lsls	r3, r3, #16
 8005278:	431a      	orrs	r2, r3
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	061b      	lsls	r3, r3, #24
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	071b      	lsls	r3, r3, #28
 8005286:	4917      	ldr	r1, [pc, #92]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800528e:	4b15      	ldr	r3, [pc, #84]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005294:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	4911      	ldr	r1, [pc, #68]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052a4:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a0e      	ldr	r2, [pc, #56]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b0:	f7fd f938 	bl	8002524 <HAL_GetTick>
 80052b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052b8:	f7fd f934 	bl	8002524 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b64      	cmp	r3, #100	; 0x64
 80052c4:	d901      	bls.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e007      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052ca:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052d6:	d1ef      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3720      	adds	r7, #32
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40023800 	.word	0x40023800

080052e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e084      	b.n	8005404 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d106      	bne.n	800531a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7fc fc79 	bl	8001c0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2202      	movs	r2, #2
 800531e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005330:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800533a:	d902      	bls.n	8005342 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	e002      	b.n	8005348 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005346:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005350:	d007      	beq.n	8005362 <HAL_SPI_Init+0x7a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800535a:	d002      	beq.n	8005362 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10b      	bne.n	8005382 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005372:	d903      	bls.n	800537c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	631a      	str	r2, [r3, #48]	; 0x30
 800537a:	e002      	b.n	8005382 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	ea42 0103 	orr.w	r1, r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	0c1b      	lsrs	r3, r3, #16
 80053c2:	f003 0204 	and.w	r2, r3, #4
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	ea42 0103 	orr.w	r1, r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69da      	ldr	r2, [r3, #28]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e01d      	b.n	800545a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fc fe74 	bl	8002120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3304      	adds	r3, #4
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f000 fc0e 	bl	8005c6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <HAL_TIM_Base_Start_IT+0x50>)
 8005484:	4013      	ands	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b06      	cmp	r3, #6
 800548c:	d00b      	beq.n	80054a6 <HAL_TIM_Base_Start_IT+0x42>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005494:	d007      	beq.n	80054a6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0201 	orr.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	00010007 	.word	0x00010007

080054b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e01d      	b.n	8005506 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f815 	bl	800550e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3304      	adds	r3, #4
 80054f4:	4619      	mov	r1, r3
 80054f6:	4610      	mov	r0, r2
 80054f8:	f000 fbb8 	bl	8005c6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2201      	movs	r2, #1
 8005534:	6839      	ldr	r1, [r7, #0]
 8005536:	4618      	mov	r0, r3
 8005538:	f000 ff30 	bl	800639c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a17      	ldr	r2, [pc, #92]	; (80055a0 <HAL_TIM_PWM_Start+0x7c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d004      	beq.n	8005550 <HAL_TIM_PWM_Start+0x2c>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a16      	ldr	r2, [pc, #88]	; (80055a4 <HAL_TIM_PWM_Start+0x80>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d101      	bne.n	8005554 <HAL_TIM_PWM_Start+0x30>
 8005550:	2301      	movs	r3, #1
 8005552:	e000      	b.n	8005556 <HAL_TIM_PWM_Start+0x32>
 8005554:	2300      	movs	r3, #0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d007      	beq.n	800556a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005568:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	4b0d      	ldr	r3, [pc, #52]	; (80055a8 <HAL_TIM_PWM_Start+0x84>)
 8005572:	4013      	ands	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b06      	cmp	r3, #6
 800557a:	d00b      	beq.n	8005594 <HAL_TIM_PWM_Start+0x70>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005582:	d007      	beq.n	8005594 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	40010000 	.word	0x40010000
 80055a4:	40010400 	.word	0x40010400
 80055a8:	00010007 	.word	0x00010007

080055ac <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e02d      	b.n	800561c <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d106      	bne.n	80055da <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f825 	bl	8005624 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3304      	adds	r3, #4
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f000 fb3d 	bl	8005c6c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0208 	bic.w	r2, r2, #8
 8005600:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6819      	ldr	r1, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b02      	cmp	r3, #2
 800564c:	d122      	bne.n	8005694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b02      	cmp	r3, #2
 800565a:	d11b      	bne.n	8005694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f06f 0202 	mvn.w	r2, #2
 8005664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fad8 	bl	8005c30 <HAL_TIM_IC_CaptureCallback>
 8005680:	e005      	b.n	800568e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 faca 	bl	8005c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fadb 	bl	8005c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d122      	bne.n	80056e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d11b      	bne.n	80056e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0204 	mvn.w	r2, #4
 80056b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2202      	movs	r2, #2
 80056be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 faae 	bl	8005c30 <HAL_TIM_IC_CaptureCallback>
 80056d4:	e005      	b.n	80056e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 faa0 	bl	8005c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fab1 	bl	8005c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d122      	bne.n	800573c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b08      	cmp	r3, #8
 8005702:	d11b      	bne.n	800573c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0208 	mvn.w	r2, #8
 800570c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2204      	movs	r2, #4
 8005712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fa84 	bl	8005c30 <HAL_TIM_IC_CaptureCallback>
 8005728:	e005      	b.n	8005736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fa76 	bl	8005c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fa87 	bl	8005c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0310 	and.w	r3, r3, #16
 8005746:	2b10      	cmp	r3, #16
 8005748:	d122      	bne.n	8005790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	2b10      	cmp	r3, #16
 8005756:	d11b      	bne.n	8005790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0210 	mvn.w	r2, #16
 8005760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2208      	movs	r2, #8
 8005766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fa5a 	bl	8005c30 <HAL_TIM_IC_CaptureCallback>
 800577c:	e005      	b.n	800578a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fa4c 	bl	8005c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fa5d 	bl	8005c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b01      	cmp	r3, #1
 800579c:	d10e      	bne.n	80057bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d107      	bne.n	80057bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f06f 0201 	mvn.w	r2, #1
 80057b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fc f870 	bl	800189c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c6:	2b80      	cmp	r3, #128	; 0x80
 80057c8:	d10e      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d4:	2b80      	cmp	r3, #128	; 0x80
 80057d6:	d107      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fe98 	bl	8006518 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f6:	d10e      	bne.n	8005816 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005802:	2b80      	cmp	r3, #128	; 0x80
 8005804:	d107      	bne.n	8005816 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800580e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fe8b 	bl	800652c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d10e      	bne.n	8005842 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582e:	2b40      	cmp	r3, #64	; 0x40
 8005830:	d107      	bne.n	8005842 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800583a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fa0b 	bl	8005c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f003 0320 	and.w	r3, r3, #32
 800584c:	2b20      	cmp	r3, #32
 800584e:	d10e      	bne.n	800586e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f003 0320 	and.w	r3, r3, #32
 800585a:	2b20      	cmp	r3, #32
 800585c:	d107      	bne.n	800586e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f06f 0220 	mvn.w	r2, #32
 8005866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fe4b 	bl	8006504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800586e:	bf00      	nop
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800588e:	2302      	movs	r3, #2
 8005890:	e105      	b.n	8005a9e <HAL_TIM_PWM_ConfigChannel+0x226>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2202      	movs	r2, #2
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b14      	cmp	r3, #20
 80058a6:	f200 80f0 	bhi.w	8005a8a <HAL_TIM_PWM_ConfigChannel+0x212>
 80058aa:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80058ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b0:	08005905 	.word	0x08005905
 80058b4:	08005a8b 	.word	0x08005a8b
 80058b8:	08005a8b 	.word	0x08005a8b
 80058bc:	08005a8b 	.word	0x08005a8b
 80058c0:	08005945 	.word	0x08005945
 80058c4:	08005a8b 	.word	0x08005a8b
 80058c8:	08005a8b 	.word	0x08005a8b
 80058cc:	08005a8b 	.word	0x08005a8b
 80058d0:	08005987 	.word	0x08005987
 80058d4:	08005a8b 	.word	0x08005a8b
 80058d8:	08005a8b 	.word	0x08005a8b
 80058dc:	08005a8b 	.word	0x08005a8b
 80058e0:	080059c7 	.word	0x080059c7
 80058e4:	08005a8b 	.word	0x08005a8b
 80058e8:	08005a8b 	.word	0x08005a8b
 80058ec:	08005a8b 	.word	0x08005a8b
 80058f0:	08005a09 	.word	0x08005a09
 80058f4:	08005a8b 	.word	0x08005a8b
 80058f8:	08005a8b 	.word	0x08005a8b
 80058fc:	08005a8b 	.word	0x08005a8b
 8005900:	08005a49 	.word	0x08005a49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fa4e 	bl	8005dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0208 	orr.w	r2, r2, #8
 800591e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0204 	bic.w	r2, r2, #4
 800592e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6999      	ldr	r1, [r3, #24]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	619a      	str	r2, [r3, #24]
      break;
 8005942:	e0a3      	b.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	4618      	mov	r0, r3
 800594c:	f000 faa0 	bl	8005e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800595e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800596e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6999      	ldr	r1, [r3, #24]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	021a      	lsls	r2, r3, #8
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	619a      	str	r2, [r3, #24]
      break;
 8005984:	e082      	b.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68b9      	ldr	r1, [r7, #8]
 800598c:	4618      	mov	r0, r3
 800598e:	f000 faf7 	bl	8005f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0208 	orr.w	r2, r2, #8
 80059a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0204 	bic.w	r2, r2, #4
 80059b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69d9      	ldr	r1, [r3, #28]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	61da      	str	r2, [r3, #28]
      break;
 80059c4:	e062      	b.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68b9      	ldr	r1, [r7, #8]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 fb4d 	bl	800606c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69da      	ldr	r2, [r3, #28]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69d9      	ldr	r1, [r3, #28]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	021a      	lsls	r2, r3, #8
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	61da      	str	r2, [r3, #28]
      break;
 8005a06:	e041      	b.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fb84 	bl	800611c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0208 	orr.w	r2, r2, #8
 8005a22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0204 	bic.w	r2, r2, #4
 8005a32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a46:	e021      	b.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fbb6 	bl	80061c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	021a      	lsls	r2, r3, #8
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a88:	e000      	b.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005a8a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop

08005aa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_TIM_ConfigClockSource+0x18>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e0a6      	b.n	8005c0e <HAL_TIM_ConfigClockSource+0x166>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4b4f      	ldr	r3, [pc, #316]	; (8005c18 <HAL_TIM_ConfigClockSource+0x170>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ae6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b40      	cmp	r3, #64	; 0x40
 8005af6:	d067      	beq.n	8005bc8 <HAL_TIM_ConfigClockSource+0x120>
 8005af8:	2b40      	cmp	r3, #64	; 0x40
 8005afa:	d80b      	bhi.n	8005b14 <HAL_TIM_ConfigClockSource+0x6c>
 8005afc:	2b10      	cmp	r3, #16
 8005afe:	d073      	beq.n	8005be8 <HAL_TIM_ConfigClockSource+0x140>
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d802      	bhi.n	8005b0a <HAL_TIM_ConfigClockSource+0x62>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d06f      	beq.n	8005be8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005b08:	e078      	b.n	8005bfc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	d06c      	beq.n	8005be8 <HAL_TIM_ConfigClockSource+0x140>
 8005b0e:	2b30      	cmp	r3, #48	; 0x30
 8005b10:	d06a      	beq.n	8005be8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005b12:	e073      	b.n	8005bfc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b14:	2b70      	cmp	r3, #112	; 0x70
 8005b16:	d00d      	beq.n	8005b34 <HAL_TIM_ConfigClockSource+0x8c>
 8005b18:	2b70      	cmp	r3, #112	; 0x70
 8005b1a:	d804      	bhi.n	8005b26 <HAL_TIM_ConfigClockSource+0x7e>
 8005b1c:	2b50      	cmp	r3, #80	; 0x50
 8005b1e:	d033      	beq.n	8005b88 <HAL_TIM_ConfigClockSource+0xe0>
 8005b20:	2b60      	cmp	r3, #96	; 0x60
 8005b22:	d041      	beq.n	8005ba8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005b24:	e06a      	b.n	8005bfc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2a:	d066      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x152>
 8005b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b30:	d017      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005b32:	e063      	b.n	8005bfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	6899      	ldr	r1, [r3, #8]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f000 fc0a 	bl	800635c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b56:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	609a      	str	r2, [r3, #8]
      break;
 8005b60:	e04c      	b.n	8005bfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6899      	ldr	r1, [r3, #8]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f000 fbf3 	bl	800635c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b84:	609a      	str	r2, [r3, #8]
      break;
 8005b86:	e039      	b.n	8005bfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6818      	ldr	r0, [r3, #0]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	6859      	ldr	r1, [r3, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	461a      	mov	r2, r3
 8005b96:	f000 fb67 	bl	8006268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2150      	movs	r1, #80	; 0x50
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 fbc0 	bl	8006326 <TIM_ITRx_SetConfig>
      break;
 8005ba6:	e029      	b.n	8005bfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6818      	ldr	r0, [r3, #0]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	6859      	ldr	r1, [r3, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	f000 fb86 	bl	80062c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2160      	movs	r1, #96	; 0x60
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fbb0 	bl	8006326 <TIM_ITRx_SetConfig>
      break;
 8005bc6:	e019      	b.n	8005bfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6818      	ldr	r0, [r3, #0]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	6859      	ldr	r1, [r3, #4]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	f000 fb47 	bl	8006268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2140      	movs	r1, #64	; 0x40
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fba0 	bl	8006326 <TIM_ITRx_SetConfig>
      break;
 8005be6:	e009      	b.n	8005bfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	f000 fb97 	bl	8006326 <TIM_ITRx_SetConfig>
      break;
 8005bf8:	e000      	b.n	8005bfc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005bfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	fffeff88 	.word	0xfffeff88

08005c1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a40      	ldr	r2, [pc, #256]	; (8005d80 <TIM_Base_SetConfig+0x114>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d013      	beq.n	8005cac <TIM_Base_SetConfig+0x40>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8a:	d00f      	beq.n	8005cac <TIM_Base_SetConfig+0x40>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a3d      	ldr	r2, [pc, #244]	; (8005d84 <TIM_Base_SetConfig+0x118>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00b      	beq.n	8005cac <TIM_Base_SetConfig+0x40>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a3c      	ldr	r2, [pc, #240]	; (8005d88 <TIM_Base_SetConfig+0x11c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d007      	beq.n	8005cac <TIM_Base_SetConfig+0x40>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a3b      	ldr	r2, [pc, #236]	; (8005d8c <TIM_Base_SetConfig+0x120>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d003      	beq.n	8005cac <TIM_Base_SetConfig+0x40>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a3a      	ldr	r2, [pc, #232]	; (8005d90 <TIM_Base_SetConfig+0x124>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d108      	bne.n	8005cbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a2f      	ldr	r2, [pc, #188]	; (8005d80 <TIM_Base_SetConfig+0x114>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d02b      	beq.n	8005d1e <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ccc:	d027      	beq.n	8005d1e <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a2c      	ldr	r2, [pc, #176]	; (8005d84 <TIM_Base_SetConfig+0x118>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d023      	beq.n	8005d1e <TIM_Base_SetConfig+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a2b      	ldr	r2, [pc, #172]	; (8005d88 <TIM_Base_SetConfig+0x11c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d01f      	beq.n	8005d1e <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a2a      	ldr	r2, [pc, #168]	; (8005d8c <TIM_Base_SetConfig+0x120>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d01b      	beq.n	8005d1e <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a29      	ldr	r2, [pc, #164]	; (8005d90 <TIM_Base_SetConfig+0x124>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d017      	beq.n	8005d1e <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a28      	ldr	r2, [pc, #160]	; (8005d94 <TIM_Base_SetConfig+0x128>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d013      	beq.n	8005d1e <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a27      	ldr	r2, [pc, #156]	; (8005d98 <TIM_Base_SetConfig+0x12c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00f      	beq.n	8005d1e <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a26      	ldr	r2, [pc, #152]	; (8005d9c <TIM_Base_SetConfig+0x130>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d00b      	beq.n	8005d1e <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a25      	ldr	r2, [pc, #148]	; (8005da0 <TIM_Base_SetConfig+0x134>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d007      	beq.n	8005d1e <TIM_Base_SetConfig+0xb2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a24      	ldr	r2, [pc, #144]	; (8005da4 <TIM_Base_SetConfig+0x138>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d003      	beq.n	8005d1e <TIM_Base_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a23      	ldr	r2, [pc, #140]	; (8005da8 <TIM_Base_SetConfig+0x13c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d108      	bne.n	8005d30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a0a      	ldr	r2, [pc, #40]	; (8005d80 <TIM_Base_SetConfig+0x114>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d003      	beq.n	8005d64 <TIM_Base_SetConfig+0xf8>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a0c      	ldr	r2, [pc, #48]	; (8005d90 <TIM_Base_SetConfig+0x124>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d103      	bne.n	8005d6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	691a      	ldr	r2, [r3, #16]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	615a      	str	r2, [r3, #20]
}
 8005d72:	bf00      	nop
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	40010000 	.word	0x40010000
 8005d84:	40000400 	.word	0x40000400
 8005d88:	40000800 	.word	0x40000800
 8005d8c:	40000c00 	.word	0x40000c00
 8005d90:	40010400 	.word	0x40010400
 8005d94:	40014000 	.word	0x40014000
 8005d98:	40014400 	.word	0x40014400
 8005d9c:	40014800 	.word	0x40014800
 8005da0:	40001800 	.word	0x40001800
 8005da4:	40001c00 	.word	0x40001c00
 8005da8:	40002000 	.word	0x40002000

08005dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	f023 0201 	bic.w	r2, r3, #1
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4b2b      	ldr	r3, [pc, #172]	; (8005e84 <TIM_OC1_SetConfig+0xd8>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0303 	bic.w	r3, r3, #3
 8005de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f023 0302 	bic.w	r3, r3, #2
 8005df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a21      	ldr	r2, [pc, #132]	; (8005e88 <TIM_OC1_SetConfig+0xdc>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d003      	beq.n	8005e10 <TIM_OC1_SetConfig+0x64>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a20      	ldr	r2, [pc, #128]	; (8005e8c <TIM_OC1_SetConfig+0xe0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d10c      	bne.n	8005e2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f023 0308 	bic.w	r3, r3, #8
 8005e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f023 0304 	bic.w	r3, r3, #4
 8005e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a16      	ldr	r2, [pc, #88]	; (8005e88 <TIM_OC1_SetConfig+0xdc>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d003      	beq.n	8005e3a <TIM_OC1_SetConfig+0x8e>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a15      	ldr	r2, [pc, #84]	; (8005e8c <TIM_OC1_SetConfig+0xe0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d111      	bne.n	8005e5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	621a      	str	r2, [r3, #32]
}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	fffeff8f 	.word	0xfffeff8f
 8005e88:	40010000 	.word	0x40010000
 8005e8c:	40010400 	.word	0x40010400

08005e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	f023 0210 	bic.w	r2, r3, #16
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4b2e      	ldr	r3, [pc, #184]	; (8005f74 <TIM_OC2_SetConfig+0xe4>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	021b      	lsls	r3, r3, #8
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0320 	bic.w	r3, r3, #32
 8005eda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a23      	ldr	r2, [pc, #140]	; (8005f78 <TIM_OC2_SetConfig+0xe8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d003      	beq.n	8005ef8 <TIM_OC2_SetConfig+0x68>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a22      	ldr	r2, [pc, #136]	; (8005f7c <TIM_OC2_SetConfig+0xec>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d10d      	bne.n	8005f14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a18      	ldr	r2, [pc, #96]	; (8005f78 <TIM_OC2_SetConfig+0xe8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d003      	beq.n	8005f24 <TIM_OC2_SetConfig+0x94>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a17      	ldr	r2, [pc, #92]	; (8005f7c <TIM_OC2_SetConfig+0xec>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d113      	bne.n	8005f4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	feff8fff 	.word	0xfeff8fff
 8005f78:	40010000 	.word	0x40010000
 8005f7c:	40010400 	.word	0x40010400

08005f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4b2d      	ldr	r3, [pc, #180]	; (8006060 <TIM_OC3_SetConfig+0xe0>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0303 	bic.w	r3, r3, #3
 8005fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a22      	ldr	r2, [pc, #136]	; (8006064 <TIM_OC3_SetConfig+0xe4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d003      	beq.n	8005fe6 <TIM_OC3_SetConfig+0x66>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a21      	ldr	r2, [pc, #132]	; (8006068 <TIM_OC3_SetConfig+0xe8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d10d      	bne.n	8006002 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a17      	ldr	r2, [pc, #92]	; (8006064 <TIM_OC3_SetConfig+0xe4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d003      	beq.n	8006012 <TIM_OC3_SetConfig+0x92>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a16      	ldr	r2, [pc, #88]	; (8006068 <TIM_OC3_SetConfig+0xe8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d113      	bne.n	800603a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	621a      	str	r2, [r3, #32]
}
 8006054:	bf00      	nop
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	fffeff8f 	.word	0xfffeff8f
 8006064:	40010000 	.word	0x40010000
 8006068:	40010400 	.word	0x40010400

0800606c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4b1e      	ldr	r3, [pc, #120]	; (8006110 <TIM_OC4_SetConfig+0xa4>)
 8006098:	4013      	ands	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	021b      	lsls	r3, r3, #8
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	031b      	lsls	r3, r3, #12
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a13      	ldr	r2, [pc, #76]	; (8006114 <TIM_OC4_SetConfig+0xa8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d003      	beq.n	80060d4 <TIM_OC4_SetConfig+0x68>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a12      	ldr	r2, [pc, #72]	; (8006118 <TIM_OC4_SetConfig+0xac>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d109      	bne.n	80060e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	019b      	lsls	r3, r3, #6
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	621a      	str	r2, [r3, #32]
}
 8006102:	bf00      	nop
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	feff8fff 	.word	0xfeff8fff
 8006114:	40010000 	.word	0x40010000
 8006118:	40010400 	.word	0x40010400

0800611c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <TIM_OC5_SetConfig+0x98>)
 8006148:	4013      	ands	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800615c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	041b      	lsls	r3, r3, #16
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a12      	ldr	r2, [pc, #72]	; (80061b8 <TIM_OC5_SetConfig+0x9c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d003      	beq.n	800617a <TIM_OC5_SetConfig+0x5e>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a11      	ldr	r2, [pc, #68]	; (80061bc <TIM_OC5_SetConfig+0xa0>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d109      	bne.n	800618e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006180:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	621a      	str	r2, [r3, #32]
}
 80061a8:	bf00      	nop
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	fffeff8f 	.word	0xfffeff8f
 80061b8:	40010000 	.word	0x40010000
 80061bc:	40010400 	.word	0x40010400

080061c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4b1c      	ldr	r3, [pc, #112]	; (800625c <TIM_OC6_SetConfig+0x9c>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	021b      	lsls	r3, r3, #8
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	051b      	lsls	r3, r3, #20
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	4313      	orrs	r3, r2
 800620e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a13      	ldr	r2, [pc, #76]	; (8006260 <TIM_OC6_SetConfig+0xa0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d003      	beq.n	8006220 <TIM_OC6_SetConfig+0x60>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a12      	ldr	r2, [pc, #72]	; (8006264 <TIM_OC6_SetConfig+0xa4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d109      	bne.n	8006234 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006226:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	029b      	lsls	r3, r3, #10
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	feff8fff 	.word	0xfeff8fff
 8006260:	40010000 	.word	0x40010000
 8006264:	40010400 	.word	0x40010400

08006268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f023 0201 	bic.w	r2, r3, #1
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4313      	orrs	r3, r2
 800629c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f023 030a 	bic.w	r3, r3, #10
 80062a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	621a      	str	r2, [r3, #32]
}
 80062ba:	bf00      	nop
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b087      	sub	sp, #28
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	f023 0210 	bic.w	r2, r3, #16
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	031b      	lsls	r3, r3, #12
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006302:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	621a      	str	r2, [r3, #32]
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006326:	b480      	push	{r7}
 8006328:	b085      	sub	sp, #20
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4313      	orrs	r3, r2
 8006344:	f043 0307 	orr.w	r3, r3, #7
 8006348:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	609a      	str	r2, [r3, #8]
}
 8006350:	bf00      	nop
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006376:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	021a      	lsls	r2, r3, #8
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	431a      	orrs	r2, r3
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4313      	orrs	r3, r2
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4313      	orrs	r3, r2
 8006388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	609a      	str	r2, [r3, #8]
}
 8006390:	bf00      	nop
 8006392:	371c      	adds	r7, #28
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f003 031f 	and.w	r3, r3, #31
 80063ae:	2201      	movs	r2, #1
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a1a      	ldr	r2, [r3, #32]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	43db      	mvns	r3, r3
 80063be:	401a      	ands	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a1a      	ldr	r2, [r3, #32]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f003 031f 	and.w	r3, r3, #31
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	fa01 f303 	lsl.w	r3, r1, r3
 80063d4:	431a      	orrs	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	621a      	str	r2, [r3, #32]
}
 80063da:	bf00      	nop
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
	...

080063e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d101      	bne.n	8006400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063fc:	2302      	movs	r3, #2
 80063fe:	e06d      	b.n	80064dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a30      	ldr	r2, [pc, #192]	; (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d004      	beq.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a2f      	ldr	r2, [pc, #188]	; (80064ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d108      	bne.n	8006446 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800643a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800644c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a20      	ldr	r2, [pc, #128]	; (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d022      	beq.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006472:	d01d      	beq.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a1d      	ldr	r2, [pc, #116]	; (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d018      	beq.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a1c      	ldr	r2, [pc, #112]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d013      	beq.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a1a      	ldr	r2, [pc, #104]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00e      	beq.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a15      	ldr	r2, [pc, #84]	; (80064ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d009      	beq.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a16      	ldr	r2, [pc, #88]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d004      	beq.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a15      	ldr	r2, [pc, #84]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d10c      	bne.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	40010000 	.word	0x40010000
 80064ec:	40010400 	.word	0x40010400
 80064f0:	40000400 	.word	0x40000400
 80064f4:	40000800 	.word	0x40000800
 80064f8:	40000c00 	.word	0x40000c00
 80064fc:	40014000 	.word	0x40014000
 8006500:	40001800 	.word	0x40001800

08006504 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e040      	b.n	80065d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fb ff18 	bl	8002398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2224      	movs	r2, #36	; 0x24
 800656c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0201 	bic.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fa14 	bl	80069ac <UART_SetConfig>
 8006584:	4603      	mov	r3, r0
 8006586:	2b01      	cmp	r3, #1
 8006588:	d101      	bne.n	800658e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e022      	b.n	80065d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fcb2 	bl	8006f00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fd39 	bl	8007044 <UART_CheckIdleState>
 80065d2:	4603      	mov	r3, r0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	4613      	mov	r3, r2
 80065e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	f040 808a 	bne.w	8006708 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <HAL_UART_Receive_IT+0x24>
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e082      	b.n	800670a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800660a:	2b01      	cmp	r3, #1
 800660c:	d101      	bne.n	8006612 <HAL_UART_Receive_IT+0x36>
 800660e:	2302      	movs	r3, #2
 8006610:	e07b      	b.n	800670a <HAL_UART_Receive_IT+0x12e>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	88fa      	ldrh	r2, [r7, #6]
 8006624:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	88fa      	ldrh	r2, [r7, #6]
 800662c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663e:	d10e      	bne.n	800665e <HAL_UART_Receive_IT+0x82>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d105      	bne.n	8006654 <HAL_UART_Receive_IT+0x78>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800664e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006652:	e02d      	b.n	80066b0 <HAL_UART_Receive_IT+0xd4>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	22ff      	movs	r2, #255	; 0xff
 8006658:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800665c:	e028      	b.n	80066b0 <HAL_UART_Receive_IT+0xd4>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10d      	bne.n	8006682 <HAL_UART_Receive_IT+0xa6>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d104      	bne.n	8006678 <HAL_UART_Receive_IT+0x9c>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	22ff      	movs	r2, #255	; 0xff
 8006672:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006676:	e01b      	b.n	80066b0 <HAL_UART_Receive_IT+0xd4>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	227f      	movs	r2, #127	; 0x7f
 800667c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006680:	e016      	b.n	80066b0 <HAL_UART_Receive_IT+0xd4>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800668a:	d10d      	bne.n	80066a8 <HAL_UART_Receive_IT+0xcc>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d104      	bne.n	800669e <HAL_UART_Receive_IT+0xc2>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	227f      	movs	r2, #127	; 0x7f
 8006698:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800669c:	e008      	b.n	80066b0 <HAL_UART_Receive_IT+0xd4>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	223f      	movs	r2, #63	; 0x3f
 80066a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066a6:	e003      	b.n	80066b0 <HAL_UART_Receive_IT+0xd4>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2222      	movs	r2, #34	; 0x22
 80066ba:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d4:	d107      	bne.n	80066e6 <HAL_UART_Receive_IT+0x10a>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d103      	bne.n	80066e6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	4a0d      	ldr	r2, [pc, #52]	; (8006718 <HAL_UART_Receive_IT+0x13c>)
 80066e2:	661a      	str	r2, [r3, #96]	; 0x60
 80066e4:	e002      	b.n	80066ec <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4a0c      	ldr	r2, [pc, #48]	; (800671c <HAL_UART_Receive_IT+0x140>)
 80066ea:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006702:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	e000      	b.n	800670a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8006708:	2302      	movs	r3, #2
  }
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	080072dd 	.word	0x080072dd
 800671c:	08007237 	.word	0x08007237

08006720 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	f640 030f 	movw	r3, #2063	; 0x80f
 8006746:	4013      	ands	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d113      	bne.n	8006778 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	f003 0320 	and.w	r3, r3, #32
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00e      	beq.n	8006778 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b00      	cmp	r3, #0
 8006762:	d009      	beq.n	8006778 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 8100 	beq.w	800696e <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	4798      	blx	r3
      }
      return;
 8006776:	e0fa      	b.n	800696e <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 80d5 	beq.w	800692a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d105      	bne.n	8006796 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 80ca 	beq.w	800692a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00e      	beq.n	80067be <HAL_UART_IRQHandler+0x9e>
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d009      	beq.n	80067be <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2201      	movs	r2, #1
 80067b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067b6:	f043 0201 	orr.w	r2, r3, #1
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00e      	beq.n	80067e6 <HAL_UART_IRQHandler+0xc6>
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d009      	beq.n	80067e6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2202      	movs	r2, #2
 80067d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067de:	f043 0204 	orr.w	r2, r3, #4
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00e      	beq.n	800680e <HAL_UART_IRQHandler+0xee>
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d009      	beq.n	800680e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2204      	movs	r2, #4
 8006800:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006806:	f043 0202 	orr.w	r2, r3, #2
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b00      	cmp	r3, #0
 8006816:	d013      	beq.n	8006840 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b00      	cmp	r3, #0
 8006820:	d104      	bne.n	800682c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006828:	2b00      	cmp	r3, #0
 800682a:	d009      	beq.n	8006840 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2208      	movs	r2, #8
 8006832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006838:	f043 0208 	orr.w	r2, r3, #8
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00f      	beq.n	800686a <HAL_UART_IRQHandler+0x14a>
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00a      	beq.n	800686a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800685c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006862:	f043 0220 	orr.w	r2, r3, #32
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800686e:	2b00      	cmp	r3, #0
 8006870:	d07f      	beq.n	8006972 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	f003 0320 	and.w	r3, r3, #32
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00c      	beq.n	8006896 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800689a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a6:	2b40      	cmp	r3, #64	; 0x40
 80068a8:	d004      	beq.n	80068b4 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d031      	beq.n	8006918 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fc6f 	bl	8007198 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c4:	2b40      	cmp	r3, #64	; 0x40
 80068c6:	d123      	bne.n	8006910 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068d6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d013      	beq.n	8006908 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068e4:	4a26      	ldr	r2, [pc, #152]	; (8006980 <HAL_UART_IRQHandler+0x260>)
 80068e6:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fc fadb 	bl	8002ea8 <HAL_DMA_Abort_IT>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d016      	beq.n	8006926 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006902:	4610      	mov	r0, r2
 8006904:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006906:	e00e      	b.n	8006926 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f845 	bl	8006998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800690e:	e00a      	b.n	8006926 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f841 	bl	8006998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006916:	e006      	b.n	8006926 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f83d 	bl	8006998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006924:	e025      	b.n	8006972 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006926:	bf00      	nop
    return;
 8006928:	e023      	b.n	8006972 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00d      	beq.n	8006950 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693a:	2b00      	cmp	r3, #0
 800693c:	d008      	beq.n	8006950 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006942:	2b00      	cmp	r3, #0
 8006944:	d017      	beq.n	8006976 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	4798      	blx	r3
    }
    return;
 800694e:	e012      	b.n	8006976 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00e      	beq.n	8006978 <HAL_UART_IRQHandler+0x258>
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006960:	2b00      	cmp	r3, #0
 8006962:	d009      	beq.n	8006978 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fc4d 	bl	8007204 <UART_EndTransmit_IT>
    return;
 800696a:	bf00      	nop
 800696c:	e004      	b.n	8006978 <HAL_UART_IRQHandler+0x258>
      return;
 800696e:	bf00      	nop
 8006970:	e002      	b.n	8006978 <HAL_UART_IRQHandler+0x258>
    return;
 8006972:	bf00      	nop
 8006974:	e000      	b.n	8006978 <HAL_UART_IRQHandler+0x258>
    return;
 8006976:	bf00      	nop
  }

}
 8006978:	3720      	adds	r7, #32
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	080071d9 	.word	0x080071d9

08006984 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b088      	sub	sp, #32
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80069b8:	2300      	movs	r3, #0
 80069ba:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	4bb1      	ldr	r3, [pc, #708]	; (8006ca0 <UART_SetConfig+0x2f4>)
 80069dc:	4013      	ands	r3, r2
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	6812      	ldr	r2, [r2, #0]
 80069e2:	6939      	ldr	r1, [r7, #16]
 80069e4:	430b      	orrs	r3, r1
 80069e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a9f      	ldr	r2, [pc, #636]	; (8006ca4 <UART_SetConfig+0x2f8>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d121      	bne.n	8006a70 <UART_SetConfig+0xc4>
 8006a2c:	4b9e      	ldr	r3, [pc, #632]	; (8006ca8 <UART_SetConfig+0x2fc>)
 8006a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d816      	bhi.n	8006a68 <UART_SetConfig+0xbc>
 8006a3a:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <UART_SetConfig+0x94>)
 8006a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a40:	08006a51 	.word	0x08006a51
 8006a44:	08006a5d 	.word	0x08006a5d
 8006a48:	08006a57 	.word	0x08006a57
 8006a4c:	08006a63 	.word	0x08006a63
 8006a50:	2301      	movs	r3, #1
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e151      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006a56:	2302      	movs	r3, #2
 8006a58:	77fb      	strb	r3, [r7, #31]
 8006a5a:	e14e      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006a5c:	2304      	movs	r3, #4
 8006a5e:	77fb      	strb	r3, [r7, #31]
 8006a60:	e14b      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006a62:	2308      	movs	r3, #8
 8006a64:	77fb      	strb	r3, [r7, #31]
 8006a66:	e148      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006a68:	2310      	movs	r3, #16
 8006a6a:	77fb      	strb	r3, [r7, #31]
 8006a6c:	bf00      	nop
 8006a6e:	e144      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a8d      	ldr	r2, [pc, #564]	; (8006cac <UART_SetConfig+0x300>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d134      	bne.n	8006ae4 <UART_SetConfig+0x138>
 8006a7a:	4b8b      	ldr	r3, [pc, #556]	; (8006ca8 <UART_SetConfig+0x2fc>)
 8006a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a80:	f003 030c 	and.w	r3, r3, #12
 8006a84:	2b0c      	cmp	r3, #12
 8006a86:	d829      	bhi.n	8006adc <UART_SetConfig+0x130>
 8006a88:	a201      	add	r2, pc, #4	; (adr r2, 8006a90 <UART_SetConfig+0xe4>)
 8006a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8e:	bf00      	nop
 8006a90:	08006ac5 	.word	0x08006ac5
 8006a94:	08006add 	.word	0x08006add
 8006a98:	08006add 	.word	0x08006add
 8006a9c:	08006add 	.word	0x08006add
 8006aa0:	08006ad1 	.word	0x08006ad1
 8006aa4:	08006add 	.word	0x08006add
 8006aa8:	08006add 	.word	0x08006add
 8006aac:	08006add 	.word	0x08006add
 8006ab0:	08006acb 	.word	0x08006acb
 8006ab4:	08006add 	.word	0x08006add
 8006ab8:	08006add 	.word	0x08006add
 8006abc:	08006add 	.word	0x08006add
 8006ac0:	08006ad7 	.word	0x08006ad7
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	77fb      	strb	r3, [r7, #31]
 8006ac8:	e117      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006aca:	2302      	movs	r3, #2
 8006acc:	77fb      	strb	r3, [r7, #31]
 8006ace:	e114      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	77fb      	strb	r3, [r7, #31]
 8006ad4:	e111      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006ad6:	2308      	movs	r3, #8
 8006ad8:	77fb      	strb	r3, [r7, #31]
 8006ada:	e10e      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006adc:	2310      	movs	r3, #16
 8006ade:	77fb      	strb	r3, [r7, #31]
 8006ae0:	bf00      	nop
 8006ae2:	e10a      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a71      	ldr	r2, [pc, #452]	; (8006cb0 <UART_SetConfig+0x304>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d120      	bne.n	8006b30 <UART_SetConfig+0x184>
 8006aee:	4b6e      	ldr	r3, [pc, #440]	; (8006ca8 <UART_SetConfig+0x2fc>)
 8006af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006af8:	2b10      	cmp	r3, #16
 8006afa:	d00f      	beq.n	8006b1c <UART_SetConfig+0x170>
 8006afc:	2b10      	cmp	r3, #16
 8006afe:	d802      	bhi.n	8006b06 <UART_SetConfig+0x15a>
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d005      	beq.n	8006b10 <UART_SetConfig+0x164>
 8006b04:	e010      	b.n	8006b28 <UART_SetConfig+0x17c>
 8006b06:	2b20      	cmp	r3, #32
 8006b08:	d005      	beq.n	8006b16 <UART_SetConfig+0x16a>
 8006b0a:	2b30      	cmp	r3, #48	; 0x30
 8006b0c:	d009      	beq.n	8006b22 <UART_SetConfig+0x176>
 8006b0e:	e00b      	b.n	8006b28 <UART_SetConfig+0x17c>
 8006b10:	2300      	movs	r3, #0
 8006b12:	77fb      	strb	r3, [r7, #31]
 8006b14:	e0f1      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006b16:	2302      	movs	r3, #2
 8006b18:	77fb      	strb	r3, [r7, #31]
 8006b1a:	e0ee      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006b1c:	2304      	movs	r3, #4
 8006b1e:	77fb      	strb	r3, [r7, #31]
 8006b20:	e0eb      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006b22:	2308      	movs	r3, #8
 8006b24:	77fb      	strb	r3, [r7, #31]
 8006b26:	e0e8      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006b28:	2310      	movs	r3, #16
 8006b2a:	77fb      	strb	r3, [r7, #31]
 8006b2c:	bf00      	nop
 8006b2e:	e0e4      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a5f      	ldr	r2, [pc, #380]	; (8006cb4 <UART_SetConfig+0x308>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d120      	bne.n	8006b7c <UART_SetConfig+0x1d0>
 8006b3a:	4b5b      	ldr	r3, [pc, #364]	; (8006ca8 <UART_SetConfig+0x2fc>)
 8006b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b44:	2b40      	cmp	r3, #64	; 0x40
 8006b46:	d00f      	beq.n	8006b68 <UART_SetConfig+0x1bc>
 8006b48:	2b40      	cmp	r3, #64	; 0x40
 8006b4a:	d802      	bhi.n	8006b52 <UART_SetConfig+0x1a6>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d005      	beq.n	8006b5c <UART_SetConfig+0x1b0>
 8006b50:	e010      	b.n	8006b74 <UART_SetConfig+0x1c8>
 8006b52:	2b80      	cmp	r3, #128	; 0x80
 8006b54:	d005      	beq.n	8006b62 <UART_SetConfig+0x1b6>
 8006b56:	2bc0      	cmp	r3, #192	; 0xc0
 8006b58:	d009      	beq.n	8006b6e <UART_SetConfig+0x1c2>
 8006b5a:	e00b      	b.n	8006b74 <UART_SetConfig+0x1c8>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	77fb      	strb	r3, [r7, #31]
 8006b60:	e0cb      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006b62:	2302      	movs	r3, #2
 8006b64:	77fb      	strb	r3, [r7, #31]
 8006b66:	e0c8      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006b68:	2304      	movs	r3, #4
 8006b6a:	77fb      	strb	r3, [r7, #31]
 8006b6c:	e0c5      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006b6e:	2308      	movs	r3, #8
 8006b70:	77fb      	strb	r3, [r7, #31]
 8006b72:	e0c2      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006b74:	2310      	movs	r3, #16
 8006b76:	77fb      	strb	r3, [r7, #31]
 8006b78:	bf00      	nop
 8006b7a:	e0be      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a4d      	ldr	r2, [pc, #308]	; (8006cb8 <UART_SetConfig+0x30c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d124      	bne.n	8006bd0 <UART_SetConfig+0x224>
 8006b86:	4b48      	ldr	r3, [pc, #288]	; (8006ca8 <UART_SetConfig+0x2fc>)
 8006b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b94:	d012      	beq.n	8006bbc <UART_SetConfig+0x210>
 8006b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b9a:	d802      	bhi.n	8006ba2 <UART_SetConfig+0x1f6>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d007      	beq.n	8006bb0 <UART_SetConfig+0x204>
 8006ba0:	e012      	b.n	8006bc8 <UART_SetConfig+0x21c>
 8006ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ba6:	d006      	beq.n	8006bb6 <UART_SetConfig+0x20a>
 8006ba8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bac:	d009      	beq.n	8006bc2 <UART_SetConfig+0x216>
 8006bae:	e00b      	b.n	8006bc8 <UART_SetConfig+0x21c>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	77fb      	strb	r3, [r7, #31]
 8006bb4:	e0a1      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	77fb      	strb	r3, [r7, #31]
 8006bba:	e09e      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	77fb      	strb	r3, [r7, #31]
 8006bc0:	e09b      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006bc2:	2308      	movs	r3, #8
 8006bc4:	77fb      	strb	r3, [r7, #31]
 8006bc6:	e098      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006bc8:	2310      	movs	r3, #16
 8006bca:	77fb      	strb	r3, [r7, #31]
 8006bcc:	bf00      	nop
 8006bce:	e094      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a39      	ldr	r2, [pc, #228]	; (8006cbc <UART_SetConfig+0x310>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d124      	bne.n	8006c24 <UART_SetConfig+0x278>
 8006bda:	4b33      	ldr	r3, [pc, #204]	; (8006ca8 <UART_SetConfig+0x2fc>)
 8006bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be8:	d012      	beq.n	8006c10 <UART_SetConfig+0x264>
 8006bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bee:	d802      	bhi.n	8006bf6 <UART_SetConfig+0x24a>
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d007      	beq.n	8006c04 <UART_SetConfig+0x258>
 8006bf4:	e012      	b.n	8006c1c <UART_SetConfig+0x270>
 8006bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bfa:	d006      	beq.n	8006c0a <UART_SetConfig+0x25e>
 8006bfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c00:	d009      	beq.n	8006c16 <UART_SetConfig+0x26a>
 8006c02:	e00b      	b.n	8006c1c <UART_SetConfig+0x270>
 8006c04:	2301      	movs	r3, #1
 8006c06:	77fb      	strb	r3, [r7, #31]
 8006c08:	e077      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	77fb      	strb	r3, [r7, #31]
 8006c0e:	e074      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006c10:	2304      	movs	r3, #4
 8006c12:	77fb      	strb	r3, [r7, #31]
 8006c14:	e071      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006c16:	2308      	movs	r3, #8
 8006c18:	77fb      	strb	r3, [r7, #31]
 8006c1a:	e06e      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006c1c:	2310      	movs	r3, #16
 8006c1e:	77fb      	strb	r3, [r7, #31]
 8006c20:	bf00      	nop
 8006c22:	e06a      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a25      	ldr	r2, [pc, #148]	; (8006cc0 <UART_SetConfig+0x314>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d124      	bne.n	8006c78 <UART_SetConfig+0x2cc>
 8006c2e:	4b1e      	ldr	r3, [pc, #120]	; (8006ca8 <UART_SetConfig+0x2fc>)
 8006c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c34:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c3c:	d012      	beq.n	8006c64 <UART_SetConfig+0x2b8>
 8006c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c42:	d802      	bhi.n	8006c4a <UART_SetConfig+0x29e>
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d007      	beq.n	8006c58 <UART_SetConfig+0x2ac>
 8006c48:	e012      	b.n	8006c70 <UART_SetConfig+0x2c4>
 8006c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c4e:	d006      	beq.n	8006c5e <UART_SetConfig+0x2b2>
 8006c50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c54:	d009      	beq.n	8006c6a <UART_SetConfig+0x2be>
 8006c56:	e00b      	b.n	8006c70 <UART_SetConfig+0x2c4>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	77fb      	strb	r3, [r7, #31]
 8006c5c:	e04d      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	77fb      	strb	r3, [r7, #31]
 8006c62:	e04a      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006c64:	2304      	movs	r3, #4
 8006c66:	77fb      	strb	r3, [r7, #31]
 8006c68:	e047      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	77fb      	strb	r3, [r7, #31]
 8006c6e:	e044      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006c70:	2310      	movs	r3, #16
 8006c72:	77fb      	strb	r3, [r7, #31]
 8006c74:	bf00      	nop
 8006c76:	e040      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a11      	ldr	r2, [pc, #68]	; (8006cc4 <UART_SetConfig+0x318>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d139      	bne.n	8006cf6 <UART_SetConfig+0x34a>
 8006c82:	4b09      	ldr	r3, [pc, #36]	; (8006ca8 <UART_SetConfig+0x2fc>)
 8006c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c90:	d027      	beq.n	8006ce2 <UART_SetConfig+0x336>
 8006c92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c96:	d817      	bhi.n	8006cc8 <UART_SetConfig+0x31c>
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d01c      	beq.n	8006cd6 <UART_SetConfig+0x32a>
 8006c9c:	e027      	b.n	8006cee <UART_SetConfig+0x342>
 8006c9e:	bf00      	nop
 8006ca0:	efff69f3 	.word	0xefff69f3
 8006ca4:	40011000 	.word	0x40011000
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	40004400 	.word	0x40004400
 8006cb0:	40004800 	.word	0x40004800
 8006cb4:	40004c00 	.word	0x40004c00
 8006cb8:	40005000 	.word	0x40005000
 8006cbc:	40011400 	.word	0x40011400
 8006cc0:	40007800 	.word	0x40007800
 8006cc4:	40007c00 	.word	0x40007c00
 8006cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ccc:	d006      	beq.n	8006cdc <UART_SetConfig+0x330>
 8006cce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006cd2:	d009      	beq.n	8006ce8 <UART_SetConfig+0x33c>
 8006cd4:	e00b      	b.n	8006cee <UART_SetConfig+0x342>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	77fb      	strb	r3, [r7, #31]
 8006cda:	e00e      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	77fb      	strb	r3, [r7, #31]
 8006ce0:	e00b      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006ce2:	2304      	movs	r3, #4
 8006ce4:	77fb      	strb	r3, [r7, #31]
 8006ce6:	e008      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006ce8:	2308      	movs	r3, #8
 8006cea:	77fb      	strb	r3, [r7, #31]
 8006cec:	e005      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006cee:	2310      	movs	r3, #16
 8006cf0:	77fb      	strb	r3, [r7, #31]
 8006cf2:	bf00      	nop
 8006cf4:	e001      	b.n	8006cfa <UART_SetConfig+0x34e>
 8006cf6:	2310      	movs	r3, #16
 8006cf8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d02:	d17f      	bne.n	8006e04 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006d04:	7ffb      	ldrb	r3, [r7, #31]
 8006d06:	2b08      	cmp	r3, #8
 8006d08:	d85c      	bhi.n	8006dc4 <UART_SetConfig+0x418>
 8006d0a:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <UART_SetConfig+0x364>)
 8006d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d10:	08006d35 	.word	0x08006d35
 8006d14:	08006d55 	.word	0x08006d55
 8006d18:	08006d75 	.word	0x08006d75
 8006d1c:	08006dc5 	.word	0x08006dc5
 8006d20:	08006d8d 	.word	0x08006d8d
 8006d24:	08006dc5 	.word	0x08006dc5
 8006d28:	08006dc5 	.word	0x08006dc5
 8006d2c:	08006dc5 	.word	0x08006dc5
 8006d30:	08006dad 	.word	0x08006dad
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d34:	f7fd fec2 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8006d38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	005a      	lsls	r2, r3, #1
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	085b      	lsrs	r3, r3, #1
 8006d44:	441a      	add	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	61bb      	str	r3, [r7, #24]
        break;
 8006d52:	e03a      	b.n	8006dca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d54:	f7fd fec6 	bl	8004ae4 <HAL_RCC_GetPCLK2Freq>
 8006d58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	005a      	lsls	r2, r3, #1
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	085b      	lsrs	r3, r3, #1
 8006d64:	441a      	add	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	61bb      	str	r3, [r7, #24]
        break;
 8006d72:	e02a      	b.n	8006dca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	085a      	lsrs	r2, r3, #1
 8006d7a:	4b5f      	ldr	r3, [pc, #380]	; (8006ef8 <UART_SetConfig+0x54c>)
 8006d7c:	4413      	add	r3, r2
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	6852      	ldr	r2, [r2, #4]
 8006d82:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	61bb      	str	r3, [r7, #24]
        break;
 8006d8a:	e01e      	b.n	8006dca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d8c:	f7fd fdb2 	bl	80048f4 <HAL_RCC_GetSysClockFreq>
 8006d90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	005a      	lsls	r2, r3, #1
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	085b      	lsrs	r3, r3, #1
 8006d9c:	441a      	add	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	61bb      	str	r3, [r7, #24]
        break;
 8006daa:	e00e      	b.n	8006dca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	085b      	lsrs	r3, r3, #1
 8006db2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	61bb      	str	r3, [r7, #24]
        break;
 8006dc2:	e002      	b.n	8006dca <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	75fb      	strb	r3, [r7, #23]
        break;
 8006dc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	2b0f      	cmp	r3, #15
 8006dce:	d916      	bls.n	8006dfe <UART_SetConfig+0x452>
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd6:	d212      	bcs.n	8006dfe <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f023 030f 	bic.w	r3, r3, #15
 8006de0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	085b      	lsrs	r3, r3, #1
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	897b      	ldrh	r3, [r7, #10]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	897a      	ldrh	r2, [r7, #10]
 8006dfa:	60da      	str	r2, [r3, #12]
 8006dfc:	e070      	b.n	8006ee0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	75fb      	strb	r3, [r7, #23]
 8006e02:	e06d      	b.n	8006ee0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006e04:	7ffb      	ldrb	r3, [r7, #31]
 8006e06:	2b08      	cmp	r3, #8
 8006e08:	d859      	bhi.n	8006ebe <UART_SetConfig+0x512>
 8006e0a:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <UART_SetConfig+0x464>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e35 	.word	0x08006e35
 8006e14:	08006e53 	.word	0x08006e53
 8006e18:	08006e71 	.word	0x08006e71
 8006e1c:	08006ebf 	.word	0x08006ebf
 8006e20:	08006e89 	.word	0x08006e89
 8006e24:	08006ebf 	.word	0x08006ebf
 8006e28:	08006ebf 	.word	0x08006ebf
 8006e2c:	08006ebf 	.word	0x08006ebf
 8006e30:	08006ea7 	.word	0x08006ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e34:	f7fd fe42 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8006e38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	085a      	lsrs	r2, r3, #1
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	441a      	add	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	61bb      	str	r3, [r7, #24]
        break;
 8006e50:	e038      	b.n	8006ec4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e52:	f7fd fe47 	bl	8004ae4 <HAL_RCC_GetPCLK2Freq>
 8006e56:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	085a      	lsrs	r2, r3, #1
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	441a      	add	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	61bb      	str	r3, [r7, #24]
        break;
 8006e6e:	e029      	b.n	8006ec4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	085a      	lsrs	r2, r3, #1
 8006e76:	4b21      	ldr	r3, [pc, #132]	; (8006efc <UART_SetConfig+0x550>)
 8006e78:	4413      	add	r3, r2
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6852      	ldr	r2, [r2, #4]
 8006e7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	61bb      	str	r3, [r7, #24]
        break;
 8006e86:	e01d      	b.n	8006ec4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e88:	f7fd fd34 	bl	80048f4 <HAL_RCC_GetSysClockFreq>
 8006e8c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	085a      	lsrs	r2, r3, #1
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	441a      	add	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	61bb      	str	r3, [r7, #24]
        break;
 8006ea4:	e00e      	b.n	8006ec4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	085b      	lsrs	r3, r3, #1
 8006eac:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	61bb      	str	r3, [r7, #24]
        break;
 8006ebc:	e002      	b.n	8006ec4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	75fb      	strb	r3, [r7, #23]
        break;
 8006ec2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	2b0f      	cmp	r3, #15
 8006ec8:	d908      	bls.n	8006edc <UART_SetConfig+0x530>
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ed0:	d204      	bcs.n	8006edc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	60da      	str	r2, [r3, #12]
 8006eda:	e001      	b.n	8006ee0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3720      	adds	r7, #32
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	01e84800 	.word	0x01e84800
 8006efc:	00f42400 	.word	0x00f42400

08006f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00a      	beq.n	8006f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00a      	beq.n	8006f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	f003 0310 	and.w	r3, r3, #16
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00a      	beq.n	8006fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01a      	beq.n	8007016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ffe:	d10a      	bne.n	8007016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	605a      	str	r2, [r3, #4]
  }
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af02      	add	r7, sp, #8
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007052:	f7fb fa67 	bl	8002524 <HAL_GetTick>
 8007056:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0308 	and.w	r3, r3, #8
 8007062:	2b08      	cmp	r3, #8
 8007064:	d10e      	bne.n	8007084 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007066:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f814 	bl	80070a2 <UART_WaitOnFlagUntilTimeout>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e00a      	b.n	800709a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2220      	movs	r2, #32
 800708e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	603b      	str	r3, [r7, #0]
 80070ae:	4613      	mov	r3, r2
 80070b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070b2:	e05d      	b.n	8007170 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ba:	d059      	beq.n	8007170 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070bc:	f7fb fa32 	bl	8002524 <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d302      	bcc.n	80070d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d11b      	bne.n	800710a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f022 0201 	bic.w	r2, r2, #1
 80070f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2220      	movs	r2, #32
 80070f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2220      	movs	r2, #32
 80070fc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e042      	b.n	8007190 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d02b      	beq.n	8007170 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007126:	d123      	bne.n	8007170 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007130:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007140:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0201 	bic.w	r2, r2, #1
 8007150:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2220      	movs	r2, #32
 8007156:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2220      	movs	r2, #32
 800715c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2220      	movs	r2, #32
 8007162:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e00f      	b.n	8007190 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	69da      	ldr	r2, [r3, #28]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	4013      	ands	r3, r2
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	429a      	cmp	r2, r3
 800717e:	bf0c      	ite	eq
 8007180:	2301      	moveq	r3, #1
 8007182:	2300      	movne	r3, #0
 8007184:	b2db      	uxtb	r3, r3
 8007186:	461a      	mov	r2, r3
 8007188:	79fb      	ldrb	r3, [r7, #7]
 800718a:	429a      	cmp	r2, r3
 800718c:	d092      	beq.n	80070b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80071ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 0201 	bic.w	r2, r2, #1
 80071be:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2220      	movs	r2, #32
 80071c4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	661a      	str	r2, [r3, #96]	; 0x60
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f7ff fbce 	bl	8006998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071fc:	bf00      	nop
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800721a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2220      	movs	r2, #32
 8007220:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7ff fbab 	bl	8006984 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800722e:	bf00      	nop
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007244:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800724a:	2b22      	cmp	r3, #34	; 0x22
 800724c:	d13a      	bne.n	80072c4 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007254:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007256:	89bb      	ldrh	r3, [r7, #12]
 8007258:	b2d9      	uxtb	r1, r3
 800725a:	89fb      	ldrh	r3, [r7, #14]
 800725c:	b2da      	uxtb	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007262:	400a      	ands	r2, r1
 8007264:	b2d2      	uxtb	r2, r2
 8007266:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007278:	b29b      	uxth	r3, r3
 800727a:	3b01      	subs	r3, #1
 800727c:	b29a      	uxth	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800728a:	b29b      	uxth	r3, r3
 800728c:	2b00      	cmp	r3, #0
 800728e:	d121      	bne.n	80072d4 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800729e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689a      	ldr	r2, [r3, #8]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0201 	bic.w	r2, r2, #1
 80072ae:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7f9 fe99 	bl	8000ff4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072c2:	e007      	b.n	80072d4 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699a      	ldr	r2, [r3, #24]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0208 	orr.w	r2, r2, #8
 80072d2:	619a      	str	r2, [r3, #24]
}
 80072d4:	bf00      	nop
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072ea:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072f0:	2b22      	cmp	r3, #34	; 0x22
 80072f2:	d13a      	bne.n	800736a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007300:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007302:	89ba      	ldrh	r2, [r7, #12]
 8007304:	89fb      	ldrh	r3, [r7, #14]
 8007306:	4013      	ands	r3, r2
 8007308:	b29a      	uxth	r2, r3
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007312:	1c9a      	adds	r2, r3, #2
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800731e:	b29b      	uxth	r3, r3
 8007320:	3b01      	subs	r3, #1
 8007322:	b29a      	uxth	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007330:	b29b      	uxth	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d121      	bne.n	800737a <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007344:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 0201 	bic.w	r2, r2, #1
 8007354:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2220      	movs	r2, #32
 800735a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7f9 fe46 	bl	8000ff4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007368:	e007      	b.n	800737a <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	699a      	ldr	r2, [r3, #24]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0208 	orr.w	r2, r2, #8
 8007378:	619a      	str	r2, [r3, #24]
}
 800737a:	bf00      	nop
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
	...

08007384 <__errno>:
 8007384:	4b01      	ldr	r3, [pc, #4]	; (800738c <__errno+0x8>)
 8007386:	6818      	ldr	r0, [r3, #0]
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	2000000c 	.word	0x2000000c

08007390 <__libc_init_array>:
 8007390:	b570      	push	{r4, r5, r6, lr}
 8007392:	4e0d      	ldr	r6, [pc, #52]	; (80073c8 <__libc_init_array+0x38>)
 8007394:	4c0d      	ldr	r4, [pc, #52]	; (80073cc <__libc_init_array+0x3c>)
 8007396:	1ba4      	subs	r4, r4, r6
 8007398:	10a4      	asrs	r4, r4, #2
 800739a:	2500      	movs	r5, #0
 800739c:	42a5      	cmp	r5, r4
 800739e:	d109      	bne.n	80073b4 <__libc_init_array+0x24>
 80073a0:	4e0b      	ldr	r6, [pc, #44]	; (80073d0 <__libc_init_array+0x40>)
 80073a2:	4c0c      	ldr	r4, [pc, #48]	; (80073d4 <__libc_init_array+0x44>)
 80073a4:	f000 fdfa 	bl	8007f9c <_init>
 80073a8:	1ba4      	subs	r4, r4, r6
 80073aa:	10a4      	asrs	r4, r4, #2
 80073ac:	2500      	movs	r5, #0
 80073ae:	42a5      	cmp	r5, r4
 80073b0:	d105      	bne.n	80073be <__libc_init_array+0x2e>
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
 80073b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073b8:	4798      	blx	r3
 80073ba:	3501      	adds	r5, #1
 80073bc:	e7ee      	b.n	800739c <__libc_init_array+0xc>
 80073be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073c2:	4798      	blx	r3
 80073c4:	3501      	adds	r5, #1
 80073c6:	e7f2      	b.n	80073ae <__libc_init_array+0x1e>
 80073c8:	08008178 	.word	0x08008178
 80073cc:	08008178 	.word	0x08008178
 80073d0:	08008178 	.word	0x08008178
 80073d4:	0800817c 	.word	0x0800817c

080073d8 <memset>:
 80073d8:	4402      	add	r2, r0
 80073da:	4603      	mov	r3, r0
 80073dc:	4293      	cmp	r3, r2
 80073de:	d100      	bne.n	80073e2 <memset+0xa>
 80073e0:	4770      	bx	lr
 80073e2:	f803 1b01 	strb.w	r1, [r3], #1
 80073e6:	e7f9      	b.n	80073dc <memset+0x4>

080073e8 <siscanf>:
 80073e8:	b40e      	push	{r1, r2, r3}
 80073ea:	b530      	push	{r4, r5, lr}
 80073ec:	b09c      	sub	sp, #112	; 0x70
 80073ee:	ac1f      	add	r4, sp, #124	; 0x7c
 80073f0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80073f4:	f854 5b04 	ldr.w	r5, [r4], #4
 80073f8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80073fc:	9002      	str	r0, [sp, #8]
 80073fe:	9006      	str	r0, [sp, #24]
 8007400:	f7f8 ff06 	bl	8000210 <strlen>
 8007404:	4b0b      	ldr	r3, [pc, #44]	; (8007434 <siscanf+0x4c>)
 8007406:	9003      	str	r0, [sp, #12]
 8007408:	9007      	str	r0, [sp, #28]
 800740a:	930b      	str	r3, [sp, #44]	; 0x2c
 800740c:	480a      	ldr	r0, [pc, #40]	; (8007438 <siscanf+0x50>)
 800740e:	9401      	str	r4, [sp, #4]
 8007410:	2300      	movs	r3, #0
 8007412:	930f      	str	r3, [sp, #60]	; 0x3c
 8007414:	9314      	str	r3, [sp, #80]	; 0x50
 8007416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800741a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800741e:	462a      	mov	r2, r5
 8007420:	4623      	mov	r3, r4
 8007422:	a902      	add	r1, sp, #8
 8007424:	6800      	ldr	r0, [r0, #0]
 8007426:	f000 f865 	bl	80074f4 <__ssvfiscanf_r>
 800742a:	b01c      	add	sp, #112	; 0x70
 800742c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007430:	b003      	add	sp, #12
 8007432:	4770      	bx	lr
 8007434:	0800743d 	.word	0x0800743d
 8007438:	2000000c 	.word	0x2000000c

0800743c <__seofread>:
 800743c:	2000      	movs	r0, #0
 800743e:	4770      	bx	lr

08007440 <_sungetc_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	1c4b      	adds	r3, r1, #1
 8007444:	4614      	mov	r4, r2
 8007446:	d103      	bne.n	8007450 <_sungetc_r+0x10>
 8007448:	f04f 35ff 	mov.w	r5, #4294967295
 800744c:	4628      	mov	r0, r5
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	8993      	ldrh	r3, [r2, #12]
 8007452:	f023 0320 	bic.w	r3, r3, #32
 8007456:	8193      	strh	r3, [r2, #12]
 8007458:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800745a:	6852      	ldr	r2, [r2, #4]
 800745c:	b2cd      	uxtb	r5, r1
 800745e:	b18b      	cbz	r3, 8007484 <_sungetc_r+0x44>
 8007460:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007462:	4293      	cmp	r3, r2
 8007464:	dd08      	ble.n	8007478 <_sungetc_r+0x38>
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	1e5a      	subs	r2, r3, #1
 800746a:	6022      	str	r2, [r4, #0]
 800746c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007470:	6863      	ldr	r3, [r4, #4]
 8007472:	3301      	adds	r3, #1
 8007474:	6063      	str	r3, [r4, #4]
 8007476:	e7e9      	b.n	800744c <_sungetc_r+0xc>
 8007478:	4621      	mov	r1, r4
 800747a:	f000 fc2f 	bl	8007cdc <__submore>
 800747e:	2800      	cmp	r0, #0
 8007480:	d0f1      	beq.n	8007466 <_sungetc_r+0x26>
 8007482:	e7e1      	b.n	8007448 <_sungetc_r+0x8>
 8007484:	6921      	ldr	r1, [r4, #16]
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	b151      	cbz	r1, 80074a0 <_sungetc_r+0x60>
 800748a:	4299      	cmp	r1, r3
 800748c:	d208      	bcs.n	80074a0 <_sungetc_r+0x60>
 800748e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007492:	42a9      	cmp	r1, r5
 8007494:	d104      	bne.n	80074a0 <_sungetc_r+0x60>
 8007496:	3b01      	subs	r3, #1
 8007498:	3201      	adds	r2, #1
 800749a:	6023      	str	r3, [r4, #0]
 800749c:	6062      	str	r2, [r4, #4]
 800749e:	e7d5      	b.n	800744c <_sungetc_r+0xc>
 80074a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80074a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074a8:	6363      	str	r3, [r4, #52]	; 0x34
 80074aa:	2303      	movs	r3, #3
 80074ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80074ae:	4623      	mov	r3, r4
 80074b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	2301      	movs	r3, #1
 80074b8:	e7dc      	b.n	8007474 <_sungetc_r+0x34>

080074ba <__ssrefill_r>:
 80074ba:	b510      	push	{r4, lr}
 80074bc:	460c      	mov	r4, r1
 80074be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80074c0:	b169      	cbz	r1, 80074de <__ssrefill_r+0x24>
 80074c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074c6:	4299      	cmp	r1, r3
 80074c8:	d001      	beq.n	80074ce <__ssrefill_r+0x14>
 80074ca:	f000 fc71 	bl	8007db0 <_free_r>
 80074ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074d0:	6063      	str	r3, [r4, #4]
 80074d2:	2000      	movs	r0, #0
 80074d4:	6360      	str	r0, [r4, #52]	; 0x34
 80074d6:	b113      	cbz	r3, 80074de <__ssrefill_r+0x24>
 80074d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80074da:	6023      	str	r3, [r4, #0]
 80074dc:	bd10      	pop	{r4, pc}
 80074de:	6923      	ldr	r3, [r4, #16]
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	2300      	movs	r3, #0
 80074e4:	6063      	str	r3, [r4, #4]
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	f043 0320 	orr.w	r3, r3, #32
 80074ec:	81a3      	strh	r3, [r4, #12]
 80074ee:	f04f 30ff 	mov.w	r0, #4294967295
 80074f2:	e7f3      	b.n	80074dc <__ssrefill_r+0x22>

080074f4 <__ssvfiscanf_r>:
 80074f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80074fc:	460c      	mov	r4, r1
 80074fe:	2100      	movs	r1, #0
 8007500:	9144      	str	r1, [sp, #272]	; 0x110
 8007502:	9145      	str	r1, [sp, #276]	; 0x114
 8007504:	499f      	ldr	r1, [pc, #636]	; (8007784 <__ssvfiscanf_r+0x290>)
 8007506:	91a0      	str	r1, [sp, #640]	; 0x280
 8007508:	f10d 0804 	add.w	r8, sp, #4
 800750c:	499e      	ldr	r1, [pc, #632]	; (8007788 <__ssvfiscanf_r+0x294>)
 800750e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800778c <__ssvfiscanf_r+0x298>
 8007512:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007516:	4606      	mov	r6, r0
 8007518:	4692      	mov	sl, r2
 800751a:	91a1      	str	r1, [sp, #644]	; 0x284
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	270a      	movs	r7, #10
 8007520:	f89a 3000 	ldrb.w	r3, [sl]
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 812a 	beq.w	800777e <__ssvfiscanf_r+0x28a>
 800752a:	4655      	mov	r5, sl
 800752c:	f000 fc14 	bl	8007d58 <__locale_ctype_ptr>
 8007530:	f815 bb01 	ldrb.w	fp, [r5], #1
 8007534:	4458      	add	r0, fp
 8007536:	7843      	ldrb	r3, [r0, #1]
 8007538:	f013 0308 	ands.w	r3, r3, #8
 800753c:	d01c      	beq.n	8007578 <__ssvfiscanf_r+0x84>
 800753e:	6863      	ldr	r3, [r4, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	dd12      	ble.n	800756a <__ssvfiscanf_r+0x76>
 8007544:	f000 fc08 	bl	8007d58 <__locale_ctype_ptr>
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	781a      	ldrb	r2, [r3, #0]
 800754c:	4410      	add	r0, r2
 800754e:	7842      	ldrb	r2, [r0, #1]
 8007550:	0712      	lsls	r2, r2, #28
 8007552:	d401      	bmi.n	8007558 <__ssvfiscanf_r+0x64>
 8007554:	46aa      	mov	sl, r5
 8007556:	e7e3      	b.n	8007520 <__ssvfiscanf_r+0x2c>
 8007558:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800755a:	3201      	adds	r2, #1
 800755c:	9245      	str	r2, [sp, #276]	; 0x114
 800755e:	6862      	ldr	r2, [r4, #4]
 8007560:	3301      	adds	r3, #1
 8007562:	3a01      	subs	r2, #1
 8007564:	6062      	str	r2, [r4, #4]
 8007566:	6023      	str	r3, [r4, #0]
 8007568:	e7e9      	b.n	800753e <__ssvfiscanf_r+0x4a>
 800756a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800756c:	4621      	mov	r1, r4
 800756e:	4630      	mov	r0, r6
 8007570:	4798      	blx	r3
 8007572:	2800      	cmp	r0, #0
 8007574:	d0e6      	beq.n	8007544 <__ssvfiscanf_r+0x50>
 8007576:	e7ed      	b.n	8007554 <__ssvfiscanf_r+0x60>
 8007578:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800757c:	f040 8082 	bne.w	8007684 <__ssvfiscanf_r+0x190>
 8007580:	9343      	str	r3, [sp, #268]	; 0x10c
 8007582:	9341      	str	r3, [sp, #260]	; 0x104
 8007584:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8007588:	2b2a      	cmp	r3, #42	; 0x2a
 800758a:	d103      	bne.n	8007594 <__ssvfiscanf_r+0xa0>
 800758c:	2310      	movs	r3, #16
 800758e:	9341      	str	r3, [sp, #260]	; 0x104
 8007590:	f10a 0502 	add.w	r5, sl, #2
 8007594:	46aa      	mov	sl, r5
 8007596:	f815 1b01 	ldrb.w	r1, [r5], #1
 800759a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800759e:	2a09      	cmp	r2, #9
 80075a0:	d922      	bls.n	80075e8 <__ssvfiscanf_r+0xf4>
 80075a2:	2203      	movs	r2, #3
 80075a4:	4879      	ldr	r0, [pc, #484]	; (800778c <__ssvfiscanf_r+0x298>)
 80075a6:	f7f8 fe3b 	bl	8000220 <memchr>
 80075aa:	b138      	cbz	r0, 80075bc <__ssvfiscanf_r+0xc8>
 80075ac:	eba0 0309 	sub.w	r3, r0, r9
 80075b0:	2001      	movs	r0, #1
 80075b2:	4098      	lsls	r0, r3
 80075b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80075b6:	4318      	orrs	r0, r3
 80075b8:	9041      	str	r0, [sp, #260]	; 0x104
 80075ba:	46aa      	mov	sl, r5
 80075bc:	f89a 3000 	ldrb.w	r3, [sl]
 80075c0:	2b67      	cmp	r3, #103	; 0x67
 80075c2:	f10a 0501 	add.w	r5, sl, #1
 80075c6:	d82b      	bhi.n	8007620 <__ssvfiscanf_r+0x12c>
 80075c8:	2b65      	cmp	r3, #101	; 0x65
 80075ca:	f080 809f 	bcs.w	800770c <__ssvfiscanf_r+0x218>
 80075ce:	2b47      	cmp	r3, #71	; 0x47
 80075d0:	d810      	bhi.n	80075f4 <__ssvfiscanf_r+0x100>
 80075d2:	2b45      	cmp	r3, #69	; 0x45
 80075d4:	f080 809a 	bcs.w	800770c <__ssvfiscanf_r+0x218>
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d06c      	beq.n	80076b6 <__ssvfiscanf_r+0x1c2>
 80075dc:	2b25      	cmp	r3, #37	; 0x25
 80075de:	d051      	beq.n	8007684 <__ssvfiscanf_r+0x190>
 80075e0:	2303      	movs	r3, #3
 80075e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80075e4:	9742      	str	r7, [sp, #264]	; 0x108
 80075e6:	e027      	b.n	8007638 <__ssvfiscanf_r+0x144>
 80075e8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80075ea:	fb07 1303 	mla	r3, r7, r3, r1
 80075ee:	3b30      	subs	r3, #48	; 0x30
 80075f0:	9343      	str	r3, [sp, #268]	; 0x10c
 80075f2:	e7cf      	b.n	8007594 <__ssvfiscanf_r+0xa0>
 80075f4:	2b5b      	cmp	r3, #91	; 0x5b
 80075f6:	d06a      	beq.n	80076ce <__ssvfiscanf_r+0x1da>
 80075f8:	d80c      	bhi.n	8007614 <__ssvfiscanf_r+0x120>
 80075fa:	2b58      	cmp	r3, #88	; 0x58
 80075fc:	d1f0      	bne.n	80075e0 <__ssvfiscanf_r+0xec>
 80075fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007604:	9241      	str	r2, [sp, #260]	; 0x104
 8007606:	2210      	movs	r2, #16
 8007608:	9242      	str	r2, [sp, #264]	; 0x108
 800760a:	2b6e      	cmp	r3, #110	; 0x6e
 800760c:	bf8c      	ite	hi
 800760e:	2304      	movhi	r3, #4
 8007610:	2303      	movls	r3, #3
 8007612:	e010      	b.n	8007636 <__ssvfiscanf_r+0x142>
 8007614:	2b63      	cmp	r3, #99	; 0x63
 8007616:	d065      	beq.n	80076e4 <__ssvfiscanf_r+0x1f0>
 8007618:	2b64      	cmp	r3, #100	; 0x64
 800761a:	d1e1      	bne.n	80075e0 <__ssvfiscanf_r+0xec>
 800761c:	9742      	str	r7, [sp, #264]	; 0x108
 800761e:	e7f4      	b.n	800760a <__ssvfiscanf_r+0x116>
 8007620:	2b70      	cmp	r3, #112	; 0x70
 8007622:	d04b      	beq.n	80076bc <__ssvfiscanf_r+0x1c8>
 8007624:	d826      	bhi.n	8007674 <__ssvfiscanf_r+0x180>
 8007626:	2b6e      	cmp	r3, #110	; 0x6e
 8007628:	d062      	beq.n	80076f0 <__ssvfiscanf_r+0x1fc>
 800762a:	d84c      	bhi.n	80076c6 <__ssvfiscanf_r+0x1d2>
 800762c:	2b69      	cmp	r3, #105	; 0x69
 800762e:	d1d7      	bne.n	80075e0 <__ssvfiscanf_r+0xec>
 8007630:	2300      	movs	r3, #0
 8007632:	9342      	str	r3, [sp, #264]	; 0x108
 8007634:	2303      	movs	r3, #3
 8007636:	9347      	str	r3, [sp, #284]	; 0x11c
 8007638:	6863      	ldr	r3, [r4, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	dd68      	ble.n	8007710 <__ssvfiscanf_r+0x21c>
 800763e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007640:	0659      	lsls	r1, r3, #25
 8007642:	d407      	bmi.n	8007654 <__ssvfiscanf_r+0x160>
 8007644:	f000 fb88 	bl	8007d58 <__locale_ctype_ptr>
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	781a      	ldrb	r2, [r3, #0]
 800764c:	4410      	add	r0, r2
 800764e:	7842      	ldrb	r2, [r0, #1]
 8007650:	0712      	lsls	r2, r2, #28
 8007652:	d464      	bmi.n	800771e <__ssvfiscanf_r+0x22a>
 8007654:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007656:	2b02      	cmp	r3, #2
 8007658:	dc73      	bgt.n	8007742 <__ssvfiscanf_r+0x24e>
 800765a:	466b      	mov	r3, sp
 800765c:	4622      	mov	r2, r4
 800765e:	a941      	add	r1, sp, #260	; 0x104
 8007660:	4630      	mov	r0, r6
 8007662:	f000 f897 	bl	8007794 <_scanf_chars>
 8007666:	2801      	cmp	r0, #1
 8007668:	f000 8089 	beq.w	800777e <__ssvfiscanf_r+0x28a>
 800766c:	2802      	cmp	r0, #2
 800766e:	f47f af71 	bne.w	8007554 <__ssvfiscanf_r+0x60>
 8007672:	e01d      	b.n	80076b0 <__ssvfiscanf_r+0x1bc>
 8007674:	2b75      	cmp	r3, #117	; 0x75
 8007676:	d0d1      	beq.n	800761c <__ssvfiscanf_r+0x128>
 8007678:	2b78      	cmp	r3, #120	; 0x78
 800767a:	d0c0      	beq.n	80075fe <__ssvfiscanf_r+0x10a>
 800767c:	2b73      	cmp	r3, #115	; 0x73
 800767e:	d1af      	bne.n	80075e0 <__ssvfiscanf_r+0xec>
 8007680:	2302      	movs	r3, #2
 8007682:	e7d8      	b.n	8007636 <__ssvfiscanf_r+0x142>
 8007684:	6863      	ldr	r3, [r4, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	dd0c      	ble.n	80076a4 <__ssvfiscanf_r+0x1b0>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	781a      	ldrb	r2, [r3, #0]
 800768e:	455a      	cmp	r2, fp
 8007690:	d175      	bne.n	800777e <__ssvfiscanf_r+0x28a>
 8007692:	3301      	adds	r3, #1
 8007694:	6862      	ldr	r2, [r4, #4]
 8007696:	6023      	str	r3, [r4, #0]
 8007698:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800769a:	3a01      	subs	r2, #1
 800769c:	3301      	adds	r3, #1
 800769e:	6062      	str	r2, [r4, #4]
 80076a0:	9345      	str	r3, [sp, #276]	; 0x114
 80076a2:	e757      	b.n	8007554 <__ssvfiscanf_r+0x60>
 80076a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80076a6:	4621      	mov	r1, r4
 80076a8:	4630      	mov	r0, r6
 80076aa:	4798      	blx	r3
 80076ac:	2800      	cmp	r0, #0
 80076ae:	d0ec      	beq.n	800768a <__ssvfiscanf_r+0x196>
 80076b0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80076b2:	2800      	cmp	r0, #0
 80076b4:	d159      	bne.n	800776a <__ssvfiscanf_r+0x276>
 80076b6:	f04f 30ff 	mov.w	r0, #4294967295
 80076ba:	e05c      	b.n	8007776 <__ssvfiscanf_r+0x282>
 80076bc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80076be:	f042 0220 	orr.w	r2, r2, #32
 80076c2:	9241      	str	r2, [sp, #260]	; 0x104
 80076c4:	e79b      	b.n	80075fe <__ssvfiscanf_r+0x10a>
 80076c6:	2308      	movs	r3, #8
 80076c8:	9342      	str	r3, [sp, #264]	; 0x108
 80076ca:	2304      	movs	r3, #4
 80076cc:	e7b3      	b.n	8007636 <__ssvfiscanf_r+0x142>
 80076ce:	4629      	mov	r1, r5
 80076d0:	4640      	mov	r0, r8
 80076d2:	f000 f9b7 	bl	8007a44 <__sccl>
 80076d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80076d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076dc:	9341      	str	r3, [sp, #260]	; 0x104
 80076de:	4605      	mov	r5, r0
 80076e0:	2301      	movs	r3, #1
 80076e2:	e7a8      	b.n	8007636 <__ssvfiscanf_r+0x142>
 80076e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80076e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ea:	9341      	str	r3, [sp, #260]	; 0x104
 80076ec:	2300      	movs	r3, #0
 80076ee:	e7a2      	b.n	8007636 <__ssvfiscanf_r+0x142>
 80076f0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80076f2:	06c3      	lsls	r3, r0, #27
 80076f4:	f53f af2e 	bmi.w	8007554 <__ssvfiscanf_r+0x60>
 80076f8:	9b00      	ldr	r3, [sp, #0]
 80076fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80076fc:	1d19      	adds	r1, r3, #4
 80076fe:	9100      	str	r1, [sp, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	07c0      	lsls	r0, r0, #31
 8007704:	bf4c      	ite	mi
 8007706:	801a      	strhmi	r2, [r3, #0]
 8007708:	601a      	strpl	r2, [r3, #0]
 800770a:	e723      	b.n	8007554 <__ssvfiscanf_r+0x60>
 800770c:	2305      	movs	r3, #5
 800770e:	e792      	b.n	8007636 <__ssvfiscanf_r+0x142>
 8007710:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007712:	4621      	mov	r1, r4
 8007714:	4630      	mov	r0, r6
 8007716:	4798      	blx	r3
 8007718:	2800      	cmp	r0, #0
 800771a:	d090      	beq.n	800763e <__ssvfiscanf_r+0x14a>
 800771c:	e7c8      	b.n	80076b0 <__ssvfiscanf_r+0x1bc>
 800771e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007720:	3201      	adds	r2, #1
 8007722:	9245      	str	r2, [sp, #276]	; 0x114
 8007724:	6862      	ldr	r2, [r4, #4]
 8007726:	3a01      	subs	r2, #1
 8007728:	2a00      	cmp	r2, #0
 800772a:	6062      	str	r2, [r4, #4]
 800772c:	dd02      	ble.n	8007734 <__ssvfiscanf_r+0x240>
 800772e:	3301      	adds	r3, #1
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	e787      	b.n	8007644 <__ssvfiscanf_r+0x150>
 8007734:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007736:	4621      	mov	r1, r4
 8007738:	4630      	mov	r0, r6
 800773a:	4798      	blx	r3
 800773c:	2800      	cmp	r0, #0
 800773e:	d081      	beq.n	8007644 <__ssvfiscanf_r+0x150>
 8007740:	e7b6      	b.n	80076b0 <__ssvfiscanf_r+0x1bc>
 8007742:	2b04      	cmp	r3, #4
 8007744:	dc06      	bgt.n	8007754 <__ssvfiscanf_r+0x260>
 8007746:	466b      	mov	r3, sp
 8007748:	4622      	mov	r2, r4
 800774a:	a941      	add	r1, sp, #260	; 0x104
 800774c:	4630      	mov	r0, r6
 800774e:	f000 f885 	bl	800785c <_scanf_i>
 8007752:	e788      	b.n	8007666 <__ssvfiscanf_r+0x172>
 8007754:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <__ssvfiscanf_r+0x29c>)
 8007756:	2b00      	cmp	r3, #0
 8007758:	f43f aefc 	beq.w	8007554 <__ssvfiscanf_r+0x60>
 800775c:	466b      	mov	r3, sp
 800775e:	4622      	mov	r2, r4
 8007760:	a941      	add	r1, sp, #260	; 0x104
 8007762:	4630      	mov	r0, r6
 8007764:	f3af 8000 	nop.w
 8007768:	e77d      	b.n	8007666 <__ssvfiscanf_r+0x172>
 800776a:	89a3      	ldrh	r3, [r4, #12]
 800776c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007770:	bf18      	it	ne
 8007772:	f04f 30ff 	movne.w	r0, #4294967295
 8007776:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800777a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007780:	e7f9      	b.n	8007776 <__ssvfiscanf_r+0x282>
 8007782:	bf00      	nop
 8007784:	08007441 	.word	0x08007441
 8007788:	080074bb 	.word	0x080074bb
 800778c:	08007fe4 	.word	0x08007fe4
 8007790:	00000000 	.word	0x00000000

08007794 <_scanf_chars>:
 8007794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007798:	4615      	mov	r5, r2
 800779a:	688a      	ldr	r2, [r1, #8]
 800779c:	4680      	mov	r8, r0
 800779e:	460c      	mov	r4, r1
 80077a0:	b932      	cbnz	r2, 80077b0 <_scanf_chars+0x1c>
 80077a2:	698a      	ldr	r2, [r1, #24]
 80077a4:	2a00      	cmp	r2, #0
 80077a6:	bf14      	ite	ne
 80077a8:	f04f 32ff 	movne.w	r2, #4294967295
 80077ac:	2201      	moveq	r2, #1
 80077ae:	608a      	str	r2, [r1, #8]
 80077b0:	6822      	ldr	r2, [r4, #0]
 80077b2:	06d1      	lsls	r1, r2, #27
 80077b4:	bf5f      	itttt	pl
 80077b6:	681a      	ldrpl	r2, [r3, #0]
 80077b8:	1d11      	addpl	r1, r2, #4
 80077ba:	6019      	strpl	r1, [r3, #0]
 80077bc:	6817      	ldrpl	r7, [r2, #0]
 80077be:	2600      	movs	r6, #0
 80077c0:	69a3      	ldr	r3, [r4, #24]
 80077c2:	b1db      	cbz	r3, 80077fc <_scanf_chars+0x68>
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d107      	bne.n	80077d8 <_scanf_chars+0x44>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	6962      	ldr	r2, [r4, #20]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	5cd3      	ldrb	r3, [r2, r3]
 80077d0:	b9a3      	cbnz	r3, 80077fc <_scanf_chars+0x68>
 80077d2:	2e00      	cmp	r6, #0
 80077d4:	d132      	bne.n	800783c <_scanf_chars+0xa8>
 80077d6:	e006      	b.n	80077e6 <_scanf_chars+0x52>
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d007      	beq.n	80077ec <_scanf_chars+0x58>
 80077dc:	2e00      	cmp	r6, #0
 80077de:	d12d      	bne.n	800783c <_scanf_chars+0xa8>
 80077e0:	69a3      	ldr	r3, [r4, #24]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d12a      	bne.n	800783c <_scanf_chars+0xa8>
 80077e6:	2001      	movs	r0, #1
 80077e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077ec:	f000 fab4 	bl	8007d58 <__locale_ctype_ptr>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	4418      	add	r0, r3
 80077f6:	7843      	ldrb	r3, [r0, #1]
 80077f8:	071b      	lsls	r3, r3, #28
 80077fa:	d4ef      	bmi.n	80077dc <_scanf_chars+0x48>
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	06da      	lsls	r2, r3, #27
 8007800:	bf5e      	ittt	pl
 8007802:	682b      	ldrpl	r3, [r5, #0]
 8007804:	781b      	ldrbpl	r3, [r3, #0]
 8007806:	703b      	strbpl	r3, [r7, #0]
 8007808:	682a      	ldr	r2, [r5, #0]
 800780a:	686b      	ldr	r3, [r5, #4]
 800780c:	f102 0201 	add.w	r2, r2, #1
 8007810:	602a      	str	r2, [r5, #0]
 8007812:	68a2      	ldr	r2, [r4, #8]
 8007814:	f103 33ff 	add.w	r3, r3, #4294967295
 8007818:	f102 32ff 	add.w	r2, r2, #4294967295
 800781c:	606b      	str	r3, [r5, #4]
 800781e:	f106 0601 	add.w	r6, r6, #1
 8007822:	bf58      	it	pl
 8007824:	3701      	addpl	r7, #1
 8007826:	60a2      	str	r2, [r4, #8]
 8007828:	b142      	cbz	r2, 800783c <_scanf_chars+0xa8>
 800782a:	2b00      	cmp	r3, #0
 800782c:	dcc8      	bgt.n	80077c0 <_scanf_chars+0x2c>
 800782e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007832:	4629      	mov	r1, r5
 8007834:	4640      	mov	r0, r8
 8007836:	4798      	blx	r3
 8007838:	2800      	cmp	r0, #0
 800783a:	d0c1      	beq.n	80077c0 <_scanf_chars+0x2c>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	f013 0310 	ands.w	r3, r3, #16
 8007842:	d105      	bne.n	8007850 <_scanf_chars+0xbc>
 8007844:	68e2      	ldr	r2, [r4, #12]
 8007846:	3201      	adds	r2, #1
 8007848:	60e2      	str	r2, [r4, #12]
 800784a:	69a2      	ldr	r2, [r4, #24]
 800784c:	b102      	cbz	r2, 8007850 <_scanf_chars+0xbc>
 800784e:	703b      	strb	r3, [r7, #0]
 8007850:	6923      	ldr	r3, [r4, #16]
 8007852:	441e      	add	r6, r3
 8007854:	6126      	str	r6, [r4, #16]
 8007856:	2000      	movs	r0, #0
 8007858:	e7c6      	b.n	80077e8 <_scanf_chars+0x54>
	...

0800785c <_scanf_i>:
 800785c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007860:	469a      	mov	sl, r3
 8007862:	4b74      	ldr	r3, [pc, #464]	; (8007a34 <_scanf_i+0x1d8>)
 8007864:	460c      	mov	r4, r1
 8007866:	4683      	mov	fp, r0
 8007868:	4616      	mov	r6, r2
 800786a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800786e:	b087      	sub	sp, #28
 8007870:	ab03      	add	r3, sp, #12
 8007872:	68a7      	ldr	r7, [r4, #8]
 8007874:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007878:	4b6f      	ldr	r3, [pc, #444]	; (8007a38 <_scanf_i+0x1dc>)
 800787a:	69a1      	ldr	r1, [r4, #24]
 800787c:	4a6f      	ldr	r2, [pc, #444]	; (8007a3c <_scanf_i+0x1e0>)
 800787e:	2903      	cmp	r1, #3
 8007880:	bf08      	it	eq
 8007882:	461a      	moveq	r2, r3
 8007884:	1e7b      	subs	r3, r7, #1
 8007886:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800788a:	bf84      	itt	hi
 800788c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007890:	60a3      	strhi	r3, [r4, #8]
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	9200      	str	r2, [sp, #0]
 8007896:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800789a:	bf88      	it	hi
 800789c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80078a0:	f104 091c 	add.w	r9, r4, #28
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	bf8c      	ite	hi
 80078a8:	197f      	addhi	r7, r7, r5
 80078aa:	2700      	movls	r7, #0
 80078ac:	464b      	mov	r3, r9
 80078ae:	f04f 0800 	mov.w	r8, #0
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	6831      	ldr	r1, [r6, #0]
 80078b6:	ab03      	add	r3, sp, #12
 80078b8:	2202      	movs	r2, #2
 80078ba:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80078be:	7809      	ldrb	r1, [r1, #0]
 80078c0:	f7f8 fcae 	bl	8000220 <memchr>
 80078c4:	9b01      	ldr	r3, [sp, #4]
 80078c6:	b330      	cbz	r0, 8007916 <_scanf_i+0xba>
 80078c8:	f1b8 0f01 	cmp.w	r8, #1
 80078cc:	d15a      	bne.n	8007984 <_scanf_i+0x128>
 80078ce:	6862      	ldr	r2, [r4, #4]
 80078d0:	b92a      	cbnz	r2, 80078de <_scanf_i+0x82>
 80078d2:	6822      	ldr	r2, [r4, #0]
 80078d4:	2108      	movs	r1, #8
 80078d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078da:	6061      	str	r1, [r4, #4]
 80078dc:	6022      	str	r2, [r4, #0]
 80078de:	6822      	ldr	r2, [r4, #0]
 80078e0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80078e4:	6022      	str	r2, [r4, #0]
 80078e6:	68a2      	ldr	r2, [r4, #8]
 80078e8:	1e51      	subs	r1, r2, #1
 80078ea:	60a1      	str	r1, [r4, #8]
 80078ec:	b19a      	cbz	r2, 8007916 <_scanf_i+0xba>
 80078ee:	6832      	ldr	r2, [r6, #0]
 80078f0:	1c51      	adds	r1, r2, #1
 80078f2:	6031      	str	r1, [r6, #0]
 80078f4:	7812      	ldrb	r2, [r2, #0]
 80078f6:	701a      	strb	r2, [r3, #0]
 80078f8:	1c5d      	adds	r5, r3, #1
 80078fa:	6873      	ldr	r3, [r6, #4]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	6073      	str	r3, [r6, #4]
 8007902:	dc07      	bgt.n	8007914 <_scanf_i+0xb8>
 8007904:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007908:	4631      	mov	r1, r6
 800790a:	4658      	mov	r0, fp
 800790c:	4798      	blx	r3
 800790e:	2800      	cmp	r0, #0
 8007910:	f040 8086 	bne.w	8007a20 <_scanf_i+0x1c4>
 8007914:	462b      	mov	r3, r5
 8007916:	f108 0801 	add.w	r8, r8, #1
 800791a:	f1b8 0f03 	cmp.w	r8, #3
 800791e:	d1c8      	bne.n	80078b2 <_scanf_i+0x56>
 8007920:	6862      	ldr	r2, [r4, #4]
 8007922:	b90a      	cbnz	r2, 8007928 <_scanf_i+0xcc>
 8007924:	220a      	movs	r2, #10
 8007926:	6062      	str	r2, [r4, #4]
 8007928:	6862      	ldr	r2, [r4, #4]
 800792a:	4945      	ldr	r1, [pc, #276]	; (8007a40 <_scanf_i+0x1e4>)
 800792c:	6960      	ldr	r0, [r4, #20]
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	1a89      	subs	r1, r1, r2
 8007932:	f000 f887 	bl	8007a44 <__sccl>
 8007936:	9b01      	ldr	r3, [sp, #4]
 8007938:	f04f 0800 	mov.w	r8, #0
 800793c:	461d      	mov	r5, r3
 800793e:	68a3      	ldr	r3, [r4, #8]
 8007940:	6822      	ldr	r2, [r4, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d03a      	beq.n	80079bc <_scanf_i+0x160>
 8007946:	6831      	ldr	r1, [r6, #0]
 8007948:	6960      	ldr	r0, [r4, #20]
 800794a:	f891 c000 	ldrb.w	ip, [r1]
 800794e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007952:	2800      	cmp	r0, #0
 8007954:	d032      	beq.n	80079bc <_scanf_i+0x160>
 8007956:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800795a:	d121      	bne.n	80079a0 <_scanf_i+0x144>
 800795c:	0510      	lsls	r0, r2, #20
 800795e:	d51f      	bpl.n	80079a0 <_scanf_i+0x144>
 8007960:	f108 0801 	add.w	r8, r8, #1
 8007964:	b117      	cbz	r7, 800796c <_scanf_i+0x110>
 8007966:	3301      	adds	r3, #1
 8007968:	3f01      	subs	r7, #1
 800796a:	60a3      	str	r3, [r4, #8]
 800796c:	6873      	ldr	r3, [r6, #4]
 800796e:	3b01      	subs	r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	6073      	str	r3, [r6, #4]
 8007974:	dd1b      	ble.n	80079ae <_scanf_i+0x152>
 8007976:	6833      	ldr	r3, [r6, #0]
 8007978:	3301      	adds	r3, #1
 800797a:	6033      	str	r3, [r6, #0]
 800797c:	68a3      	ldr	r3, [r4, #8]
 800797e:	3b01      	subs	r3, #1
 8007980:	60a3      	str	r3, [r4, #8]
 8007982:	e7dc      	b.n	800793e <_scanf_i+0xe2>
 8007984:	f1b8 0f02 	cmp.w	r8, #2
 8007988:	d1ad      	bne.n	80078e6 <_scanf_i+0x8a>
 800798a:	6822      	ldr	r2, [r4, #0]
 800798c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007990:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007994:	d1bf      	bne.n	8007916 <_scanf_i+0xba>
 8007996:	2110      	movs	r1, #16
 8007998:	6061      	str	r1, [r4, #4]
 800799a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800799e:	e7a1      	b.n	80078e4 <_scanf_i+0x88>
 80079a0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80079a4:	6022      	str	r2, [r4, #0]
 80079a6:	780b      	ldrb	r3, [r1, #0]
 80079a8:	702b      	strb	r3, [r5, #0]
 80079aa:	3501      	adds	r5, #1
 80079ac:	e7de      	b.n	800796c <_scanf_i+0x110>
 80079ae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80079b2:	4631      	mov	r1, r6
 80079b4:	4658      	mov	r0, fp
 80079b6:	4798      	blx	r3
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d0df      	beq.n	800797c <_scanf_i+0x120>
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	05d9      	lsls	r1, r3, #23
 80079c0:	d50c      	bpl.n	80079dc <_scanf_i+0x180>
 80079c2:	454d      	cmp	r5, r9
 80079c4:	d908      	bls.n	80079d8 <_scanf_i+0x17c>
 80079c6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80079ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079ce:	4632      	mov	r2, r6
 80079d0:	4658      	mov	r0, fp
 80079d2:	4798      	blx	r3
 80079d4:	1e6f      	subs	r7, r5, #1
 80079d6:	463d      	mov	r5, r7
 80079d8:	454d      	cmp	r5, r9
 80079da:	d029      	beq.n	8007a30 <_scanf_i+0x1d4>
 80079dc:	6822      	ldr	r2, [r4, #0]
 80079de:	f012 0210 	ands.w	r2, r2, #16
 80079e2:	d113      	bne.n	8007a0c <_scanf_i+0x1b0>
 80079e4:	702a      	strb	r2, [r5, #0]
 80079e6:	6863      	ldr	r3, [r4, #4]
 80079e8:	9e00      	ldr	r6, [sp, #0]
 80079ea:	4649      	mov	r1, r9
 80079ec:	4658      	mov	r0, fp
 80079ee:	47b0      	blx	r6
 80079f0:	f8da 3000 	ldr.w	r3, [sl]
 80079f4:	6821      	ldr	r1, [r4, #0]
 80079f6:	1d1a      	adds	r2, r3, #4
 80079f8:	f8ca 2000 	str.w	r2, [sl]
 80079fc:	f011 0f20 	tst.w	r1, #32
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	d010      	beq.n	8007a26 <_scanf_i+0x1ca>
 8007a04:	6018      	str	r0, [r3, #0]
 8007a06:	68e3      	ldr	r3, [r4, #12]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	60e3      	str	r3, [r4, #12]
 8007a0c:	eba5 0509 	sub.w	r5, r5, r9
 8007a10:	44a8      	add	r8, r5
 8007a12:	6925      	ldr	r5, [r4, #16]
 8007a14:	4445      	add	r5, r8
 8007a16:	6125      	str	r5, [r4, #16]
 8007a18:	2000      	movs	r0, #0
 8007a1a:	b007      	add	sp, #28
 8007a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a20:	f04f 0800 	mov.w	r8, #0
 8007a24:	e7ca      	b.n	80079bc <_scanf_i+0x160>
 8007a26:	07ca      	lsls	r2, r1, #31
 8007a28:	bf4c      	ite	mi
 8007a2a:	8018      	strhmi	r0, [r3, #0]
 8007a2c:	6018      	strpl	r0, [r3, #0]
 8007a2e:	e7ea      	b.n	8007a06 <_scanf_i+0x1aa>
 8007a30:	2001      	movs	r0, #1
 8007a32:	e7f2      	b.n	8007a1a <_scanf_i+0x1be>
 8007a34:	08007fb8 	.word	0x08007fb8
 8007a38:	08007ba1 	.word	0x08007ba1
 8007a3c:	08007cb9 	.word	0x08007cb9
 8007a40:	08007ff8 	.word	0x08007ff8

08007a44 <__sccl>:
 8007a44:	b570      	push	{r4, r5, r6, lr}
 8007a46:	780b      	ldrb	r3, [r1, #0]
 8007a48:	2b5e      	cmp	r3, #94	; 0x5e
 8007a4a:	bf13      	iteet	ne
 8007a4c:	1c4a      	addne	r2, r1, #1
 8007a4e:	1c8a      	addeq	r2, r1, #2
 8007a50:	784b      	ldrbeq	r3, [r1, #1]
 8007a52:	2100      	movne	r1, #0
 8007a54:	bf08      	it	eq
 8007a56:	2101      	moveq	r1, #1
 8007a58:	1e44      	subs	r4, r0, #1
 8007a5a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8007a5e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8007a62:	42ac      	cmp	r4, r5
 8007a64:	d1fb      	bne.n	8007a5e <__sccl+0x1a>
 8007a66:	b913      	cbnz	r3, 8007a6e <__sccl+0x2a>
 8007a68:	3a01      	subs	r2, #1
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	bd70      	pop	{r4, r5, r6, pc}
 8007a6e:	f081 0401 	eor.w	r4, r1, #1
 8007a72:	54c4      	strb	r4, [r0, r3]
 8007a74:	1c51      	adds	r1, r2, #1
 8007a76:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8007a7a:	2d2d      	cmp	r5, #45	; 0x2d
 8007a7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8007a80:	460a      	mov	r2, r1
 8007a82:	d006      	beq.n	8007a92 <__sccl+0x4e>
 8007a84:	2d5d      	cmp	r5, #93	; 0x5d
 8007a86:	d0f0      	beq.n	8007a6a <__sccl+0x26>
 8007a88:	b90d      	cbnz	r5, 8007a8e <__sccl+0x4a>
 8007a8a:	4632      	mov	r2, r6
 8007a8c:	e7ed      	b.n	8007a6a <__sccl+0x26>
 8007a8e:	462b      	mov	r3, r5
 8007a90:	e7ef      	b.n	8007a72 <__sccl+0x2e>
 8007a92:	780e      	ldrb	r6, [r1, #0]
 8007a94:	2e5d      	cmp	r6, #93	; 0x5d
 8007a96:	d0fa      	beq.n	8007a8e <__sccl+0x4a>
 8007a98:	42b3      	cmp	r3, r6
 8007a9a:	dcf8      	bgt.n	8007a8e <__sccl+0x4a>
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	429e      	cmp	r6, r3
 8007aa0:	54c4      	strb	r4, [r0, r3]
 8007aa2:	dcfb      	bgt.n	8007a9c <__sccl+0x58>
 8007aa4:	3102      	adds	r1, #2
 8007aa6:	e7e6      	b.n	8007a76 <__sccl+0x32>

08007aa8 <_strtol_l.isra.0>:
 8007aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aac:	4680      	mov	r8, r0
 8007aae:	4689      	mov	r9, r1
 8007ab0:	4692      	mov	sl, r2
 8007ab2:	461e      	mov	r6, r3
 8007ab4:	460f      	mov	r7, r1
 8007ab6:	463d      	mov	r5, r7
 8007ab8:	9808      	ldr	r0, [sp, #32]
 8007aba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007abe:	f000 f947 	bl	8007d50 <__locale_ctype_ptr_l>
 8007ac2:	4420      	add	r0, r4
 8007ac4:	7843      	ldrb	r3, [r0, #1]
 8007ac6:	f013 0308 	ands.w	r3, r3, #8
 8007aca:	d132      	bne.n	8007b32 <_strtol_l.isra.0+0x8a>
 8007acc:	2c2d      	cmp	r4, #45	; 0x2d
 8007ace:	d132      	bne.n	8007b36 <_strtol_l.isra.0+0x8e>
 8007ad0:	787c      	ldrb	r4, [r7, #1]
 8007ad2:	1cbd      	adds	r5, r7, #2
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	2e00      	cmp	r6, #0
 8007ad8:	d05d      	beq.n	8007b96 <_strtol_l.isra.0+0xee>
 8007ada:	2e10      	cmp	r6, #16
 8007adc:	d109      	bne.n	8007af2 <_strtol_l.isra.0+0x4a>
 8007ade:	2c30      	cmp	r4, #48	; 0x30
 8007ae0:	d107      	bne.n	8007af2 <_strtol_l.isra.0+0x4a>
 8007ae2:	782b      	ldrb	r3, [r5, #0]
 8007ae4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ae8:	2b58      	cmp	r3, #88	; 0x58
 8007aea:	d14f      	bne.n	8007b8c <_strtol_l.isra.0+0xe4>
 8007aec:	786c      	ldrb	r4, [r5, #1]
 8007aee:	2610      	movs	r6, #16
 8007af0:	3502      	adds	r5, #2
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	bf14      	ite	ne
 8007af6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007afa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007afe:	2700      	movs	r7, #0
 8007b00:	fbb1 fcf6 	udiv	ip, r1, r6
 8007b04:	4638      	mov	r0, r7
 8007b06:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007b0a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007b0e:	2b09      	cmp	r3, #9
 8007b10:	d817      	bhi.n	8007b42 <_strtol_l.isra.0+0x9a>
 8007b12:	461c      	mov	r4, r3
 8007b14:	42a6      	cmp	r6, r4
 8007b16:	dd23      	ble.n	8007b60 <_strtol_l.isra.0+0xb8>
 8007b18:	1c7b      	adds	r3, r7, #1
 8007b1a:	d007      	beq.n	8007b2c <_strtol_l.isra.0+0x84>
 8007b1c:	4584      	cmp	ip, r0
 8007b1e:	d31c      	bcc.n	8007b5a <_strtol_l.isra.0+0xb2>
 8007b20:	d101      	bne.n	8007b26 <_strtol_l.isra.0+0x7e>
 8007b22:	45a6      	cmp	lr, r4
 8007b24:	db19      	blt.n	8007b5a <_strtol_l.isra.0+0xb2>
 8007b26:	fb00 4006 	mla	r0, r0, r6, r4
 8007b2a:	2701      	movs	r7, #1
 8007b2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b30:	e7eb      	b.n	8007b0a <_strtol_l.isra.0+0x62>
 8007b32:	462f      	mov	r7, r5
 8007b34:	e7bf      	b.n	8007ab6 <_strtol_l.isra.0+0xe>
 8007b36:	2c2b      	cmp	r4, #43	; 0x2b
 8007b38:	bf04      	itt	eq
 8007b3a:	1cbd      	addeq	r5, r7, #2
 8007b3c:	787c      	ldrbeq	r4, [r7, #1]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	e7c9      	b.n	8007ad6 <_strtol_l.isra.0+0x2e>
 8007b42:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007b46:	2b19      	cmp	r3, #25
 8007b48:	d801      	bhi.n	8007b4e <_strtol_l.isra.0+0xa6>
 8007b4a:	3c37      	subs	r4, #55	; 0x37
 8007b4c:	e7e2      	b.n	8007b14 <_strtol_l.isra.0+0x6c>
 8007b4e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007b52:	2b19      	cmp	r3, #25
 8007b54:	d804      	bhi.n	8007b60 <_strtol_l.isra.0+0xb8>
 8007b56:	3c57      	subs	r4, #87	; 0x57
 8007b58:	e7dc      	b.n	8007b14 <_strtol_l.isra.0+0x6c>
 8007b5a:	f04f 37ff 	mov.w	r7, #4294967295
 8007b5e:	e7e5      	b.n	8007b2c <_strtol_l.isra.0+0x84>
 8007b60:	1c7b      	adds	r3, r7, #1
 8007b62:	d108      	bne.n	8007b76 <_strtol_l.isra.0+0xce>
 8007b64:	2322      	movs	r3, #34	; 0x22
 8007b66:	f8c8 3000 	str.w	r3, [r8]
 8007b6a:	4608      	mov	r0, r1
 8007b6c:	f1ba 0f00 	cmp.w	sl, #0
 8007b70:	d107      	bne.n	8007b82 <_strtol_l.isra.0+0xda>
 8007b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b76:	b102      	cbz	r2, 8007b7a <_strtol_l.isra.0+0xd2>
 8007b78:	4240      	negs	r0, r0
 8007b7a:	f1ba 0f00 	cmp.w	sl, #0
 8007b7e:	d0f8      	beq.n	8007b72 <_strtol_l.isra.0+0xca>
 8007b80:	b10f      	cbz	r7, 8007b86 <_strtol_l.isra.0+0xde>
 8007b82:	f105 39ff 	add.w	r9, r5, #4294967295
 8007b86:	f8ca 9000 	str.w	r9, [sl]
 8007b8a:	e7f2      	b.n	8007b72 <_strtol_l.isra.0+0xca>
 8007b8c:	2430      	movs	r4, #48	; 0x30
 8007b8e:	2e00      	cmp	r6, #0
 8007b90:	d1af      	bne.n	8007af2 <_strtol_l.isra.0+0x4a>
 8007b92:	2608      	movs	r6, #8
 8007b94:	e7ad      	b.n	8007af2 <_strtol_l.isra.0+0x4a>
 8007b96:	2c30      	cmp	r4, #48	; 0x30
 8007b98:	d0a3      	beq.n	8007ae2 <_strtol_l.isra.0+0x3a>
 8007b9a:	260a      	movs	r6, #10
 8007b9c:	e7a9      	b.n	8007af2 <_strtol_l.isra.0+0x4a>
	...

08007ba0 <_strtol_r>:
 8007ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ba2:	4c06      	ldr	r4, [pc, #24]	; (8007bbc <_strtol_r+0x1c>)
 8007ba4:	4d06      	ldr	r5, [pc, #24]	; (8007bc0 <_strtol_r+0x20>)
 8007ba6:	6824      	ldr	r4, [r4, #0]
 8007ba8:	6a24      	ldr	r4, [r4, #32]
 8007baa:	2c00      	cmp	r4, #0
 8007bac:	bf08      	it	eq
 8007bae:	462c      	moveq	r4, r5
 8007bb0:	9400      	str	r4, [sp, #0]
 8007bb2:	f7ff ff79 	bl	8007aa8 <_strtol_l.isra.0>
 8007bb6:	b003      	add	sp, #12
 8007bb8:	bd30      	pop	{r4, r5, pc}
 8007bba:	bf00      	nop
 8007bbc:	2000000c 	.word	0x2000000c
 8007bc0:	20000070 	.word	0x20000070

08007bc4 <_strtoul_l.isra.0>:
 8007bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc8:	4680      	mov	r8, r0
 8007bca:	4689      	mov	r9, r1
 8007bcc:	4692      	mov	sl, r2
 8007bce:	461e      	mov	r6, r3
 8007bd0:	460f      	mov	r7, r1
 8007bd2:	463d      	mov	r5, r7
 8007bd4:	9808      	ldr	r0, [sp, #32]
 8007bd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bda:	f000 f8b9 	bl	8007d50 <__locale_ctype_ptr_l>
 8007bde:	4420      	add	r0, r4
 8007be0:	7843      	ldrb	r3, [r0, #1]
 8007be2:	f013 0308 	ands.w	r3, r3, #8
 8007be6:	d130      	bne.n	8007c4a <_strtoul_l.isra.0+0x86>
 8007be8:	2c2d      	cmp	r4, #45	; 0x2d
 8007bea:	d130      	bne.n	8007c4e <_strtoul_l.isra.0+0x8a>
 8007bec:	787c      	ldrb	r4, [r7, #1]
 8007bee:	1cbd      	adds	r5, r7, #2
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	2e00      	cmp	r6, #0
 8007bf4:	d05c      	beq.n	8007cb0 <_strtoul_l.isra.0+0xec>
 8007bf6:	2e10      	cmp	r6, #16
 8007bf8:	d109      	bne.n	8007c0e <_strtoul_l.isra.0+0x4a>
 8007bfa:	2c30      	cmp	r4, #48	; 0x30
 8007bfc:	d107      	bne.n	8007c0e <_strtoul_l.isra.0+0x4a>
 8007bfe:	782b      	ldrb	r3, [r5, #0]
 8007c00:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c04:	2b58      	cmp	r3, #88	; 0x58
 8007c06:	d14e      	bne.n	8007ca6 <_strtoul_l.isra.0+0xe2>
 8007c08:	786c      	ldrb	r4, [r5, #1]
 8007c0a:	2610      	movs	r6, #16
 8007c0c:	3502      	adds	r5, #2
 8007c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c12:	2300      	movs	r3, #0
 8007c14:	fbb2 f2f6 	udiv	r2, r2, r6
 8007c18:	fb06 fc02 	mul.w	ip, r6, r2
 8007c1c:	ea6f 0c0c 	mvn.w	ip, ip
 8007c20:	4618      	mov	r0, r3
 8007c22:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007c26:	2f09      	cmp	r7, #9
 8007c28:	d817      	bhi.n	8007c5a <_strtoul_l.isra.0+0x96>
 8007c2a:	463c      	mov	r4, r7
 8007c2c:	42a6      	cmp	r6, r4
 8007c2e:	dd23      	ble.n	8007c78 <_strtoul_l.isra.0+0xb4>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	db1e      	blt.n	8007c72 <_strtoul_l.isra.0+0xae>
 8007c34:	4282      	cmp	r2, r0
 8007c36:	d31c      	bcc.n	8007c72 <_strtoul_l.isra.0+0xae>
 8007c38:	d101      	bne.n	8007c3e <_strtoul_l.isra.0+0x7a>
 8007c3a:	45a4      	cmp	ip, r4
 8007c3c:	db19      	blt.n	8007c72 <_strtoul_l.isra.0+0xae>
 8007c3e:	fb00 4006 	mla	r0, r0, r6, r4
 8007c42:	2301      	movs	r3, #1
 8007c44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c48:	e7eb      	b.n	8007c22 <_strtoul_l.isra.0+0x5e>
 8007c4a:	462f      	mov	r7, r5
 8007c4c:	e7c1      	b.n	8007bd2 <_strtoul_l.isra.0+0xe>
 8007c4e:	2c2b      	cmp	r4, #43	; 0x2b
 8007c50:	bf04      	itt	eq
 8007c52:	1cbd      	addeq	r5, r7, #2
 8007c54:	787c      	ldrbeq	r4, [r7, #1]
 8007c56:	4619      	mov	r1, r3
 8007c58:	e7cb      	b.n	8007bf2 <_strtoul_l.isra.0+0x2e>
 8007c5a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007c5e:	2f19      	cmp	r7, #25
 8007c60:	d801      	bhi.n	8007c66 <_strtoul_l.isra.0+0xa2>
 8007c62:	3c37      	subs	r4, #55	; 0x37
 8007c64:	e7e2      	b.n	8007c2c <_strtoul_l.isra.0+0x68>
 8007c66:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007c6a:	2f19      	cmp	r7, #25
 8007c6c:	d804      	bhi.n	8007c78 <_strtoul_l.isra.0+0xb4>
 8007c6e:	3c57      	subs	r4, #87	; 0x57
 8007c70:	e7dc      	b.n	8007c2c <_strtoul_l.isra.0+0x68>
 8007c72:	f04f 33ff 	mov.w	r3, #4294967295
 8007c76:	e7e5      	b.n	8007c44 <_strtoul_l.isra.0+0x80>
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	da09      	bge.n	8007c90 <_strtoul_l.isra.0+0xcc>
 8007c7c:	2322      	movs	r3, #34	; 0x22
 8007c7e:	f8c8 3000 	str.w	r3, [r8]
 8007c82:	f04f 30ff 	mov.w	r0, #4294967295
 8007c86:	f1ba 0f00 	cmp.w	sl, #0
 8007c8a:	d107      	bne.n	8007c9c <_strtoul_l.isra.0+0xd8>
 8007c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c90:	b101      	cbz	r1, 8007c94 <_strtoul_l.isra.0+0xd0>
 8007c92:	4240      	negs	r0, r0
 8007c94:	f1ba 0f00 	cmp.w	sl, #0
 8007c98:	d0f8      	beq.n	8007c8c <_strtoul_l.isra.0+0xc8>
 8007c9a:	b10b      	cbz	r3, 8007ca0 <_strtoul_l.isra.0+0xdc>
 8007c9c:	f105 39ff 	add.w	r9, r5, #4294967295
 8007ca0:	f8ca 9000 	str.w	r9, [sl]
 8007ca4:	e7f2      	b.n	8007c8c <_strtoul_l.isra.0+0xc8>
 8007ca6:	2430      	movs	r4, #48	; 0x30
 8007ca8:	2e00      	cmp	r6, #0
 8007caa:	d1b0      	bne.n	8007c0e <_strtoul_l.isra.0+0x4a>
 8007cac:	2608      	movs	r6, #8
 8007cae:	e7ae      	b.n	8007c0e <_strtoul_l.isra.0+0x4a>
 8007cb0:	2c30      	cmp	r4, #48	; 0x30
 8007cb2:	d0a4      	beq.n	8007bfe <_strtoul_l.isra.0+0x3a>
 8007cb4:	260a      	movs	r6, #10
 8007cb6:	e7aa      	b.n	8007c0e <_strtoul_l.isra.0+0x4a>

08007cb8 <_strtoul_r>:
 8007cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cba:	4c06      	ldr	r4, [pc, #24]	; (8007cd4 <_strtoul_r+0x1c>)
 8007cbc:	4d06      	ldr	r5, [pc, #24]	; (8007cd8 <_strtoul_r+0x20>)
 8007cbe:	6824      	ldr	r4, [r4, #0]
 8007cc0:	6a24      	ldr	r4, [r4, #32]
 8007cc2:	2c00      	cmp	r4, #0
 8007cc4:	bf08      	it	eq
 8007cc6:	462c      	moveq	r4, r5
 8007cc8:	9400      	str	r4, [sp, #0]
 8007cca:	f7ff ff7b 	bl	8007bc4 <_strtoul_l.isra.0>
 8007cce:	b003      	add	sp, #12
 8007cd0:	bd30      	pop	{r4, r5, pc}
 8007cd2:	bf00      	nop
 8007cd4:	2000000c 	.word	0x2000000c
 8007cd8:	20000070 	.word	0x20000070

08007cdc <__submore>:
 8007cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce0:	460c      	mov	r4, r1
 8007ce2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007ce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ce8:	4299      	cmp	r1, r3
 8007cea:	d11d      	bne.n	8007d28 <__submore+0x4c>
 8007cec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cf0:	f000 f8ac 	bl	8007e4c <_malloc_r>
 8007cf4:	b918      	cbnz	r0, 8007cfe <__submore+0x22>
 8007cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d02:	63a3      	str	r3, [r4, #56]	; 0x38
 8007d04:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007d08:	6360      	str	r0, [r4, #52]	; 0x34
 8007d0a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007d0e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007d12:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007d16:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007d1a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007d1e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007d22:	6020      	str	r0, [r4, #0]
 8007d24:	2000      	movs	r0, #0
 8007d26:	e7e8      	b.n	8007cfa <__submore+0x1e>
 8007d28:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007d2a:	0077      	lsls	r7, r6, #1
 8007d2c:	463a      	mov	r2, r7
 8007d2e:	f000 f8e7 	bl	8007f00 <_realloc_r>
 8007d32:	4605      	mov	r5, r0
 8007d34:	2800      	cmp	r0, #0
 8007d36:	d0de      	beq.n	8007cf6 <__submore+0x1a>
 8007d38:	eb00 0806 	add.w	r8, r0, r6
 8007d3c:	4601      	mov	r1, r0
 8007d3e:	4632      	mov	r2, r6
 8007d40:	4640      	mov	r0, r8
 8007d42:	f000 f829 	bl	8007d98 <memcpy>
 8007d46:	f8c4 8000 	str.w	r8, [r4]
 8007d4a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007d4e:	e7e9      	b.n	8007d24 <__submore+0x48>

08007d50 <__locale_ctype_ptr_l>:
 8007d50:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007d54:	4770      	bx	lr
	...

08007d58 <__locale_ctype_ptr>:
 8007d58:	4b04      	ldr	r3, [pc, #16]	; (8007d6c <__locale_ctype_ptr+0x14>)
 8007d5a:	4a05      	ldr	r2, [pc, #20]	; (8007d70 <__locale_ctype_ptr+0x18>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6a1b      	ldr	r3, [r3, #32]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	bf08      	it	eq
 8007d64:	4613      	moveq	r3, r2
 8007d66:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8007d6a:	4770      	bx	lr
 8007d6c:	2000000c 	.word	0x2000000c
 8007d70:	20000070 	.word	0x20000070

08007d74 <__ascii_mbtowc>:
 8007d74:	b082      	sub	sp, #8
 8007d76:	b901      	cbnz	r1, 8007d7a <__ascii_mbtowc+0x6>
 8007d78:	a901      	add	r1, sp, #4
 8007d7a:	b142      	cbz	r2, 8007d8e <__ascii_mbtowc+0x1a>
 8007d7c:	b14b      	cbz	r3, 8007d92 <__ascii_mbtowc+0x1e>
 8007d7e:	7813      	ldrb	r3, [r2, #0]
 8007d80:	600b      	str	r3, [r1, #0]
 8007d82:	7812      	ldrb	r2, [r2, #0]
 8007d84:	1c10      	adds	r0, r2, #0
 8007d86:	bf18      	it	ne
 8007d88:	2001      	movne	r0, #1
 8007d8a:	b002      	add	sp, #8
 8007d8c:	4770      	bx	lr
 8007d8e:	4610      	mov	r0, r2
 8007d90:	e7fb      	b.n	8007d8a <__ascii_mbtowc+0x16>
 8007d92:	f06f 0001 	mvn.w	r0, #1
 8007d96:	e7f8      	b.n	8007d8a <__ascii_mbtowc+0x16>

08007d98 <memcpy>:
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	1e43      	subs	r3, r0, #1
 8007d9c:	440a      	add	r2, r1
 8007d9e:	4291      	cmp	r1, r2
 8007da0:	d100      	bne.n	8007da4 <memcpy+0xc>
 8007da2:	bd10      	pop	{r4, pc}
 8007da4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007da8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dac:	e7f7      	b.n	8007d9e <memcpy+0x6>
	...

08007db0 <_free_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4605      	mov	r5, r0
 8007db4:	2900      	cmp	r1, #0
 8007db6:	d045      	beq.n	8007e44 <_free_r+0x94>
 8007db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dbc:	1f0c      	subs	r4, r1, #4
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	bfb8      	it	lt
 8007dc2:	18e4      	addlt	r4, r4, r3
 8007dc4:	f000 f8df 	bl	8007f86 <__malloc_lock>
 8007dc8:	4a1f      	ldr	r2, [pc, #124]	; (8007e48 <_free_r+0x98>)
 8007dca:	6813      	ldr	r3, [r2, #0]
 8007dcc:	4610      	mov	r0, r2
 8007dce:	b933      	cbnz	r3, 8007dde <_free_r+0x2e>
 8007dd0:	6063      	str	r3, [r4, #4]
 8007dd2:	6014      	str	r4, [r2, #0]
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dda:	f000 b8d5 	b.w	8007f88 <__malloc_unlock>
 8007dde:	42a3      	cmp	r3, r4
 8007de0:	d90c      	bls.n	8007dfc <_free_r+0x4c>
 8007de2:	6821      	ldr	r1, [r4, #0]
 8007de4:	1862      	adds	r2, r4, r1
 8007de6:	4293      	cmp	r3, r2
 8007de8:	bf04      	itt	eq
 8007dea:	681a      	ldreq	r2, [r3, #0]
 8007dec:	685b      	ldreq	r3, [r3, #4]
 8007dee:	6063      	str	r3, [r4, #4]
 8007df0:	bf04      	itt	eq
 8007df2:	1852      	addeq	r2, r2, r1
 8007df4:	6022      	streq	r2, [r4, #0]
 8007df6:	6004      	str	r4, [r0, #0]
 8007df8:	e7ec      	b.n	8007dd4 <_free_r+0x24>
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	b10a      	cbz	r2, 8007e04 <_free_r+0x54>
 8007e00:	42a2      	cmp	r2, r4
 8007e02:	d9fa      	bls.n	8007dfa <_free_r+0x4a>
 8007e04:	6819      	ldr	r1, [r3, #0]
 8007e06:	1858      	adds	r0, r3, r1
 8007e08:	42a0      	cmp	r0, r4
 8007e0a:	d10b      	bne.n	8007e24 <_free_r+0x74>
 8007e0c:	6820      	ldr	r0, [r4, #0]
 8007e0e:	4401      	add	r1, r0
 8007e10:	1858      	adds	r0, r3, r1
 8007e12:	4282      	cmp	r2, r0
 8007e14:	6019      	str	r1, [r3, #0]
 8007e16:	d1dd      	bne.n	8007dd4 <_free_r+0x24>
 8007e18:	6810      	ldr	r0, [r2, #0]
 8007e1a:	6852      	ldr	r2, [r2, #4]
 8007e1c:	605a      	str	r2, [r3, #4]
 8007e1e:	4401      	add	r1, r0
 8007e20:	6019      	str	r1, [r3, #0]
 8007e22:	e7d7      	b.n	8007dd4 <_free_r+0x24>
 8007e24:	d902      	bls.n	8007e2c <_free_r+0x7c>
 8007e26:	230c      	movs	r3, #12
 8007e28:	602b      	str	r3, [r5, #0]
 8007e2a:	e7d3      	b.n	8007dd4 <_free_r+0x24>
 8007e2c:	6820      	ldr	r0, [r4, #0]
 8007e2e:	1821      	adds	r1, r4, r0
 8007e30:	428a      	cmp	r2, r1
 8007e32:	bf04      	itt	eq
 8007e34:	6811      	ldreq	r1, [r2, #0]
 8007e36:	6852      	ldreq	r2, [r2, #4]
 8007e38:	6062      	str	r2, [r4, #4]
 8007e3a:	bf04      	itt	eq
 8007e3c:	1809      	addeq	r1, r1, r0
 8007e3e:	6021      	streq	r1, [r4, #0]
 8007e40:	605c      	str	r4, [r3, #4]
 8007e42:	e7c7      	b.n	8007dd4 <_free_r+0x24>
 8007e44:	bd38      	pop	{r3, r4, r5, pc}
 8007e46:	bf00      	nop
 8007e48:	20000200 	.word	0x20000200

08007e4c <_malloc_r>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	1ccd      	adds	r5, r1, #3
 8007e50:	f025 0503 	bic.w	r5, r5, #3
 8007e54:	3508      	adds	r5, #8
 8007e56:	2d0c      	cmp	r5, #12
 8007e58:	bf38      	it	cc
 8007e5a:	250c      	movcc	r5, #12
 8007e5c:	2d00      	cmp	r5, #0
 8007e5e:	4606      	mov	r6, r0
 8007e60:	db01      	blt.n	8007e66 <_malloc_r+0x1a>
 8007e62:	42a9      	cmp	r1, r5
 8007e64:	d903      	bls.n	8007e6e <_malloc_r+0x22>
 8007e66:	230c      	movs	r3, #12
 8007e68:	6033      	str	r3, [r6, #0]
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	bd70      	pop	{r4, r5, r6, pc}
 8007e6e:	f000 f88a 	bl	8007f86 <__malloc_lock>
 8007e72:	4a21      	ldr	r2, [pc, #132]	; (8007ef8 <_malloc_r+0xac>)
 8007e74:	6814      	ldr	r4, [r2, #0]
 8007e76:	4621      	mov	r1, r4
 8007e78:	b991      	cbnz	r1, 8007ea0 <_malloc_r+0x54>
 8007e7a:	4c20      	ldr	r4, [pc, #128]	; (8007efc <_malloc_r+0xb0>)
 8007e7c:	6823      	ldr	r3, [r4, #0]
 8007e7e:	b91b      	cbnz	r3, 8007e88 <_malloc_r+0x3c>
 8007e80:	4630      	mov	r0, r6
 8007e82:	f000 f863 	bl	8007f4c <_sbrk_r>
 8007e86:	6020      	str	r0, [r4, #0]
 8007e88:	4629      	mov	r1, r5
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f000 f85e 	bl	8007f4c <_sbrk_r>
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	d124      	bne.n	8007ede <_malloc_r+0x92>
 8007e94:	230c      	movs	r3, #12
 8007e96:	6033      	str	r3, [r6, #0]
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f000 f875 	bl	8007f88 <__malloc_unlock>
 8007e9e:	e7e4      	b.n	8007e6a <_malloc_r+0x1e>
 8007ea0:	680b      	ldr	r3, [r1, #0]
 8007ea2:	1b5b      	subs	r3, r3, r5
 8007ea4:	d418      	bmi.n	8007ed8 <_malloc_r+0x8c>
 8007ea6:	2b0b      	cmp	r3, #11
 8007ea8:	d90f      	bls.n	8007eca <_malloc_r+0x7e>
 8007eaa:	600b      	str	r3, [r1, #0]
 8007eac:	50cd      	str	r5, [r1, r3]
 8007eae:	18cc      	adds	r4, r1, r3
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f000 f869 	bl	8007f88 <__malloc_unlock>
 8007eb6:	f104 000b 	add.w	r0, r4, #11
 8007eba:	1d23      	adds	r3, r4, #4
 8007ebc:	f020 0007 	bic.w	r0, r0, #7
 8007ec0:	1ac3      	subs	r3, r0, r3
 8007ec2:	d0d3      	beq.n	8007e6c <_malloc_r+0x20>
 8007ec4:	425a      	negs	r2, r3
 8007ec6:	50e2      	str	r2, [r4, r3]
 8007ec8:	e7d0      	b.n	8007e6c <_malloc_r+0x20>
 8007eca:	428c      	cmp	r4, r1
 8007ecc:	684b      	ldr	r3, [r1, #4]
 8007ece:	bf16      	itet	ne
 8007ed0:	6063      	strne	r3, [r4, #4]
 8007ed2:	6013      	streq	r3, [r2, #0]
 8007ed4:	460c      	movne	r4, r1
 8007ed6:	e7eb      	b.n	8007eb0 <_malloc_r+0x64>
 8007ed8:	460c      	mov	r4, r1
 8007eda:	6849      	ldr	r1, [r1, #4]
 8007edc:	e7cc      	b.n	8007e78 <_malloc_r+0x2c>
 8007ede:	1cc4      	adds	r4, r0, #3
 8007ee0:	f024 0403 	bic.w	r4, r4, #3
 8007ee4:	42a0      	cmp	r0, r4
 8007ee6:	d005      	beq.n	8007ef4 <_malloc_r+0xa8>
 8007ee8:	1a21      	subs	r1, r4, r0
 8007eea:	4630      	mov	r0, r6
 8007eec:	f000 f82e 	bl	8007f4c <_sbrk_r>
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d0cf      	beq.n	8007e94 <_malloc_r+0x48>
 8007ef4:	6025      	str	r5, [r4, #0]
 8007ef6:	e7db      	b.n	8007eb0 <_malloc_r+0x64>
 8007ef8:	20000200 	.word	0x20000200
 8007efc:	20000204 	.word	0x20000204

08007f00 <_realloc_r>:
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f02:	4607      	mov	r7, r0
 8007f04:	4614      	mov	r4, r2
 8007f06:	460e      	mov	r6, r1
 8007f08:	b921      	cbnz	r1, 8007f14 <_realloc_r+0x14>
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f10:	f7ff bf9c 	b.w	8007e4c <_malloc_r>
 8007f14:	b922      	cbnz	r2, 8007f20 <_realloc_r+0x20>
 8007f16:	f7ff ff4b 	bl	8007db0 <_free_r>
 8007f1a:	4625      	mov	r5, r4
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f20:	f000 f833 	bl	8007f8a <_malloc_usable_size_r>
 8007f24:	42a0      	cmp	r0, r4
 8007f26:	d20f      	bcs.n	8007f48 <_realloc_r+0x48>
 8007f28:	4621      	mov	r1, r4
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	f7ff ff8e 	bl	8007e4c <_malloc_r>
 8007f30:	4605      	mov	r5, r0
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d0f2      	beq.n	8007f1c <_realloc_r+0x1c>
 8007f36:	4631      	mov	r1, r6
 8007f38:	4622      	mov	r2, r4
 8007f3a:	f7ff ff2d 	bl	8007d98 <memcpy>
 8007f3e:	4631      	mov	r1, r6
 8007f40:	4638      	mov	r0, r7
 8007f42:	f7ff ff35 	bl	8007db0 <_free_r>
 8007f46:	e7e9      	b.n	8007f1c <_realloc_r+0x1c>
 8007f48:	4635      	mov	r5, r6
 8007f4a:	e7e7      	b.n	8007f1c <_realloc_r+0x1c>

08007f4c <_sbrk_r>:
 8007f4c:	b538      	push	{r3, r4, r5, lr}
 8007f4e:	4c06      	ldr	r4, [pc, #24]	; (8007f68 <_sbrk_r+0x1c>)
 8007f50:	2300      	movs	r3, #0
 8007f52:	4605      	mov	r5, r0
 8007f54:	4608      	mov	r0, r1
 8007f56:	6023      	str	r3, [r4, #0]
 8007f58:	f7f9 ff42 	bl	8001de0 <_sbrk>
 8007f5c:	1c43      	adds	r3, r0, #1
 8007f5e:	d102      	bne.n	8007f66 <_sbrk_r+0x1a>
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	b103      	cbz	r3, 8007f66 <_sbrk_r+0x1a>
 8007f64:	602b      	str	r3, [r5, #0]
 8007f66:	bd38      	pop	{r3, r4, r5, pc}
 8007f68:	2000058c 	.word	0x2000058c

08007f6c <__ascii_wctomb>:
 8007f6c:	b149      	cbz	r1, 8007f82 <__ascii_wctomb+0x16>
 8007f6e:	2aff      	cmp	r2, #255	; 0xff
 8007f70:	bf85      	ittet	hi
 8007f72:	238a      	movhi	r3, #138	; 0x8a
 8007f74:	6003      	strhi	r3, [r0, #0]
 8007f76:	700a      	strbls	r2, [r1, #0]
 8007f78:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f7c:	bf98      	it	ls
 8007f7e:	2001      	movls	r0, #1
 8007f80:	4770      	bx	lr
 8007f82:	4608      	mov	r0, r1
 8007f84:	4770      	bx	lr

08007f86 <__malloc_lock>:
 8007f86:	4770      	bx	lr

08007f88 <__malloc_unlock>:
 8007f88:	4770      	bx	lr

08007f8a <_malloc_usable_size_r>:
 8007f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f8e:	1f18      	subs	r0, r3, #4
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	bfbc      	itt	lt
 8007f94:	580b      	ldrlt	r3, [r1, r0]
 8007f96:	18c0      	addlt	r0, r0, r3
 8007f98:	4770      	bx	lr
	...

08007f9c <_init>:
 8007f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9e:	bf00      	nop
 8007fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa2:	bc08      	pop	{r3}
 8007fa4:	469e      	mov	lr, r3
 8007fa6:	4770      	bx	lr

08007fa8 <_fini>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	bf00      	nop
 8007fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fae:	bc08      	pop	{r3}
 8007fb0:	469e      	mov	lr, r3
 8007fb2:	4770      	bx	lr
