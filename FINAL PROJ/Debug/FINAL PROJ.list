
FINAL PROJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ec4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08008094  08008094  00018094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008280  08008280  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008280  08008280  00018280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008288  08008288  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008288  08008288  00018288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800828c  0800828c  0001828c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  200001dc  0800846c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0800846c  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019dce  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000396b  00000000  00000000  00039fda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014d8  00000000  00000000  0003d948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d0  00000000  00000000  0003ee20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029942  00000000  00000000  000400f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014bde  00000000  00000000  00069a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f5c03  00000000  00000000  0007e610  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00174213  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e10  00000000  00000000  00174290  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800807c 	.word	0x0800807c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800807c 	.word	0x0800807c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b972 	b.w	8000df8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	4688      	mov	r8, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14b      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4615      	mov	r5, r2
 8000b3e:	d967      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0720 	rsb	r7, r2, #32
 8000b4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b52:	4095      	lsls	r5, r2
 8000b54:	ea47 0803 	orr.w	r8, r7, r3
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b64:	fa1f fc85 	uxth.w	ip, r5
 8000b68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b70:	fb07 f10c 	mul.w	r1, r7, ip
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18eb      	adds	r3, r5, r3
 8000b7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b7e:	f080 811b 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8118 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000b88:	3f02      	subs	r7, #2
 8000b8a:	442b      	add	r3, r5
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba0:	45a4      	cmp	ip, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	192c      	adds	r4, r5, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000baa:	f080 8107 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	f240 8104 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	442c      	add	r4, r5
 8000bb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bbc:	eba4 040c 	sub.w	r4, r4, ip
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	b11e      	cbz	r6, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0xbe>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80eb 	beq.w	8000db2 <__udivmoddi4+0x286>
 8000bdc:	2700      	movs	r7, #0
 8000bde:	e9c6 0100 	strd	r0, r1, [r6]
 8000be2:	4638      	mov	r0, r7
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	fab3 f783 	clz	r7, r3
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	d147      	bne.n	8000c82 <__udivmoddi4+0x156>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xd0>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 80fa 	bhi.w	8000df0 <__udivmoddi4+0x2c4>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4698      	mov	r8, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d0e0      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c0e:	e7dd      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c10:	b902      	cbnz	r2, 8000c14 <__udivmoddi4+0xe8>
 8000c12:	deff      	udf	#255	; 0xff
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f040 808f 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1e:	1b49      	subs	r1, r1, r5
 8000c20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c24:	fa1f f885 	uxth.w	r8, r5
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c38:	fb08 f10c 	mul.w	r1, r8, ip
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c40:	18eb      	adds	r3, r5, r3
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x14c>
 8000c68:	192c      	adds	r4, r5, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x14a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80b6 	bhi.w	8000de2 <__udivmoddi4+0x2b6>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e79f      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c82:	f1c7 0c20 	rsb	ip, r7, #32
 8000c86:	40bb      	lsls	r3, r7
 8000c88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c90:	fa01 f407 	lsl.w	r4, r1, r7
 8000c94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca0:	4325      	orrs	r5, r4
 8000ca2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ca6:	0c2c      	lsrs	r4, r5, #16
 8000ca8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cac:	fa1f fa8e 	uxth.w	sl, lr
 8000cb0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	fa02 f207 	lsl.w	r2, r2, r7
 8000cbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	f080 8087 	bcs.w	8000dde <__udivmoddi4+0x2b2>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f240 8084 	bls.w	8000dde <__udivmoddi4+0x2b2>
 8000cd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cda:	4473      	add	r3, lr
 8000cdc:	1b1b      	subs	r3, r3, r4
 8000cde:	b2ad      	uxth	r5, r5
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf0:	45a2      	cmp	sl, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	d26b      	bcs.n	8000dd6 <__udivmoddi4+0x2aa>
 8000cfe:	45a2      	cmp	sl, r4
 8000d00:	d969      	bls.n	8000dd6 <__udivmoddi4+0x2aa>
 8000d02:	3802      	subs	r0, #2
 8000d04:	4474      	add	r4, lr
 8000d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	eba4 040a 	sub.w	r4, r4, sl
 8000d12:	454c      	cmp	r4, r9
 8000d14:	46c2      	mov	sl, r8
 8000d16:	464b      	mov	r3, r9
 8000d18:	d354      	bcc.n	8000dc4 <__udivmoddi4+0x298>
 8000d1a:	d051      	beq.n	8000dc0 <__udivmoddi4+0x294>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d069      	beq.n	8000df4 <__udivmoddi4+0x2c8>
 8000d20:	ebb1 050a 	subs.w	r5, r1, sl
 8000d24:	eb64 0403 	sbc.w	r4, r4, r3
 8000d28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d2c:	40fd      	lsrs	r5, r7
 8000d2e:	40fc      	lsrs	r4, r7
 8000d30:	ea4c 0505 	orr.w	r5, ip, r5
 8000d34:	e9c6 5400 	strd	r5, r4, [r6]
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e747      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f703 	lsr.w	r7, r0, r3
 8000d44:	4095      	lsls	r5, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d52:	4338      	orrs	r0, r7
 8000d54:	0c01      	lsrs	r1, r0, #16
 8000d56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5a:	fa1f f885 	uxth.w	r8, r5
 8000d5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d66:	fb07 f308 	mul.w	r3, r7, r8
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x256>
 8000d72:	1869      	adds	r1, r5, r1
 8000d74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d78:	d22f      	bcs.n	8000dda <__udivmoddi4+0x2ae>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d92d      	bls.n	8000dda <__udivmoddi4+0x2ae>
 8000d7e:	3f02      	subs	r7, #2
 8000d80:	4429      	add	r1, r5
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	b281      	uxth	r1, r0
 8000d86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d92:	fb00 f308 	mul.w	r3, r0, r8
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x27e>
 8000d9a:	1869      	adds	r1, r5, r1
 8000d9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da0:	d217      	bcs.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d915      	bls.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4429      	add	r1, r5
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db0:	e73b      	b.n	8000c2a <__udivmoddi4+0xfe>
 8000db2:	4637      	mov	r7, r6
 8000db4:	4630      	mov	r0, r6
 8000db6:	e709      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db8:	4607      	mov	r7, r0
 8000dba:	e6e7      	b.n	8000b8c <__udivmoddi4+0x60>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6fb      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dc0:	4541      	cmp	r1, r8
 8000dc2:	d2ab      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dc8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dcc:	3801      	subs	r0, #1
 8000dce:	4613      	mov	r3, r2
 8000dd0:	e7a4      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd2:	4660      	mov	r0, ip
 8000dd4:	e7e9      	b.n	8000daa <__udivmoddi4+0x27e>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	e795      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000dda:	4667      	mov	r7, ip
 8000ddc:	e7d1      	b.n	8000d82 <__udivmoddi4+0x256>
 8000dde:	4681      	mov	r9, r0
 8000de0:	e77c      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	442c      	add	r4, r5
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0x14c>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	442b      	add	r3, r5
 8000dee:	e72f      	b.n	8000c50 <__udivmoddi4+0x124>
 8000df0:	4638      	mov	r0, r7
 8000df2:	e708      	b.n	8000c06 <__udivmoddi4+0xda>
 8000df4:	4637      	mov	r7, r6
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0xa0>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <Serial_Init>:
  */

#include "communication.h"

void Serial_Init()
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, data, 4);
 8000e00:	2204      	movs	r2, #4
 8000e02:	4903      	ldr	r1, [pc, #12]	; (8000e10 <Serial_Init+0x14>)
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <Serial_Init+0x18>)
 8000e06:	f005 f8d1 	bl	8005fac <HAL_UART_Receive_IT>
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000204 	.word	0x20000204
 8000e14:	20000460 	.word	0x20000460

08000e18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_UART_RxCpltCallback+0x30>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d109      	bne.n	8000e3e <HAL_UART_RxCpltCallback+0x26>
	{
		sscanf(data,"%d", &reference); //read data from buffer and put to reference value
 8000e2a:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_UART_RxCpltCallback+0x34>)
 8000e2c:	4908      	ldr	r1, [pc, #32]	; (8000e50 <HAL_UART_RxCpltCallback+0x38>)
 8000e2e:	4809      	ldr	r0, [pc, #36]	; (8000e54 <HAL_UART_RxCpltCallback+0x3c>)
 8000e30:	f006 f858 	bl	8006ee4 <siscanf>
		HAL_UART_Receive_IT(&huart3, data, 4);
 8000e34:	2204      	movs	r2, #4
 8000e36:	4907      	ldr	r1, [pc, #28]	; (8000e54 <HAL_UART_RxCpltCallback+0x3c>)
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <HAL_UART_RxCpltCallback+0x40>)
 8000e3a:	f005 f8b7 	bl	8005fac <HAL_UART_Receive_IT>
	}
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40004800 	.word	0x40004800
 8000e4c:	200002cc 	.word	0x200002cc
 8000e50:	08008094 	.word	0x08008094
 8000e54:	20000204 	.word	0x20000204
 8000e58:	20000460 	.word	0x20000460

08000e5c <app_conmunication>:

void app_conmunication(int app_value)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	  char buffer [4];
	  int n=sprintf (buffer, "%d", app_value);
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	4908      	ldr	r1, [pc, #32]	; (8000e8c <app_conmunication+0x30>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f006 f819 	bl	8006ea4 <siprintf>
 8000e72:	60f8      	str	r0, [r7, #12]
	  HAL_UART_Transmit_IT(&huart3, (uint8_t*)buffer, n);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4804      	ldr	r0, [pc, #16]	; (8000e90 <app_conmunication+0x34>)
 8000e80:	f005 f838 	bl	8005ef4 <HAL_UART_Transmit_IT>
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	08008094 	.word	0x08008094
 8000e90:	20000460 	.word	0x20000460

08000e94 <PID_Init>:
/**
  * @brief Initialize PID
  * @retval None
  */
void PID_Init()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	/* Giving parameters for PID */
	PID.Kp = PID_PARAM_KP;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <PID_Init+0x24>)
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <PID_Init+0x28>)
 8000e9c:	619a      	str	r2, [r3, #24]
	PID.Ki = PID_PARAM_KI;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <PID_Init+0x24>)
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <PID_Init+0x28>)
 8000ea2:	61da      	str	r2, [r3, #28]
	PID.Kd = PID_PARAM_KD;
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <PID_Init+0x24>)
 8000ea6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000eaa:	621a      	str	r2, [r3, #32]

	/* Initialize PID */
	arm_pid_init_f32(&PID, 1);
 8000eac:	2101      	movs	r1, #1
 8000eae:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <PID_Init+0x24>)
 8000eb0:	f000 f912 	bl	80010d8 <arm_pid_init_f32>
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200002d0 	.word	0x200002d0
 8000ebc:	41200000 	.word	0x41200000

08000ec0 <PID_GetDutyCycle>:
  * @param measurement value measured from sensor
  * @param reference value set by user
  * @retval duty_cycle
  */
float PID_GetDutyCycle(float measurement, float reference)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eca:	edc7 0a00 	vstr	s1, [r7]
	float pid_error = reference - measurement;
 8000ece:	ed97 7a00 	vldr	s14, [r7]
 8000ed2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eda:	edc7 7a07 	vstr	s15, [r7, #28]
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <PID_GetDutyCycle+0x98>)
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	ed93 7a00 	vldr	s14, [r3]
 8000eec:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ef0:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	edd3 6a01 	vldr	s13, [r3, #4]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000f04:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f26:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
	float duty_cycle = arm_pid_f32(&PID, pid_error);
 8000f40:	61bb      	str	r3, [r7, #24]
	return duty_cycle;
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	ee07 3a90 	vmov	s15, r3
}
 8000f48:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200002d0 	.word	0x200002d0

08000f5c <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_DAC_Init+0x4c>)
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <MX_DAC_Init+0x50>)
 8000f6e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <MX_DAC_Init+0x4c>)
 8000f72:	f001 fb08 	bl	8002586 <HAL_DAC_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f7c:	f000 fcba 	bl	80018f4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <MX_DAC_Init+0x4c>)
 8000f90:	f001 fb1b 	bl	80025ca <HAL_DAC_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f9a:	f000 fcab 	bl	80018f4 <Error_Handler>
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000268 	.word	0x20000268
 8000fac:	40007400 	.word	0x40007400

08000fb0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a2e      	ldr	r2, [pc, #184]	; (8001088 <HAL_DAC_MspInit+0xd8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d155      	bne.n	800107e <HAL_DAC_MspInit+0xce>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fd2:	4b2e      	ldr	r3, [pc, #184]	; (800108c <HAL_DAC_MspInit+0xdc>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a2d      	ldr	r2, [pc, #180]	; (800108c <HAL_DAC_MspInit+0xdc>)
 8000fd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b2b      	ldr	r3, [pc, #172]	; (800108c <HAL_DAC_MspInit+0xdc>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <HAL_DAC_MspInit+0xdc>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a27      	ldr	r2, [pc, #156]	; (800108c <HAL_DAC_MspInit+0xdc>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b25      	ldr	r3, [pc, #148]	; (800108c <HAL_DAC_MspInit+0xdc>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = OSC_AOUT_Pin;
 8001002:	2310      	movs	r3, #16
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001006:	2303      	movs	r3, #3
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OSC_AOUT_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	481e      	ldr	r0, [pc, #120]	; (8001090 <HAL_DAC_MspInit+0xe0>)
 8001016:	f001 fe2f 	bl	8002c78 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <HAL_DAC_MspInit+0xe4>)
 800101c:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <HAL_DAC_MspInit+0xe8>)
 800101e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_DAC_MspInit+0xe4>)
 8001022:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001026:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_DAC_MspInit+0xe4>)
 800102a:	2240      	movs	r2, #64	; 0x40
 800102c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_DAC_MspInit+0xe4>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <HAL_DAC_MspInit+0xe4>)
 8001036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800103a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_DAC_MspInit+0xe4>)
 800103e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001042:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <HAL_DAC_MspInit+0xe4>)
 8001046:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800104a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_DAC_MspInit+0xe4>)
 800104e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001052:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <HAL_DAC_MspInit+0xe4>)
 8001056:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800105a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_DAC_MspInit+0xe4>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <HAL_DAC_MspInit+0xe4>)
 8001064:	f001 fafe 	bl	8002664 <HAL_DMA_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 800106e:	f000 fc41 	bl	80018f4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_DAC_MspInit+0xe4>)
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_DAC_MspInit+0xe4>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40007400 	.word	0x40007400
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000
 8001094:	20000208 	.word	0x20000208
 8001098:	40026088 	.word	0x40026088

0800109c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_DMA_Init+0x38>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <MX_DMA_Init+0x38>)
 80010a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_DMA_Init+0x38>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2010      	movs	r0, #16
 80010c0:	f001 fa2b 	bl	800251a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010c4:	2010      	movs	r0, #16
 80010c6:	f001 fa44 	bl	8002552 <HAL_NVIC_EnableIRQ>

}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	ed93 7a06 	vldr	s14, [r3, #24]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	edd3 7a07 	vldr	s15, [r3, #28]
 80010ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	edd3 7a08 	vldr	s15, [r3, #32]
 80010f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	edd3 7a06 	vldr	s15, [r3, #24]
 8001108:	eeb1 7a67 	vneg.f32	s14, s15
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001112:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001116:	ee77 7a67 	vsub.f32	s15, s14, s15
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a1a      	ldr	r2, [r3, #32]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if(resetStateFlag)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d006      	beq.n	800113c <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3u * sizeof(float32_t));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	330c      	adds	r3, #12
 8001132:	220c      	movs	r2, #12
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f005 feac 	bl	8006e94 <memset>
  }

}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08e      	sub	sp, #56	; 0x38
 8001148:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800115a:	4bb3      	ldr	r3, [pc, #716]	; (8001428 <MX_GPIO_Init+0x2e4>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4ab2      	ldr	r2, [pc, #712]	; (8001428 <MX_GPIO_Init+0x2e4>)
 8001160:	f043 0310 	orr.w	r3, r3, #16
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4bb0      	ldr	r3, [pc, #704]	; (8001428 <MX_GPIO_Init+0x2e4>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	623b      	str	r3, [r7, #32]
 8001170:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	4bad      	ldr	r3, [pc, #692]	; (8001428 <MX_GPIO_Init+0x2e4>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4aac      	ldr	r2, [pc, #688]	; (8001428 <MX_GPIO_Init+0x2e4>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4baa      	ldr	r3, [pc, #680]	; (8001428 <MX_GPIO_Init+0x2e4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800118a:	4ba7      	ldr	r3, [pc, #668]	; (8001428 <MX_GPIO_Init+0x2e4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4aa6      	ldr	r2, [pc, #664]	; (8001428 <MX_GPIO_Init+0x2e4>)
 8001190:	f043 0320 	orr.w	r3, r3, #32
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4ba4      	ldr	r3, [pc, #656]	; (8001428 <MX_GPIO_Init+0x2e4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0320 	and.w	r3, r3, #32
 800119e:	61bb      	str	r3, [r7, #24]
 80011a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a2:	4ba1      	ldr	r3, [pc, #644]	; (8001428 <MX_GPIO_Init+0x2e4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4aa0      	ldr	r2, [pc, #640]	; (8001428 <MX_GPIO_Init+0x2e4>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b9e      	ldr	r3, [pc, #632]	; (8001428 <MX_GPIO_Init+0x2e4>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4b9b      	ldr	r3, [pc, #620]	; (8001428 <MX_GPIO_Init+0x2e4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a9a      	ldr	r2, [pc, #616]	; (8001428 <MX_GPIO_Init+0x2e4>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b98      	ldr	r3, [pc, #608]	; (8001428 <MX_GPIO_Init+0x2e4>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	4b95      	ldr	r3, [pc, #596]	; (8001428 <MX_GPIO_Init+0x2e4>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a94      	ldr	r2, [pc, #592]	; (8001428 <MX_GPIO_Init+0x2e4>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b92      	ldr	r3, [pc, #584]	; (8001428 <MX_GPIO_Init+0x2e4>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ea:	4b8f      	ldr	r3, [pc, #572]	; (8001428 <MX_GPIO_Init+0x2e4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a8e      	ldr	r2, [pc, #568]	; (8001428 <MX_GPIO_Init+0x2e4>)
 80011f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b8c      	ldr	r3, [pc, #560]	; (8001428 <MX_GPIO_Init+0x2e4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001202:	4b89      	ldr	r3, [pc, #548]	; (8001428 <MX_GPIO_Init+0x2e4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a88      	ldr	r2, [pc, #544]	; (8001428 <MX_GPIO_Init+0x2e4>)
 8001208:	f043 0308 	orr.w	r3, r3, #8
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b86      	ldr	r3, [pc, #536]	; (8001428 <MX_GPIO_Init+0x2e4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin, GPIO_PIN_SET);
 800121a:	2201      	movs	r2, #1
 800121c:	2118      	movs	r1, #24
 800121e:	4883      	ldr	r0, [pc, #524]	; (800142c <MX_GPIO_Init+0x2e8>)
 8001220:	f001 fed4 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DISP_F_Pin|DISP_E_Pin|DISP_2_Pin|DISP_1_Pin
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 800122a:	4881      	ldr	r0, [pc, #516]	; (8001430 <MX_GPIO_Init+0x2ec>)
 800122c:	f001 fece 	bl	8002fcc <HAL_GPIO_WritePin>
                          |DISP_3_Pin|DISP_D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISP_H_Pin|LCD_RS_Pin|LAMP_TRIAC_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2149      	movs	r1, #73	; 0x49
 8001234:	487f      	ldr	r0, [pc, #508]	; (8001434 <MX_GPIO_Init+0x2f0>)
 8001236:	f001 fec9 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2108      	movs	r1, #8
 800123e:	487e      	ldr	r0, [pc, #504]	; (8001438 <MX_GPIO_Init+0x2f4>)
 8001240:	f001 fec4 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 8001244:	2200      	movs	r2, #0
 8001246:	f644 4181 	movw	r1, #19585	; 0x4c81
 800124a:	487c      	ldr	r0, [pc, #496]	; (800143c <MX_GPIO_Init+0x2f8>)
 800124c:	f001 febe 	bl	8002fcc <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISP_A_Pin|DISP_4_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2143      	movs	r1, #67	; 0x43
 8001254:	487a      	ldr	r0, [pc, #488]	; (8001440 <MX_GPIO_Init+0x2fc>)
 8001256:	f001 feb9 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1EX_GPIO_Port, LD1EX_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001260:	4872      	ldr	r0, [pc, #456]	; (800142c <MX_GPIO_Init+0x2e8>)
 8001262:	f001 feb3 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISP_C_Pin|DISP_B_Pin|DISP_G_Pin|LCD_D4_Pin
 8001266:	2200      	movs	r2, #0
 8001268:	21fb      	movs	r1, #251	; 0xfb
 800126a:	4876      	ldr	r0, [pc, #472]	; (8001444 <MX_GPIO_Init+0x300>)
 800126c:	f001 feae 	bl	8002fcc <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin;
 8001270:	2318      	movs	r3, #24
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	4869      	ldr	r0, [pc, #420]	; (800142c <MX_GPIO_Init+0x2e8>)
 8001288:	f001 fcf6 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800128c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001292:	4b6d      	ldr	r3, [pc, #436]	; (8001448 <MX_GPIO_Init+0x304>)
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	4619      	mov	r1, r3
 80012a0:	4864      	ldr	r0, [pc, #400]	; (8001434 <MX_GPIO_Init+0x2f0>)
 80012a2:	f001 fce9 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = DISP_F_Pin|DISP_E_Pin|DISP_D_Pin;
 80012a6:	f44f 6385 	mov.w	r3, #1064	; 0x428
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012ac:	2311      	movs	r3, #17
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012bc:	4619      	mov	r1, r3
 80012be:	485c      	ldr	r0, [pc, #368]	; (8001430 <MX_GPIO_Init+0x2ec>)
 80012c0:	f001 fcda 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = DISP_2_Pin|DISP_1_Pin|DISP_3_Pin;
 80012c4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012da:	4619      	mov	r1, r3
 80012dc:	4854      	ldr	r0, [pc, #336]	; (8001430 <MX_GPIO_Init+0x2ec>)
 80012de:	f001 fccb 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISP_H_Pin;
 80012e2:	2301      	movs	r3, #1
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012e6:	2311      	movs	r3, #17
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DISP_H_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f6:	4619      	mov	r1, r3
 80012f8:	484e      	ldr	r0, [pc, #312]	; (8001434 <MX_GPIO_Init+0x2f0>)
 80012fa:	f001 fcbd 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012fe:	2332      	movs	r3, #50	; 0x32
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800130e:	230b      	movs	r3, #11
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001316:	4619      	mov	r1, r3
 8001318:	4846      	ldr	r0, [pc, #280]	; (8001434 <MX_GPIO_Init+0x2f0>)
 800131a:	f001 fcad 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POT1_AIN_Pin;
 800131e:	2304      	movs	r3, #4
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001322:	2303      	movs	r3, #3
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(POT1_AIN_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132e:	4619      	mov	r1, r3
 8001330:	4840      	ldr	r0, [pc, #256]	; (8001434 <MX_GPIO_Init+0x2f0>)
 8001332:	f001 fca1 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8001336:	2308      	movs	r3, #8
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	4839      	ldr	r0, [pc, #228]	; (8001434 <MX_GPIO_Init+0x2f0>)
 800134e:	f001 fc93 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001352:	2306      	movs	r3, #6
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001362:	230b      	movs	r3, #11
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	4619      	mov	r1, r3
 800136c:	4832      	ldr	r0, [pc, #200]	; (8001438 <MX_GPIO_Init+0x2f4>)
 800136e:	f001 fc83 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 8001372:	2308      	movs	r3, #8
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001386:	4619      	mov	r1, r3
 8001388:	482b      	ldr	r0, [pc, #172]	; (8001438 <MX_GPIO_Init+0x2f4>)
 800138a:	f001 fc75 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX1_Btn_Pin;
 800138e:	2320      	movs	r3, #32
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <MX_GPIO_Init+0x308>)
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX1_Btn_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	4619      	mov	r1, r3
 80013a0:	4825      	ldr	r0, [pc, #148]	; (8001438 <MX_GPIO_Init+0x2f4>)
 80013a2:	f001 fc69 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 80013a6:	f644 4381 	movw	r3, #19585	; 0x4c81
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013bc:	4619      	mov	r1, r3
 80013be:	481f      	ldr	r0, [pc, #124]	; (800143c <MX_GPIO_Init+0x2f8>)
 80013c0:	f001 fc5a 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX2_Btn_Pin;
 80013c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_GPIO_Init+0x304>)
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX2_Btn_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d6:	4619      	mov	r1, r3
 80013d8:	4815      	ldr	r0, [pc, #84]	; (8001430 <MX_GPIO_Init+0x2ec>)
 80013da:	f001 fc4d 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISP_A_Pin;
 80013de:	2301      	movs	r3, #1
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013e2:	2311      	movs	r3, #17
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DISP_A_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	4812      	ldr	r0, [pc, #72]	; (8001440 <MX_GPIO_Init+0x2fc>)
 80013f6:	f001 fc3f 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = DISP_4_Pin|USB_PowerSwitchOn_Pin;
 80013fa:	2342      	movs	r3, #66	; 0x42
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800140a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140e:	4619      	mov	r1, r3
 8001410:	480b      	ldr	r0, [pc, #44]	; (8001440 <MX_GPIO_Init+0x2fc>)
 8001412:	f001 fc31 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1EX_Pin;
 8001416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001424:	e014      	b.n	8001450 <MX_GPIO_Init+0x30c>
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40021000 	.word	0x40021000
 8001430:	40021400 	.word	0x40021400
 8001434:	40020800 	.word	0x40020800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400
 8001440:	40021800 	.word	0x40021800
 8001444:	40020c00 	.word	0x40020c00
 8001448:	10110000 	.word	0x10110000
 800144c:	10210000 	.word	0x10210000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD1EX_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001458:	4619      	mov	r1, r3
 800145a:	485a      	ldr	r0, [pc, #360]	; (80015c4 <MX_GPIO_Init+0x480>)
 800145c:	f001 fc0c 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001472:	230b      	movs	r3, #11
 8001474:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	4619      	mov	r1, r3
 800147c:	4852      	ldr	r0, [pc, #328]	; (80015c8 <MX_GPIO_Init+0x484>)
 800147e:	f001 fbfb 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 8001482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001488:	4b50      	ldr	r3, [pc, #320]	; (80015cc <MX_GPIO_Init+0x488>)
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	4619      	mov	r1, r3
 8001496:	484c      	ldr	r0, [pc, #304]	; (80015c8 <MX_GPIO_Init+0x484>)
 8001498:	f001 fbee 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 800149c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a2:	4b4b      	ldr	r3, [pc, #300]	; (80015d0 <MX_GPIO_Init+0x48c>)
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ae:	4619      	mov	r1, r3
 80014b0:	4848      	ldr	r0, [pc, #288]	; (80015d4 <MX_GPIO_Init+0x490>)
 80014b2:	f001 fbe1 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 80014b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4842      	ldr	r0, [pc, #264]	; (80015d4 <MX_GPIO_Init+0x490>)
 80014cc:	f001 fbd4 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	483d      	ldr	r0, [pc, #244]	; (80015d8 <MX_GPIO_Init+0x494>)
 80014e4:	f001 fbc8 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 80014e8:	2340      	movs	r3, #64	; 0x40
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f4:	2302      	movs	r3, #2
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fc:	4619      	mov	r1, r3
 80014fe:	4837      	ldr	r0, [pc, #220]	; (80015dc <MX_GPIO_Init+0x498>)
 8001500:	f001 fbba 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001504:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001516:	230a      	movs	r3, #10
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	4619      	mov	r1, r3
 8001520:	482f      	ldr	r0, [pc, #188]	; (80015e0 <MX_GPIO_Init+0x49c>)
 8001522:	f001 fba9 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152c:	2300      	movs	r3, #0
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	4619      	mov	r1, r3
 800153a:	4829      	ldr	r0, [pc, #164]	; (80015e0 <MX_GPIO_Init+0x49c>)
 800153c:	f001 fb9c 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DISP_C_Pin|DISP_B_Pin|DISP_G_Pin;
 8001540:	230b      	movs	r3, #11
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001544:	2311      	movs	r3, #17
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001548:	2301      	movs	r3, #1
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	481f      	ldr	r0, [pc, #124]	; (80015d4 <MX_GPIO_Init+0x490>)
 8001558:	f001 fb8e 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 800155c:	23f0      	movs	r3, #240	; 0xf0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800156c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001570:	4619      	mov	r1, r3
 8001572:	4818      	ldr	r0, [pc, #96]	; (80015d4 <MX_GPIO_Init+0x490>)
 8001574:	f001 fb80 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001578:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800158a:	230b      	movs	r3, #11
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	4810      	ldr	r0, [pc, #64]	; (80015d8 <MX_GPIO_Init+0x494>)
 8001596:	f001 fb6f 	bl	8002c78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	2017      	movs	r0, #23
 80015a0:	f000 ffbb 	bl	800251a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015a4:	2017      	movs	r0, #23
 80015a6:	f000 ffd4 	bl	8002552 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	2028      	movs	r0, #40	; 0x28
 80015b0:	f000 ffb3 	bl	800251a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015b4:	2028      	movs	r0, #40	; 0x28
 80015b6:	f000 ffcc 	bl	8002552 <HAL_NVIC_EnableIRQ>

}
 80015ba:	bf00      	nop
 80015bc:	3738      	adds	r7, #56	; 0x38
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40020400 	.word	0x40020400
 80015cc:	10110000 	.word	0x10110000
 80015d0:	10210000 	.word	0x10210000
 80015d4:	40020c00 	.word	0x40020c00
 80015d8:	40021800 	.word	0x40021800
 80015dc:	40020800 	.word	0x40020800
 80015e0:	40020000 	.word	0x40020000

080015e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <MX_I2C1_Init+0x74>)
 80015ea:	4a1c      	ldr	r2, [pc, #112]	; (800165c <MX_I2C1_Init+0x78>)
 80015ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_I2C1_Init+0x74>)
 80015f0:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <MX_I2C1_Init+0x7c>)
 80015f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_I2C1_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_I2C1_Init+0x74>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_I2C1_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_I2C1_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_I2C1_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_I2C1_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_I2C1_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800161e:	480e      	ldr	r0, [pc, #56]	; (8001658 <MX_I2C1_Init+0x74>)
 8001620:	f001 fd12 	bl	8003048 <HAL_I2C_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800162a:	f000 f963 	bl	80018f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800162e:	2100      	movs	r1, #0
 8001630:	4809      	ldr	r0, [pc, #36]	; (8001658 <MX_I2C1_Init+0x74>)
 8001632:	f002 f963 	bl	80038fc <HAL_I2CEx_ConfigAnalogFilter>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800163c:	f000 f95a 	bl	80018f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001640:	2100      	movs	r1, #0
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_I2C1_Init+0x74>)
 8001644:	f002 f9a5 	bl	8003992 <HAL_I2CEx_ConfigDigitalFilter>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800164e:	f000 f951 	bl	80018f4 <Error_Handler>
  }

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000027c 	.word	0x2000027c
 800165c:	40005400 	.word	0x40005400
 8001660:	20404768 	.word	0x20404768

08001664 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a17      	ldr	r2, [pc, #92]	; (80016e0 <HAL_I2C_MspInit+0x7c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d128      	bne.n	80016d8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_I2C_MspInit+0x80>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a16      	ldr	r2, [pc, #88]	; (80016e4 <HAL_I2C_MspInit+0x80>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_I2C_MspInit+0x80>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 800169e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a4:	2312      	movs	r3, #18
 80016a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016b0:	2304      	movs	r3, #4
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	480b      	ldr	r0, [pc, #44]	; (80016e8 <HAL_I2C_MspInit+0x84>)
 80016bc:	f001 fadc 	bl	8002c78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_I2C_MspInit+0x80>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_I2C_MspInit+0x80>)
 80016c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ca:	6413      	str	r3, [r2, #64]	; 0x40
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_I2C_MspInit+0x80>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016d8:	bf00      	nop
 80016da:	3728      	adds	r7, #40	; 0x28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40005400 	.word	0x40005400
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020400 	.word	0x40020400

080016ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f0:	f000 fddb 	bl	80022aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f4:	f000 f822 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f8:	f7ff fd24 	bl	8001144 <MX_GPIO_Init>
  MX_DMA_Init();
 80016fc:	f7ff fcce 	bl	800109c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001700:	f000 fd2e 	bl	8002160 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001704:	f000 fad4 	bl	8001cb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001708:	f000 fb28 	bl	8001d5c <MX_TIM3_Init>
  MX_TIM4_Init();
 800170c:	f000 fb9e 	bl	8001e4c <MX_TIM4_Init>
  MX_I2C1_Init();
 8001710:	f7ff ff68 	bl	80015e4 <MX_I2C1_Init>
  MX_SPI4_Init();
 8001714:	f000 f96c 	bl	80019f0 <MX_SPI4_Init>
  MX_DAC_Init();
 8001718:	f7ff fc20 	bl	8000f5c <MX_DAC_Init>
  MX_TIM6_Init();
 800171c:	f000 fbe6 	bl	8001eec <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  Serial_Init();  //Initialize USART/
 8001720:	f7ff fb6c 	bl	8000dfc <Serial_Init>
  BH1750_Init(); //Initialize sensor BH1750
 8001724:	f000 f8ee 	bl	8001904 <BH1750_Init>
  PID_Init(); 	// Initialize PID controller
 8001728:	f7ff fbb4 	bl	8000e94 <PID_Init>
  PWM_Init();  // Initialize PWM
 800172c:	f000 f956 	bl	80019dc <PWM_Init>
  HAL_TIM_Base_Start_IT(&htim4);  //Start timer for control loop period 100ms
 8001730:	4801      	ldr	r0, [pc, #4]	; (8001738 <main+0x4c>)
 8001732:	f003 fb23 	bl	8004d7c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001736:	e7fe      	b.n	8001736 <main+0x4a>
 8001738:	20000360 	.word	0x20000360

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b0b4      	sub	sp, #208	; 0xd0
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001746:	2230      	movs	r2, #48	; 0x30
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f005 fba2 	bl	8006e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	2284      	movs	r2, #132	; 0x84
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f005 fb93 	bl	8006e94 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800176e:	f002 f95d 	bl	8003a2c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	4b3a      	ldr	r3, [pc, #232]	; (800185c <SystemClock_Config+0x120>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	4a39      	ldr	r2, [pc, #228]	; (800185c <SystemClock_Config+0x120>)
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177c:	6413      	str	r3, [r2, #64]	; 0x40
 800177e:	4b37      	ldr	r3, [pc, #220]	; (800185c <SystemClock_Config+0x120>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800178a:	4b35      	ldr	r3, [pc, #212]	; (8001860 <SystemClock_Config+0x124>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a34      	ldr	r2, [pc, #208]	; (8001860 <SystemClock_Config+0x124>)
 8001790:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	4b32      	ldr	r3, [pc, #200]	; (8001860 <SystemClock_Config+0x124>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017be:	2304      	movs	r3, #4
 80017c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80017c4:	23d8      	movs	r3, #216	; 0xd8
 80017c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ca:	2302      	movs	r3, #2
 80017cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80017d0:	2303      	movs	r3, #3
 80017d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017da:	4618      	mov	r0, r3
 80017dc:	f002 f986 	bl	8003aec <HAL_RCC_OscConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80017e6:	f000 f885 	bl	80018f4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017ea:	f002 f92f 	bl	8003a4c <HAL_PWREx_EnableOverDrive>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80017f4:	f000 f87e 	bl	80018f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f8:	230f      	movs	r3, #15
 80017fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fe:	2302      	movs	r3, #2
 8001800:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800180a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800180e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001816:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800181a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800181e:	2107      	movs	r1, #7
 8001820:	4618      	mov	r0, r3
 8001822:	f002 fc07 	bl	8004034 <HAL_RCC_ClockConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800182c:	f000 f862 	bl	80018f4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8001830:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001834:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001836:	2300      	movs	r3, #0
 8001838:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800183a:	2300      	movs	r3, #0
 800183c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4618      	mov	r0, r3
 8001844:	f002 fdee 	bl	8004424 <HAL_RCCEx_PeriphCLKConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0x116>
  {
    Error_Handler();
 800184e:	f000 f851 	bl	80018f4 <Error_Handler>
  }
}
 8001852:	bf00      	nop
 8001854:	37d0      	adds	r7, #208	; 0xd0
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40007000 	.word	0x40007000

08001864 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d12f      	bne.n	80018d6 <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		measurement = BH1750_Read();		//Getting measurement from sensor BH1750
 8001876:	f000 f865 	bl	8001944 <BH1750_Read>
 800187a:	eef0 7a40 	vmov.f32	s15, s0
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001880:	edc3 7a00 	vstr	s15, [r3]
		swv = (int)measurement;		// Converting measured value from float to integer for SWV plotting
 8001884:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001886:	edd3 7a00 	vldr	s15, [r3]
 800188a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800188e:	ee17 2a90 	vmov	r2, s15
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001894:	601a      	str	r2, [r3, #0]
		duty_cycle = PID_GetDutyCycle(measurement, reference);		// Getting error/duty from PID controller
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x88>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	ee07 3a10 	vmov	s14, r3
 80018a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018a8:	eef0 0a47 	vmov.f32	s1, s14
 80018ac:	eeb0 0a67 	vmov.f32	s0, s15
 80018b0:	f7ff fb06 	bl	8000ec0 <PID_GetDutyCycle>
 80018b4:	eef0 7a40 	vmov.f32	s15, s0
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80018ba:	edc3 7a00 	vstr	s15, [r3]
		PWM_SetDutyCycle(duty_cycle);	// Setting duty_cycle of PWM
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	eeb0 0a67 	vmov.f32	s0, s15
 80018c8:	f000 f86c 	bl	80019a4 <PWM_SetDutyCycle>
		//percentage = duty_cycle/800;
		//Giving value to application////
		//if(counter == 25)
		//{
			app_conmunication(swv);
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fac3 	bl	8000e5c <app_conmunication>
			//counter = 0;
		//}
		//counter++;
		////////////////////////////////
	}
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40000800 	.word	0x40000800
 80018e4:	200002f8 	.word	0x200002f8
 80018e8:	200002c8 	.word	0x200002c8
 80018ec:	200002cc 	.word	0x200002cc
 80018f0:	200002f4 	.word	0x200002f4

080018f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <BH1750_Init>:
/**
  * @brief Initialize sensor BH1750
  * @retval None
  */
void BH1750_Init()
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af02      	add	r7, sp, #8
	uint8_t tmp;

	tmp = BH1750_POWER_ON;	// Power On sensor
 800190a:	2301      	movs	r3, #1
 800190c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, BH1750_ADDRESS, &tmp, 1, 0xffff);
 800190e:	1dfa      	adds	r2, r7, #7
 8001910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2301      	movs	r3, #1
 8001918:	2146      	movs	r1, #70	; 0x46
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <BH1750_Init+0x3c>)
 800191c:	f001 fc24 	bl	8003168 <HAL_I2C_Master_Transmit>

	tmp = BH1750_CONTINOUS_H_RES_MODE;	// Select sensor measurement mode
 8001920:	2310      	movs	r3, #16
 8001922:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, BH1750_ADDRESS, &tmp, 1, 0xffff);
 8001924:	1dfa      	adds	r2, r7, #7
 8001926:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	2146      	movs	r1, #70	; 0x46
 8001930:	4803      	ldr	r0, [pc, #12]	; (8001940 <BH1750_Init+0x3c>)
 8001932:	f001 fc19 	bl	8003168 <HAL_I2C_Master_Transmit>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000027c 	.word	0x2000027c

08001944 <BH1750_Read>:
/**
  * @brief Read value from sensor BH1750
  * @retval Measured luminous intensity in lux
  */
float BH1750_Read()
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b085      	sub	sp, #20
 8001948:	af02      	add	r7, sp, #8
	float brightness = 0; //brightness in LUX
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	607b      	str	r3, [r7, #4]
	uint8_t buff[2];

	HAL_I2C_Master_Receive(&hi2c1, BH1750_ADDRESS, buff, 2, 0xffff);	//Read value from sensor,
 8001950:	463a      	mov	r2, r7
 8001952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2302      	movs	r3, #2
 800195a:	2146      	movs	r1, #70	; 0x46
 800195c:	480f      	ldr	r0, [pc, #60]	; (800199c <BH1750_Read+0x58>)
 800195e:	f001 fcf7 	bl	8003350 <HAL_I2C_Master_Receive>

	brightness = ((buff[0]<<8) | buff[1]) / 1.2;	// Convert value to LUX, in lower bytes
 8001962:	783b      	ldrb	r3, [r7, #0]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	787a      	ldrb	r2, [r7, #1]
 8001968:	4313      	orrs	r3, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fdfa 	bl	8000564 <__aeabi_i2d>
 8001970:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <BH1750_Read+0x5c>)
 8001976:	f7fe ff89 	bl	800088c <__aeabi_ddiv>
 800197a:	4603      	mov	r3, r0
 800197c:	460c      	mov	r4, r1
 800197e:	4618      	mov	r0, r3
 8001980:	4621      	mov	r1, r4
 8001982:	f7ff f86b 	bl	8000a5c <__aeabi_d2f>
 8001986:	4603      	mov	r3, r0
 8001988:	607b      	str	r3, [r7, #4]
 * 1000_0011
 * 1001_0000
 * 1000001110010000=LUX
 */

	return brightness;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	ee07 3a90 	vmov	s15, r3
}
 8001990:	eeb0 0a67 	vmov.f32	s0, s15
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}
 800199a:	bf00      	nop
 800199c:	2000027c 	.word	0x2000027c
 80019a0:	3ff33333 	.word	0x3ff33333

080019a4 <PWM_SetDutyCycle>:
/**
  * @brief Set PWM duty
  * @retval None
  */
void PWM_SetDutyCycle(float duty_cycle)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	ed87 0a01 	vstr	s0, [r7, #4]
	TIM3 -> CCR2 = duty_cycle/100; // timer 3, channel 2,
 80019ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80019b2:	eddf 6a08 	vldr	s13, [pc, #32]	; 80019d4 <PWM_SetDutyCycle+0x30>
 80019b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <PWM_SetDutyCycle+0x34>)
 80019bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c0:	ee17 2a90 	vmov	r2, s15
 80019c4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	42c80000 	.word	0x42c80000
 80019d8:	40000400 	.word	0x40000400

080019dc <PWM_Init>:
/**
  * @brief Initialize PWM
  * @retval None
  */
void PWM_Init()
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80019e0:	2104      	movs	r1, #4
 80019e2:	4802      	ldr	r0, [pc, #8]	; (80019ec <PWM_Init+0x10>)
 80019e4:	f003 fa2a 	bl	8004e3c <HAL_TIM_PWM_Start>
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200003a0 	.word	0x200003a0

080019f0 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <MX_SPI4_Init+0x74>)
 80019f6:	4a1c      	ldr	r2, [pc, #112]	; (8001a68 <MX_SPI4_Init+0x78>)
 80019f8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MX_SPI4_Init+0x74>)
 80019fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a00:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <MX_SPI4_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <MX_SPI4_Init+0x74>)
 8001a0a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a0e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_SPI4_Init+0x74>)
 8001a12:	2202      	movs	r2, #2
 8001a14:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <MX_SPI4_Init+0x74>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_SPI4_Init+0x74>)
 8001a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a22:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_SPI4_Init+0x74>)
 8001a26:	2218      	movs	r2, #24
 8001a28:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_SPI4_Init+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <MX_SPI4_Init+0x74>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <MX_SPI4_Init+0x74>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_SPI4_Init+0x74>)
 8001a3e:	2207      	movs	r2, #7
 8001a40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <MX_SPI4_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MX_SPI4_Init+0x74>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001a4e:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_SPI4_Init+0x74>)
 8001a50:	f003 f8d6 	bl	8004c00 <HAL_SPI_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001a5a:	f7ff ff4b 	bl	80018f4 <Error_Handler>
  }

}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200002fc 	.word	0x200002fc
 8001a68:	40013400 	.word	0x40013400

08001a6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <HAL_SPI_MspInit+0x7c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d127      	bne.n	8001ade <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <HAL_SPI_MspInit+0x80>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	4a16      	ldr	r2, [pc, #88]	; (8001aec <HAL_SPI_MspInit+0x80>)
 8001a94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a98:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <HAL_SPI_MspInit+0x80>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_SPI_MspInit+0x80>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a10      	ldr	r2, [pc, #64]	; (8001aec <HAL_SPI_MspInit+0x80>)
 8001aac:	f043 0310 	orr.w	r3, r3, #16
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_SPI_MspInit+0x80>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SCK_Pin|BMP280_MISO_Pin|BMP280_MOSI_Pin;
 8001abe:	2364      	movs	r3, #100	; 0x64
 8001ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001ace:	2305      	movs	r3, #5
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <HAL_SPI_MspInit+0x84>)
 8001ada:	f001 f8cd 	bl	8002c78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001ade:	bf00      	nop
 8001ae0:	3728      	adds	r7, #40	; 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40013400 	.word	0x40013400
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_MspInit+0x44>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <HAL_MspInit+0x44>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <HAL_MspInit+0x44>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_MspInit+0x44>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <HAL_MspInit+0x44>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_MspInit+0x44>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <NMI_Handler+0x4>

08001b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <MemManage_Handler+0x4>

08001b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b88:	f000 fbcc 	bl	8002324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <DMA1_Stream5_IRQHandler+0x10>)
 8001b96:	f000 fe35 	bl	8002804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000208 	.word	0x20000208

08001ba4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001ba8:	2020      	movs	r0, #32
 8001baa:	f001 fa29 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <TIM2_IRQHandler+0x10>)
 8001bba:	f003 f9c9 	bl	8004f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000420 	.word	0x20000420

08001bc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <TIM4_IRQHandler+0x10>)
 8001bce:	f003 f9bf 	bl	8004f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000360 	.word	0x20000360

08001bdc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <USART3_IRQHandler+0x10>)
 8001be2:	f004 fa85 	bl	80060f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000460 	.word	0x20000460

08001bf0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001bf4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001bf8:	f001 fa02 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001bfc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c00:	f001 f9fe 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001c04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c08:	f001 f9fa 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001c0c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c10:	f001 f9f6 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <_sbrk+0x5c>)
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <_sbrk+0x60>)
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <_sbrk+0x64>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <_sbrk+0x68>)
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d207      	bcs.n	8001c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c48:	f005 f8fa 	bl	8006e40 <__errno>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	230c      	movs	r3, #12
 8001c50:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	e009      	b.n	8001c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <_sbrk+0x64>)
 8001c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20050000 	.word	0x20050000
 8001c78:	00000400 	.word	0x00000400
 8001c7c:	200001f8 	.word	0x200001f8
 8001c80:	200004e8 	.word	0x200004e8

08001c84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <SystemInit+0x28>)
 8001c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c8e:	4a07      	ldr	r2, [pc, #28]	; (8001cac <SystemInit+0x28>)
 8001c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <SystemInit+0x28>)
 8001c9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c9e:	609a      	str	r2, [r3, #8]
#endif
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cb6:	f107 0310 	add.w	r3, r7, #16
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001cce:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <MX_TIM2_Init+0xa8>)
 8001cd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8001cd6:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <MX_TIM2_Init+0xa8>)
 8001cd8:	226b      	movs	r2, #107	; 0x6b
 8001cda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <MX_TIM2_Init+0xa8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <MX_TIM2_Init+0xa8>)
 8001ce4:	f241 3287 	movw	r2, #4999	; 0x1387
 8001ce8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <MX_TIM2_Init+0xa8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <MX_TIM2_Init+0xa8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cf6:	4818      	ldr	r0, [pc, #96]	; (8001d58 <MX_TIM2_Init+0xa8>)
 8001cf8:	f003 f814 	bl	8004d24 <HAL_TIM_Base_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d02:	f7ff fdf7 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	4619      	mov	r1, r3
 8001d12:	4811      	ldr	r0, [pc, #68]	; (8001d58 <MX_TIM2_Init+0xa8>)
 8001d14:	f003 fb54 	bl	80053c0 <HAL_TIM_ConfigClockSource>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d1e:	f7ff fde9 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8001d22:	2108      	movs	r1, #8
 8001d24:	480c      	ldr	r0, [pc, #48]	; (8001d58 <MX_TIM2_Init+0xa8>)
 8001d26:	f003 f8cd 	bl	8004ec4 <HAL_TIM_OnePulse_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001d30:	f7ff fde0 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d34:	2300      	movs	r3, #0
 8001d36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_TIM2_Init+0xa8>)
 8001d42:	f003 ffdd 	bl	8005d00 <HAL_TIMEx_MasterConfigSynchronization>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001d4c:	f7ff fdd2 	bl	80018f4 <Error_Handler>
  }

}
 8001d50:	bf00      	nop
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000420 	.word	0x20000420

08001d5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08e      	sub	sp, #56	; 0x38
 8001d60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	615a      	str	r2, [r3, #20]
 8001d8c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001d8e:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001d90:	4a2d      	ldr	r2, [pc, #180]	; (8001e48 <MX_TIM3_Init+0xec>)
 8001d92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001da0:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001da2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001da6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da8:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dae:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001db4:	4823      	ldr	r0, [pc, #140]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001db6:	f002 ffb5 	bl	8004d24 <HAL_TIM_Base_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001dc0:	f7ff fd98 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dce:	4619      	mov	r1, r3
 8001dd0:	481c      	ldr	r0, [pc, #112]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001dd2:	f003 faf5 	bl	80053c0 <HAL_TIM_ConfigClockSource>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001ddc:	f7ff fd8a 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001de0:	4818      	ldr	r0, [pc, #96]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001de2:	f002 fff5 	bl	8004dd0 <HAL_TIM_PWM_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001dec:	f7ff fd82 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4811      	ldr	r0, [pc, #68]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001e00:	f003 ff7e 	bl	8005d00 <HAL_TIMEx_MasterConfigSynchronization>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001e0a:	f7ff fd73 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e0e:	2360      	movs	r3, #96	; 0x60
 8001e10:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e1e:	463b      	mov	r3, r7
 8001e20:	2204      	movs	r2, #4
 8001e22:	4619      	mov	r1, r3
 8001e24:	4807      	ldr	r0, [pc, #28]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001e26:	f003 f9b3 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001e30:	f7ff fd60 	bl	80018f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001e34:	4803      	ldr	r0, [pc, #12]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001e36:	f000 f95b 	bl	80020f0 <HAL_TIM_MspPostInit>

}
 8001e3a:	bf00      	nop
 8001e3c:	3738      	adds	r7, #56	; 0x38
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200003a0 	.word	0x200003a0
 8001e48:	40000400 	.word	0x40000400

08001e4c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <MX_TIM4_Init+0x98>)
 8001e6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ee8 <MX_TIM4_Init+0x9c>)
 8001e6e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <MX_TIM4_Init+0x98>)
 8001e72:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001e76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e78:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <MX_TIM4_Init+0x98>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <MX_TIM4_Init+0x98>)
 8001e80:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <MX_TIM4_Init+0x98>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <MX_TIM4_Init+0x98>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e92:	4814      	ldr	r0, [pc, #80]	; (8001ee4 <MX_TIM4_Init+0x98>)
 8001e94:	f002 ff46 	bl	8004d24 <HAL_TIM_Base_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001e9e:	f7ff fd29 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	4619      	mov	r1, r3
 8001eae:	480d      	ldr	r0, [pc, #52]	; (8001ee4 <MX_TIM4_Init+0x98>)
 8001eb0:	f003 fa86 	bl	80053c0 <HAL_TIM_ConfigClockSource>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001eba:	f7ff fd1b 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4806      	ldr	r0, [pc, #24]	; (8001ee4 <MX_TIM4_Init+0x98>)
 8001ecc:	f003 ff18 	bl	8005d00 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001ed6:	f7ff fd0d 	bl	80018f4 <Error_Handler>
  }

}
 8001eda:	bf00      	nop
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000360 	.word	0x20000360
 8001ee8:	40000800 	.word	0x40000800

08001eec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <MX_TIM6_Init+0x64>)
 8001efe:	4a15      	ldr	r2, [pc, #84]	; (8001f54 <MX_TIM6_Init+0x68>)
 8001f00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 107;
 8001f02:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <MX_TIM6_Init+0x64>)
 8001f04:	226b      	movs	r2, #107	; 0x6b
 8001f06:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <MX_TIM6_Init+0x64>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <MX_TIM6_Init+0x64>)
 8001f10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f14:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <MX_TIM6_Init+0x64>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f1c:	480c      	ldr	r0, [pc, #48]	; (8001f50 <MX_TIM6_Init+0x64>)
 8001f1e:	f002 ff01 	bl	8004d24 <HAL_TIM_Base_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001f28:	f7ff fce4 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	4619      	mov	r1, r3
 8001f38:	4805      	ldr	r0, [pc, #20]	; (8001f50 <MX_TIM6_Init+0x64>)
 8001f3a:	f003 fee1 	bl	8005d00 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001f44:	f7ff fcd6 	bl	80018f4 <Error_Handler>
  }

}
 8001f48:	bf00      	nop
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200003e0 	.word	0x200003e0
 8001f54:	40001000 	.word	0x40001000

08001f58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08e      	sub	sp, #56	; 0x38
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f78:	d114      	bne.n	8001fa4 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f7a:	4b56      	ldr	r3, [pc, #344]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a55      	ldr	r2, [pc, #340]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b53      	ldr	r3, [pc, #332]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	623b      	str	r3, [r7, #32]
 8001f90:	6a3b      	ldr	r3, [r7, #32]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2100      	movs	r1, #0
 8001f96:	201c      	movs	r0, #28
 8001f98:	f000 fabf 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f9c:	201c      	movs	r0, #28
 8001f9e:	f000 fad8 	bl	8002552 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001fa2:	e092      	b.n	80020ca <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM3)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a4b      	ldr	r2, [pc, #300]	; (80020d8 <HAL_TIM_Base_MspInit+0x180>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d145      	bne.n	800203a <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fae:	4b49      	ldr	r3, [pc, #292]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	4a48      	ldr	r2, [pc, #288]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fba:	4b46      	ldr	r3, [pc, #280]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a42      	ldr	r2, [pc, #264]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fde:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a3c      	ldr	r2, [pc, #240]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b3a      	ldr	r3, [pc, #232]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TM3_PWM_CH4_Pin|GPIO_PIN_4;
 8001ff6:	2312      	movs	r3, #18
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002006:	2302      	movs	r3, #2
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200e:	4619      	mov	r1, r3
 8002010:	4832      	ldr	r0, [pc, #200]	; (80020dc <HAL_TIM_Base_MspInit+0x184>)
 8002012:	f000 fe31 	bl	8002c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_RGB_CH_B_Pin;
 8002016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002028:	2302      	movs	r3, #2
 800202a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LED_RGB_CH_B_GPIO_Port, &GPIO_InitStruct);
 800202c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002030:	4619      	mov	r1, r3
 8002032:	482b      	ldr	r0, [pc, #172]	; (80020e0 <HAL_TIM_Base_MspInit+0x188>)
 8002034:	f000 fe20 	bl	8002c78 <HAL_GPIO_Init>
}
 8002038:	e047      	b.n	80020ca <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM4)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a29      	ldr	r2, [pc, #164]	; (80020e4 <HAL_TIM_Base_MspInit+0x18c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d131      	bne.n	80020a8 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002044:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	6413      	str	r3, [r2, #64]	; 0x40
 8002050:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 8002062:	f043 0308 	orr.w	r3, r3, #8
 8002066:	6313      	str	r3, [r2, #48]	; 0x30
 8002068:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC_TIM_DT_Pin|ENC_TIM_CLK_Pin;
 8002074:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002086:	2302      	movs	r3, #2
 8002088:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800208a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208e:	4619      	mov	r1, r3
 8002090:	4815      	ldr	r0, [pc, #84]	; (80020e8 <HAL_TIM_Base_MspInit+0x190>)
 8002092:	f000 fdf1 	bl	8002c78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	201e      	movs	r0, #30
 800209c:	f000 fa3d 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80020a0:	201e      	movs	r0, #30
 80020a2:	f000 fa56 	bl	8002552 <HAL_NVIC_EnableIRQ>
}
 80020a6:	e010      	b.n	80020ca <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM6)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <HAL_TIM_Base_MspInit+0x194>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10b      	bne.n	80020ca <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020b2:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 80020b8:	f043 0310 	orr.w	r3, r3, #16
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_TIM_Base_MspInit+0x17c>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
}
 80020ca:	bf00      	nop
 80020cc:	3738      	adds	r7, #56	; 0x38
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40000400 	.word	0x40000400
 80020dc:	40020400 	.word	0x40020400
 80020e0:	40020800 	.word	0x40020800
 80020e4:	40000800 	.word	0x40000800
 80020e8:	40020c00 	.word	0x40020c00
 80020ec:	40001000 	.word	0x40001000

080020f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a11      	ldr	r2, [pc, #68]	; (8002154 <HAL_TIM_MspPostInit+0x64>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d11b      	bne.n	800214a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_TIM_MspPostInit+0x68>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a10      	ldr	r2, [pc, #64]	; (8002158 <HAL_TIM_MspPostInit+0x68>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <HAL_TIM_MspPostInit+0x68>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LED_RGB_CH_G_Pin;
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800213a:	2302      	movs	r3, #2
 800213c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_RGB_CH_G_GPIO_Port, &GPIO_InitStruct);
 800213e:	f107 030c 	add.w	r3, r7, #12
 8002142:	4619      	mov	r1, r3
 8002144:	4805      	ldr	r0, [pc, #20]	; (800215c <HAL_TIM_MspPostInit+0x6c>)
 8002146:	f000 fd97 	bl	8002c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800214a:	bf00      	nop
 800214c:	3720      	adds	r7, #32
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40000400 	.word	0x40000400
 8002158:	40023800 	.word	0x40023800
 800215c:	40020800 	.word	0x40020800

08002160 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <MX_USART3_UART_Init+0x58>)
 8002166:	4a15      	ldr	r2, [pc, #84]	; (80021bc <MX_USART3_UART_Init+0x5c>)
 8002168:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <MX_USART3_UART_Init+0x58>)
 800216c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002170:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <MX_USART3_UART_Init+0x58>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002178:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <MX_USART3_UART_Init+0x58>)
 800217a:	2200      	movs	r2, #0
 800217c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800217e:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <MX_USART3_UART_Init+0x58>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <MX_USART3_UART_Init+0x58>)
 8002186:	220c      	movs	r2, #12
 8002188:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <MX_USART3_UART_Init+0x58>)
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <MX_USART3_UART_Init+0x58>)
 8002192:	2200      	movs	r2, #0
 8002194:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <MX_USART3_UART_Init+0x58>)
 8002198:	2200      	movs	r2, #0
 800219a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <MX_USART3_UART_Init+0x58>)
 800219e:	2200      	movs	r2, #0
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021a2:	4805      	ldr	r0, [pc, #20]	; (80021b8 <MX_USART3_UART_Init+0x58>)
 80021a4:	f003 fe58 	bl	8005e58 <HAL_UART_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80021ae:	f7ff fba1 	bl	80018f4 <Error_Handler>
  }

}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000460 	.word	0x20000460
 80021bc:	40004800 	.word	0x40004800

080021c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1b      	ldr	r2, [pc, #108]	; (800224c <HAL_UART_MspInit+0x8c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d130      	bne.n	8002244 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_UART_MspInit+0x90>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a1a      	ldr	r2, [pc, #104]	; (8002250 <HAL_UART_MspInit+0x90>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b18      	ldr	r3, [pc, #96]	; (8002250 <HAL_UART_MspInit+0x90>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_UART_MspInit+0x90>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a14      	ldr	r2, [pc, #80]	; (8002250 <HAL_UART_MspInit+0x90>)
 8002200:	f043 0308 	orr.w	r3, r3, #8
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_UART_MspInit+0x90>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002212:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002220:	2303      	movs	r3, #3
 8002222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002224:	2307      	movs	r3, #7
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4619      	mov	r1, r3
 800222e:	4809      	ldr	r0, [pc, #36]	; (8002254 <HAL_UART_MspInit+0x94>)
 8002230:	f000 fd22 	bl	8002c78 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	2027      	movs	r0, #39	; 0x27
 800223a:	f000 f96e 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800223e:	2027      	movs	r0, #39	; 0x27
 8002240:	f000 f987 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	; 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40004800 	.word	0x40004800
 8002250:	40023800 	.word	0x40023800
 8002254:	40020c00 	.word	0x40020c00

08002258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002290 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800225c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800225e:	e003      	b.n	8002268 <LoopCopyDataInit>

08002260 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002262:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002264:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002266:	3104      	adds	r1, #4

08002268 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002268:	480b      	ldr	r0, [pc, #44]	; (8002298 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800226c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800226e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002270:	d3f6      	bcc.n	8002260 <CopyDataInit>
  ldr  r2, =_sbss
 8002272:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002274:	e002      	b.n	800227c <LoopFillZerobss>

08002276 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002276:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002278:	f842 3b04 	str.w	r3, [r2], #4

0800227c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800227e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002280:	d3f9      	bcc.n	8002276 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002282:	f7ff fcff 	bl	8001c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002286:	f004 fde1 	bl	8006e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800228a:	f7ff fa2f 	bl	80016ec <main>
  bx  lr    
 800228e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002290:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002294:	08008290 	.word	0x08008290
  ldr  r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800229c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80022a0:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80022a4:	200004e8 	.word	0x200004e8

080022a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a8:	e7fe      	b.n	80022a8 <ADC_IRQHandler>

080022aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ae:	2003      	movs	r0, #3
 80022b0:	f000 f928 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b4:	2000      	movs	r0, #0
 80022b6:	f000 f805 	bl	80022c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80022ba:	f7ff fc1b 	bl	8001af4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_InitTick+0x54>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_InitTick+0x58>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022da:	fbb3 f3f1 	udiv	r3, r3, r1
 80022de:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f943 	bl	800256e <HAL_SYSTICK_Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e00e      	b.n	8002310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b0f      	cmp	r3, #15
 80022f6:	d80a      	bhi.n	800230e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f8:	2200      	movs	r2, #0
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002300:	f000 f90b 	bl	800251a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002304:	4a06      	ldr	r2, [pc, #24]	; (8002320 <HAL_InitTick+0x5c>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	e000      	b.n	8002310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000000 	.word	0x20000000
 800231c:	20000008 	.word	0x20000008
 8002320:	20000004 	.word	0x20000004

08002324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x20>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_IncTick+0x24>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4413      	add	r3, r2
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_IncTick+0x24>)
 8002336:	6013      	str	r3, [r2, #0]
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000008 	.word	0x20000008
 8002348:	200004e0 	.word	0x200004e0

0800234c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return uwTick;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_GetTick+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	200004e0 	.word	0x200004e0

08002364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	4313      	orrs	r3, r2
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00
 80023a8:	05fa0000 	.word	0x05fa0000

080023ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0b      	blt.n	80023f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4907      	ldr	r1, [pc, #28]	; (8002400 <__NVIC_EnableIRQ+0x38>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2001      	movs	r0, #1
 80023ea:	fa00 f202 	lsl.w	r2, r0, r2
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	; (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	; (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	2b04      	cmp	r3, #4
 8002474:	bf28      	it	cs
 8002476:	2304      	movcs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3304      	adds	r3, #4
 800247e:	2b06      	cmp	r3, #6
 8002480:	d902      	bls.n	8002488 <NVIC_EncodePriority+0x30>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b03      	subs	r3, #3
 8002486:	e000      	b.n	800248a <NVIC_EncodePriority+0x32>
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	4313      	orrs	r3, r2
         );
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	; 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d0:	d301      	bcc.n	80024d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00f      	b.n	80024f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <SysTick_Config+0x40>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024de:	210f      	movs	r1, #15
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f7ff ff8e 	bl	8002404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <SysTick_Config+0x40>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <SysTick_Config+0x40>)
 80024f0:	2207      	movs	r2, #7
 80024f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000e010 	.word	0xe000e010

08002504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff29 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800252c:	f7ff ff3e 	bl	80023ac <__NVIC_GetPriorityGrouping>
 8002530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f7ff ff8e 	bl	8002458 <NVIC_EncodePriority>
 800253c:	4602      	mov	r2, r0
 800253e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff5d 	bl	8002404 <__NVIC_SetPriority>
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff31 	bl	80023c8 <__NVIC_EnableIRQ>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff ffa2 	bl	80024c0 <SysTick_Config>
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e014      	b.n	80025c2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	791b      	ldrb	r3, [r3, #4]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d105      	bne.n	80025ae <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7fe fd01 	bl	8000fb0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b087      	sub	sp, #28
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	795b      	ldrb	r3, [r3, #5]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_DAC_ConfigChannel+0x20>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e036      	b.n	8002658 <HAL_DAC_ConfigChannel+0x8e>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2202      	movs	r2, #2
 80025f4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80025fe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4013      	ands	r3, r2
 800260e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	4313      	orrs	r3, r2
 8002628:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6819      	ldr	r1, [r3, #0]
 8002638:	22c0      	movs	r2, #192	; 0xc0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43da      	mvns	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	400a      	ands	r2, r1
 8002648:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002670:	f7ff fe6c 	bl	800234c <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e099      	b.n	80027b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a0:	e00f      	b.n	80026c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026a2:	f7ff fe53 	bl	800234c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b05      	cmp	r3, #5
 80026ae:	d908      	bls.n	80026c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2203      	movs	r2, #3
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e078      	b.n	80027b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1e8      	bne.n	80026a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	4b38      	ldr	r3, [pc, #224]	; (80027bc <HAL_DMA_Init+0x158>)
 80026dc:	4013      	ands	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002706:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	2b04      	cmp	r3, #4
 800271a:	d107      	bne.n	800272c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	4313      	orrs	r3, r2
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f023 0307 	bic.w	r3, r3, #7
 8002742:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	2b04      	cmp	r3, #4
 8002754:	d117      	bne.n	8002786 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00e      	beq.n	8002786 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 fa0b 	bl	8002b84 <DMA_CheckFifoParam>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2240      	movs	r2, #64	; 0x40
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002782:	2301      	movs	r3, #1
 8002784:	e016      	b.n	80027b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f9c2 	bl	8002b18 <DMA_CalcBaseAndBitshift>
 8002794:	4603      	mov	r3, r0
 8002796:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279c:	223f      	movs	r2, #63	; 0x3f
 800279e:	409a      	lsls	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	f010803f 	.word	0xf010803f

080027c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d004      	beq.n	80027de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e00c      	b.n	80027f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2205      	movs	r2, #5
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002810:	4b92      	ldr	r3, [pc, #584]	; (8002a5c <HAL_DMA_IRQHandler+0x258>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a92      	ldr	r2, [pc, #584]	; (8002a60 <HAL_DMA_IRQHandler+0x25c>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0a9b      	lsrs	r3, r3, #10
 800281c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	2208      	movs	r2, #8
 8002830:	409a      	lsls	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01a      	beq.n	8002870 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d013      	beq.n	8002870 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0204 	bic.w	r2, r2, #4
 8002856:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285c:	2208      	movs	r2, #8
 800285e:	409a      	lsls	r2, r3
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002868:	f043 0201 	orr.w	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	2201      	movs	r2, #1
 8002876:	409a      	lsls	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d012      	beq.n	80028a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002892:	2201      	movs	r2, #1
 8002894:	409a      	lsls	r2, r3
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f043 0202 	orr.w	r2, r3, #2
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028aa:	2204      	movs	r2, #4
 80028ac:	409a      	lsls	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d012      	beq.n	80028dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00b      	beq.n	80028dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c8:	2204      	movs	r2, #4
 80028ca:	409a      	lsls	r2, r3
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f043 0204 	orr.w	r2, r3, #4
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	2210      	movs	r2, #16
 80028e2:	409a      	lsls	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d043      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d03c      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	2210      	movs	r2, #16
 8002900:	409a      	lsls	r2, r3
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d018      	beq.n	8002946 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d108      	bne.n	8002934 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d024      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	4798      	blx	r3
 8002932:	e01f      	b.n	8002974 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01b      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	4798      	blx	r3
 8002944:	e016      	b.n	8002974 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d107      	bne.n	8002964 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0208 	bic.w	r2, r2, #8
 8002962:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002978:	2220      	movs	r2, #32
 800297a:	409a      	lsls	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 808e 	beq.w	8002aa2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8086 	beq.w	8002aa2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	2220      	movs	r2, #32
 800299c:	409a      	lsls	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b05      	cmp	r3, #5
 80029ac:	d136      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0216 	bic.w	r2, r2, #22
 80029bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d103      	bne.n	80029de <HAL_DMA_IRQHandler+0x1da>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0208 	bic.w	r2, r2, #8
 80029ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	223f      	movs	r2, #63	; 0x3f
 80029f4:	409a      	lsls	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d07d      	beq.n	8002b0e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
        }
        return;
 8002a1a:	e078      	b.n	8002b0e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d01c      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d108      	bne.n	8002a4a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d030      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	4798      	blx	r3
 8002a48:	e02b      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d027      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4798      	blx	r3
 8002a5a:	e022      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x29e>
 8002a5c:	20000000 	.word	0x20000000
 8002a60:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10f      	bne.n	8002a92 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0210 	bic.w	r2, r2, #16
 8002a80:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d032      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d022      	beq.n	8002afc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2205      	movs	r2, #5
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d307      	bcc.n	8002aea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f2      	bne.n	8002ace <HAL_DMA_IRQHandler+0x2ca>
 8002ae8:	e000      	b.n	8002aec <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002aea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	4798      	blx	r3
 8002b0c:	e000      	b.n	8002b10 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b0e:	bf00      	nop
    }
  }
}
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop

08002b18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	3b10      	subs	r3, #16
 8002b28:	4a13      	ldr	r2, [pc, #76]	; (8002b78 <DMA_CalcBaseAndBitshift+0x60>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b32:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <DMA_CalcBaseAndBitshift+0x64>)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4413      	add	r3, r2
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d908      	bls.n	8002b58 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <DMA_CalcBaseAndBitshift+0x68>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	1d1a      	adds	r2, r3, #4
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	659a      	str	r2, [r3, #88]	; 0x58
 8002b56:	e006      	b.n	8002b66 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <DMA_CalcBaseAndBitshift+0x68>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	aaaaaaab 	.word	0xaaaaaaab
 8002b7c:	080080bc 	.word	0x080080bc
 8002b80:	fffffc00 	.word	0xfffffc00

08002b84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d11f      	bne.n	8002bde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d855      	bhi.n	8002c50 <DMA_CheckFifoParam+0xcc>
 8002ba4:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <DMA_CheckFifoParam+0x28>)
 8002ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002baa:	bf00      	nop
 8002bac:	08002bbd 	.word	0x08002bbd
 8002bb0:	08002bcf 	.word	0x08002bcf
 8002bb4:	08002bbd 	.word	0x08002bbd
 8002bb8:	08002c51 	.word	0x08002c51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d045      	beq.n	8002c54 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bcc:	e042      	b.n	8002c54 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bd6:	d13f      	bne.n	8002c58 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bdc:	e03c      	b.n	8002c58 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be6:	d121      	bne.n	8002c2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d836      	bhi.n	8002c5c <DMA_CheckFifoParam+0xd8>
 8002bee:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <DMA_CheckFifoParam+0x70>)
 8002bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf4:	08002c05 	.word	0x08002c05
 8002bf8:	08002c0b 	.word	0x08002c0b
 8002bfc:	08002c05 	.word	0x08002c05
 8002c00:	08002c1d 	.word	0x08002c1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      break;
 8002c08:	e02f      	b.n	8002c6a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d024      	beq.n	8002c60 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1a:	e021      	b.n	8002c60 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c24:	d11e      	bne.n	8002c64 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c2a:	e01b      	b.n	8002c64 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d902      	bls.n	8002c38 <DMA_CheckFifoParam+0xb4>
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d003      	beq.n	8002c3e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c36:	e018      	b.n	8002c6a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c3c:	e015      	b.n	8002c6a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00e      	beq.n	8002c68 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c4e:	e00b      	b.n	8002c68 <DMA_CheckFifoParam+0xe4>
      break;
 8002c50:	bf00      	nop
 8002c52:	e00a      	b.n	8002c6a <DMA_CheckFifoParam+0xe6>
      break;
 8002c54:	bf00      	nop
 8002c56:	e008      	b.n	8002c6a <DMA_CheckFifoParam+0xe6>
      break;
 8002c58:	bf00      	nop
 8002c5a:	e006      	b.n	8002c6a <DMA_CheckFifoParam+0xe6>
      break;
 8002c5c:	bf00      	nop
 8002c5e:	e004      	b.n	8002c6a <DMA_CheckFifoParam+0xe6>
      break;
 8002c60:	bf00      	nop
 8002c62:	e002      	b.n	8002c6a <DMA_CheckFifoParam+0xe6>
      break;   
 8002c64:	bf00      	nop
 8002c66:	e000      	b.n	8002c6a <DMA_CheckFifoParam+0xe6>
      break;
 8002c68:	bf00      	nop
    }
  } 
  
  return status; 
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	; 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	e175      	b.n	8002f84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c98:	2201      	movs	r2, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	f040 8164 	bne.w	8002f7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_GPIO_Init+0x5e>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d007      	beq.n	8002cd6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cca:	2b11      	cmp	r3, #17
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b12      	cmp	r3, #18
 8002cd4:	d130      	bne.n	8002d38 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 0201 	and.w	r2, r3, #1
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x100>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b12      	cmp	r3, #18
 8002d76:	d123      	bne.n	8002dc0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	08da      	lsrs	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3208      	adds	r2, #8
 8002d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	220f      	movs	r2, #15
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	08da      	lsrs	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3208      	adds	r2, #8
 8002dba:	69b9      	ldr	r1, [r7, #24]
 8002dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0203 	and.w	r2, r3, #3
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80be 	beq.w	8002f7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	4b65      	ldr	r3, [pc, #404]	; (8002f98 <HAL_GPIO_Init+0x320>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	4a64      	ldr	r2, [pc, #400]	; (8002f98 <HAL_GPIO_Init+0x320>)
 8002e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e0e:	4b62      	ldr	r3, [pc, #392]	; (8002f98 <HAL_GPIO_Init+0x320>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e1a:	4a60      	ldr	r2, [pc, #384]	; (8002f9c <HAL_GPIO_Init+0x324>)
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	089b      	lsrs	r3, r3, #2
 8002e20:	3302      	adds	r3, #2
 8002e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	220f      	movs	r2, #15
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a57      	ldr	r2, [pc, #348]	; (8002fa0 <HAL_GPIO_Init+0x328>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d037      	beq.n	8002eb6 <HAL_GPIO_Init+0x23e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a56      	ldr	r2, [pc, #344]	; (8002fa4 <HAL_GPIO_Init+0x32c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d031      	beq.n	8002eb2 <HAL_GPIO_Init+0x23a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a55      	ldr	r2, [pc, #340]	; (8002fa8 <HAL_GPIO_Init+0x330>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d02b      	beq.n	8002eae <HAL_GPIO_Init+0x236>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a54      	ldr	r2, [pc, #336]	; (8002fac <HAL_GPIO_Init+0x334>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d025      	beq.n	8002eaa <HAL_GPIO_Init+0x232>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a53      	ldr	r2, [pc, #332]	; (8002fb0 <HAL_GPIO_Init+0x338>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01f      	beq.n	8002ea6 <HAL_GPIO_Init+0x22e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a52      	ldr	r2, [pc, #328]	; (8002fb4 <HAL_GPIO_Init+0x33c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d019      	beq.n	8002ea2 <HAL_GPIO_Init+0x22a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a51      	ldr	r2, [pc, #324]	; (8002fb8 <HAL_GPIO_Init+0x340>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_GPIO_Init+0x226>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a50      	ldr	r2, [pc, #320]	; (8002fbc <HAL_GPIO_Init+0x344>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00d      	beq.n	8002e9a <HAL_GPIO_Init+0x222>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4f      	ldr	r2, [pc, #316]	; (8002fc0 <HAL_GPIO_Init+0x348>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <HAL_GPIO_Init+0x21e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a4e      	ldr	r2, [pc, #312]	; (8002fc4 <HAL_GPIO_Init+0x34c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d101      	bne.n	8002e92 <HAL_GPIO_Init+0x21a>
 8002e8e:	2309      	movs	r3, #9
 8002e90:	e012      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002e92:	230a      	movs	r3, #10
 8002e94:	e010      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002e96:	2308      	movs	r3, #8
 8002e98:	e00e      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002e9a:	2307      	movs	r3, #7
 8002e9c:	e00c      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002e9e:	2306      	movs	r3, #6
 8002ea0:	e00a      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002ea2:	2305      	movs	r3, #5
 8002ea4:	e008      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	e006      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e004      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e002      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	f002 0203 	and.w	r2, r2, #3
 8002ebe:	0092      	lsls	r2, r2, #2
 8002ec0:	4093      	lsls	r3, r2
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ec8:	4934      	ldr	r1, [pc, #208]	; (8002f9c <HAL_GPIO_Init+0x324>)
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	3302      	adds	r3, #2
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ed6:	4b3c      	ldr	r3, [pc, #240]	; (8002fc8 <HAL_GPIO_Init+0x350>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002efa:	4a33      	ldr	r2, [pc, #204]	; (8002fc8 <HAL_GPIO_Init+0x350>)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f00:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <HAL_GPIO_Init+0x350>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f24:	4a28      	ldr	r2, [pc, #160]	; (8002fc8 <HAL_GPIO_Init+0x350>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f2a:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <HAL_GPIO_Init+0x350>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f4e:	4a1e      	ldr	r2, [pc, #120]	; (8002fc8 <HAL_GPIO_Init+0x350>)
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f54:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <HAL_GPIO_Init+0x350>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f78:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <HAL_GPIO_Init+0x350>)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3301      	adds	r3, #1
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	2b0f      	cmp	r3, #15
 8002f88:	f67f ae86 	bls.w	8002c98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	3724      	adds	r7, #36	; 0x24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40013800 	.word	0x40013800
 8002fa0:	40020000 	.word	0x40020000
 8002fa4:	40020400 	.word	0x40020400
 8002fa8:	40020800 	.word	0x40020800
 8002fac:	40020c00 	.word	0x40020c00
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40021400 	.word	0x40021400
 8002fb8:	40021800 	.word	0x40021800
 8002fbc:	40021c00 	.word	0x40021c00
 8002fc0:	40022000 	.word	0x40022000
 8002fc4:	40022400 	.word	0x40022400
 8002fc8:	40013c00 	.word	0x40013c00

08002fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fdc:	787b      	ldrb	r3, [r7, #1]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fe8:	e003      	b.n	8002ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	041a      	lsls	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	619a      	str	r2, [r3, #24]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d006      	beq.n	8003024 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003016:	4a05      	ldr	r2, [pc, #20]	; (800302c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f806 	bl	8003030 <HAL_GPIO_EXTI_Callback>
  }
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40013c00 	.word	0x40013c00

08003030 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e07f      	b.n	800315a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fe faf8 	bl	8001664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2224      	movs	r2, #36	; 0x24
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0201 	bic.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003098:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d107      	bne.n	80030c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	e006      	b.n	80030d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d104      	bne.n	80030e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <HAL_I2C_Init+0x11c>)
 80030ee:	430b      	orrs	r3, r1
 80030f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003100:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	ea42 0103 	orr.w	r1, r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	021a      	lsls	r2, r3, #8
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69d9      	ldr	r1, [r3, #28]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1a      	ldr	r2, [r3, #32]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	02008000 	.word	0x02008000

08003168 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	461a      	mov	r2, r3
 8003174:	460b      	mov	r3, r1
 8003176:	817b      	strh	r3, [r7, #10]
 8003178:	4613      	mov	r3, r2
 800317a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b20      	cmp	r3, #32
 8003186:	f040 80da 	bne.w	800333e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_I2C_Master_Transmit+0x30>
 8003194:	2302      	movs	r3, #2
 8003196:	e0d3      	b.n	8003340 <HAL_I2C_Master_Transmit+0x1d8>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031a0:	f7ff f8d4 	bl	800234c <HAL_GetTick>
 80031a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	2319      	movs	r3, #25
 80031ac:	2201      	movs	r2, #1
 80031ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f9e6 	bl	8003584 <I2C_WaitOnFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e0be      	b.n	8003340 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2221      	movs	r2, #33	; 0x21
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2210      	movs	r2, #16
 80031ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	893a      	ldrh	r2, [r7, #8]
 80031e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2bff      	cmp	r3, #255	; 0xff
 80031f2:	d90e      	bls.n	8003212 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	22ff      	movs	r2, #255	; 0xff
 80031f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	8979      	ldrh	r1, [r7, #10]
 8003202:	4b51      	ldr	r3, [pc, #324]	; (8003348 <HAL_I2C_Master_Transmit+0x1e0>)
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 fb48 	bl	80038a0 <I2C_TransferConfig>
 8003210:	e06c      	b.n	80032ec <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003220:	b2da      	uxtb	r2, r3
 8003222:	8979      	ldrh	r1, [r7, #10]
 8003224:	4b48      	ldr	r3, [pc, #288]	; (8003348 <HAL_I2C_Master_Transmit+0x1e0>)
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fb37 	bl	80038a0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003232:	e05b      	b.n	80032ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	6a39      	ldr	r1, [r7, #32]
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f9e3 	bl	8003604 <I2C_WaitOnTXISFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e07b      	b.n	8003340 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	781a      	ldrb	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d034      	beq.n	80032ec <HAL_I2C_Master_Transmit+0x184>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003286:	2b00      	cmp	r3, #0
 8003288:	d130      	bne.n	80032ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	2200      	movs	r2, #0
 8003292:	2180      	movs	r1, #128	; 0x80
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f975 	bl	8003584 <I2C_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e04d      	b.n	8003340 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2bff      	cmp	r3, #255	; 0xff
 80032ac:	d90e      	bls.n	80032cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	22ff      	movs	r2, #255	; 0xff
 80032b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	8979      	ldrh	r1, [r7, #10]
 80032bc:	2300      	movs	r3, #0
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 faeb 	bl	80038a0 <I2C_TransferConfig>
 80032ca:	e00f      	b.n	80032ec <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	8979      	ldrh	r1, [r7, #10]
 80032de:	2300      	movs	r3, #0
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fada 	bl	80038a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d19e      	bne.n	8003234 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	6a39      	ldr	r1, [r7, #32]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f9c2 	bl	8003684 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e01a      	b.n	8003340 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2220      	movs	r2, #32
 8003310:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_I2C_Master_Transmit+0x1e4>)
 800331e:	400b      	ands	r3, r1
 8003320:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	e000      	b.n	8003340 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800333e:	2302      	movs	r3, #2
  }
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	80002000 	.word	0x80002000
 800334c:	fe00e800 	.word	0xfe00e800

08003350 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	461a      	mov	r2, r3
 800335c:	460b      	mov	r3, r1
 800335e:	817b      	strh	r3, [r7, #10]
 8003360:	4613      	mov	r3, r2
 8003362:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b20      	cmp	r3, #32
 800336e:	f040 80db 	bne.w	8003528 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_I2C_Master_Receive+0x30>
 800337c:	2302      	movs	r3, #2
 800337e:	e0d4      	b.n	800352a <HAL_I2C_Master_Receive+0x1da>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003388:	f7fe ffe0 	bl	800234c <HAL_GetTick>
 800338c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	2319      	movs	r3, #25
 8003394:	2201      	movs	r2, #1
 8003396:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f8f2 	bl	8003584 <I2C_WaitOnFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0bf      	b.n	800352a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2222      	movs	r2, #34	; 0x22
 80033ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2210      	movs	r2, #16
 80033b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	893a      	ldrh	r2, [r7, #8]
 80033ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2bff      	cmp	r3, #255	; 0xff
 80033da:	d90e      	bls.n	80033fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	22ff      	movs	r2, #255	; 0xff
 80033e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	8979      	ldrh	r1, [r7, #10]
 80033ea:	4b52      	ldr	r3, [pc, #328]	; (8003534 <HAL_I2C_Master_Receive+0x1e4>)
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fa54 	bl	80038a0 <I2C_TransferConfig>
 80033f8:	e06d      	b.n	80034d6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003408:	b2da      	uxtb	r2, r3
 800340a:	8979      	ldrh	r1, [r7, #10]
 800340c:	4b49      	ldr	r3, [pc, #292]	; (8003534 <HAL_I2C_Master_Receive+0x1e4>)
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fa43 	bl	80038a0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800341a:	e05c      	b.n	80034d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	6a39      	ldr	r1, [r7, #32]
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f96b 	bl	80036fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e07c      	b.n	800352a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d034      	beq.n	80034d6 <HAL_I2C_Master_Receive+0x186>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	d130      	bne.n	80034d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	2200      	movs	r2, #0
 800347c:	2180      	movs	r1, #128	; 0x80
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f880 	bl	8003584 <I2C_WaitOnFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e04d      	b.n	800352a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	2bff      	cmp	r3, #255	; 0xff
 8003496:	d90e      	bls.n	80034b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	22ff      	movs	r2, #255	; 0xff
 800349c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	8979      	ldrh	r1, [r7, #10]
 80034a6:	2300      	movs	r3, #0
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f9f6 	bl	80038a0 <I2C_TransferConfig>
 80034b4:	e00f      	b.n	80034d6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	8979      	ldrh	r1, [r7, #10]
 80034c8:	2300      	movs	r3, #0
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f9e5 	bl	80038a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d19d      	bne.n	800341c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	6a39      	ldr	r1, [r7, #32]
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f8cd 	bl	8003684 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e01a      	b.n	800352a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2220      	movs	r2, #32
 80034fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6859      	ldr	r1, [r3, #4]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <HAL_I2C_Master_Receive+0x1e8>)
 8003508:	400b      	ands	r3, r1
 800350a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	e000      	b.n	800352a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003528:	2302      	movs	r3, #2
  }
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	80002400 	.word	0x80002400
 8003538:	fe00e800 	.word	0xfe00e800

0800353c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b02      	cmp	r3, #2
 8003550:	d103      	bne.n	800355a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2200      	movs	r2, #0
 8003558:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d007      	beq.n	8003578 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	619a      	str	r2, [r3, #24]
  }
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003594:	e022      	b.n	80035dc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d01e      	beq.n	80035dc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359e:	f7fe fed5 	bl	800234c <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d302      	bcc.n	80035b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d113      	bne.n	80035dc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b8:	f043 0220 	orr.w	r2, r3, #32
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e00f      	b.n	80035fc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	4013      	ands	r3, r2
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d0cd      	beq.n	8003596 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003610:	e02c      	b.n	800366c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f8dc 	bl	80037d4 <I2C_IsAcknowledgeFailed>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e02a      	b.n	800367c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362c:	d01e      	beq.n	800366c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362e:	f7fe fe8d 	bl	800234c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	429a      	cmp	r2, r3
 800363c:	d302      	bcc.n	8003644 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d113      	bne.n	800366c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003648:	f043 0220 	orr.w	r2, r3, #32
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e007      	b.n	800367c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b02      	cmp	r3, #2
 8003678:	d1cb      	bne.n	8003612 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003690:	e028      	b.n	80036e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 f89c 	bl	80037d4 <I2C_IsAcknowledgeFailed>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e026      	b.n	80036f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a6:	f7fe fe51 	bl	800234c <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d302      	bcc.n	80036bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d113      	bne.n	80036e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c0:	f043 0220 	orr.w	r2, r3, #32
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e007      	b.n	80036f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d1cf      	bne.n	8003692 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003708:	e055      	b.n	80037b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 f860 	bl	80037d4 <I2C_IsAcknowledgeFailed>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e053      	b.n	80037c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b20      	cmp	r3, #32
 800372a:	d129      	bne.n	8003780 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b04      	cmp	r3, #4
 8003738:	d105      	bne.n	8003746 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e03f      	b.n	80037c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2220      	movs	r2, #32
 800374c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800375a:	400b      	ands	r3, r1
 800375c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e022      	b.n	80037c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003780:	f7fe fde4 	bl	800234c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	429a      	cmp	r2, r3
 800378e:	d302      	bcc.n	8003796 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10f      	bne.n	80037b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	f043 0220 	orr.w	r2, r3, #32
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e007      	b.n	80037c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d1a2      	bne.n	800370a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	fe00e800 	.word	0xfe00e800

080037d4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	2b10      	cmp	r3, #16
 80037ec:	d151      	bne.n	8003892 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037ee:	e022      	b.n	8003836 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f6:	d01e      	beq.n	8003836 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f8:	f7fe fda8 	bl	800234c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	429a      	cmp	r2, r3
 8003806:	d302      	bcc.n	800380e <I2C_IsAcknowledgeFailed+0x3a>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d113      	bne.n	8003836 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	f043 0220 	orr.w	r2, r3, #32
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e02e      	b.n	8003894 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	f003 0320 	and.w	r3, r3, #32
 8003840:	2b20      	cmp	r3, #32
 8003842:	d1d5      	bne.n	80037f0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2210      	movs	r2, #16
 800384a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2220      	movs	r2, #32
 8003852:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f7ff fe71 	bl	800353c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6859      	ldr	r1, [r3, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b0d      	ldr	r3, [pc, #52]	; (800389c <I2C_IsAcknowledgeFailed+0xc8>)
 8003866:	400b      	ands	r3, r1
 8003868:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	f043 0204 	orr.w	r2, r3, #4
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	fe00e800 	.word	0xfe00e800

080038a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	607b      	str	r3, [r7, #4]
 80038aa:	460b      	mov	r3, r1
 80038ac:	817b      	strh	r3, [r7, #10]
 80038ae:	4613      	mov	r3, r2
 80038b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	0d5b      	lsrs	r3, r3, #21
 80038bc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038c0:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <I2C_TransferConfig+0x58>)
 80038c2:	430b      	orrs	r3, r1
 80038c4:	43db      	mvns	r3, r3
 80038c6:	ea02 0103 	and.w	r1, r2, r3
 80038ca:	897b      	ldrh	r3, [r7, #10]
 80038cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038d0:	7a7b      	ldrb	r3, [r7, #9]
 80038d2:	041b      	lsls	r3, r3, #16
 80038d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	431a      	orrs	r2, r3
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	431a      	orrs	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	03ff63ff 	.word	0x03ff63ff

080038fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b20      	cmp	r3, #32
 8003910:	d138      	bne.n	8003984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800391c:	2302      	movs	r3, #2
 800391e:	e032      	b.n	8003986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	; 0x24
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800394e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6819      	ldr	r1, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d139      	bne.n	8003a1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e033      	b.n	8003a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2224      	movs	r2, #36	; 0x24
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e000      	b.n	8003a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a1c:	2302      	movs	r3, #2
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3a:	6013      	str	r3, [r2, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40007000 	.word	0x40007000

08003a4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a56:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a60:	6413      	str	r3, [r2, #64]	; 0x40
 8003a62:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ae8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1d      	ldr	r2, [pc, #116]	; (8003ae8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a78:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a7a:	f7fe fc67 	bl	800234c <HAL_GetTick>
 8003a7e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a80:	e009      	b.n	8003a96 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a82:	f7fe fc63 	bl	800234c <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a90:	d901      	bls.n	8003a96 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e022      	b.n	8003adc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a96:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa2:	d1ee      	bne.n	8003a82 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003aa4:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a0f      	ldr	r2, [pc, #60]	; (8003ae8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ab0:	f7fe fc4c 	bl	800234c <HAL_GetTick>
 8003ab4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ab6:	e009      	b.n	8003acc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ab8:	f7fe fc48 	bl	800234c <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ac6:	d901      	bls.n	8003acc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e007      	b.n	8003adc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ad8:	d1ee      	bne.n	8003ab8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	40007000 	.word	0x40007000

08003aec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003af4:	2300      	movs	r3, #0
 8003af6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e291      	b.n	8004026 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8087 	beq.w	8003c1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b10:	4b96      	ldr	r3, [pc, #600]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d00c      	beq.n	8003b36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b1c:	4b93      	ldr	r3, [pc, #588]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 030c 	and.w	r3, r3, #12
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d112      	bne.n	8003b4e <HAL_RCC_OscConfig+0x62>
 8003b28:	4b90      	ldr	r3, [pc, #576]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b34:	d10b      	bne.n	8003b4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b36:	4b8d      	ldr	r3, [pc, #564]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d06c      	beq.n	8003c1c <HAL_RCC_OscConfig+0x130>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d168      	bne.n	8003c1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e26b      	b.n	8004026 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b56:	d106      	bne.n	8003b66 <HAL_RCC_OscConfig+0x7a>
 8003b58:	4b84      	ldr	r3, [pc, #528]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a83      	ldr	r2, [pc, #524]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	e02e      	b.n	8003bc4 <HAL_RCC_OscConfig+0xd8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x9c>
 8003b6e:	4b7f      	ldr	r3, [pc, #508]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a7e      	ldr	r2, [pc, #504]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	4b7c      	ldr	r3, [pc, #496]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a7b      	ldr	r2, [pc, #492]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e01d      	b.n	8003bc4 <HAL_RCC_OscConfig+0xd8>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b90:	d10c      	bne.n	8003bac <HAL_RCC_OscConfig+0xc0>
 8003b92:	4b76      	ldr	r3, [pc, #472]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a75      	ldr	r2, [pc, #468]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	4b73      	ldr	r3, [pc, #460]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a72      	ldr	r2, [pc, #456]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	e00b      	b.n	8003bc4 <HAL_RCC_OscConfig+0xd8>
 8003bac:	4b6f      	ldr	r3, [pc, #444]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a6e      	ldr	r2, [pc, #440]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	4b6c      	ldr	r3, [pc, #432]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a6b      	ldr	r2, [pc, #428]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d013      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bcc:	f7fe fbbe 	bl	800234c <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd4:	f7fe fbba 	bl	800234c <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	; 0x64
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e21f      	b.n	8004026 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be6:	4b61      	ldr	r3, [pc, #388]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0xe8>
 8003bf2:	e014      	b.n	8003c1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fe fbaa 	bl	800234c <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bfc:	f7fe fba6 	bl	800234c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b64      	cmp	r3, #100	; 0x64
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e20b      	b.n	8004026 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0e:	4b57      	ldr	r3, [pc, #348]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x110>
 8003c1a:	e000      	b.n	8003c1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d069      	beq.n	8003cfe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c2a:	4b50      	ldr	r3, [pc, #320]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00b      	beq.n	8003c4e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c36:	4b4d      	ldr	r3, [pc, #308]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d11c      	bne.n	8003c7c <HAL_RCC_OscConfig+0x190>
 8003c42:	4b4a      	ldr	r3, [pc, #296]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d116      	bne.n	8003c7c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4e:	4b47      	ldr	r3, [pc, #284]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d005      	beq.n	8003c66 <HAL_RCC_OscConfig+0x17a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d001      	beq.n	8003c66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e1df      	b.n	8004026 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c66:	4b41      	ldr	r3, [pc, #260]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	493d      	ldr	r1, [pc, #244]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7a:	e040      	b.n	8003cfe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d023      	beq.n	8003ccc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c84:	4b39      	ldr	r3, [pc, #228]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a38      	ldr	r2, [pc, #224]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fe fb5c 	bl	800234c <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c98:	f7fe fb58 	bl	800234c <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e1bd      	b.n	8004026 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003caa:	4b30      	ldr	r3, [pc, #192]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb6:	4b2d      	ldr	r3, [pc, #180]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4929      	ldr	r1, [pc, #164]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]
 8003cca:	e018      	b.n	8003cfe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ccc:	4b27      	ldr	r3, [pc, #156]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a26      	ldr	r2, [pc, #152]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003cd2:	f023 0301 	bic.w	r3, r3, #1
 8003cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fe fb38 	bl	800234c <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce0:	f7fe fb34 	bl	800234c <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e199      	b.n	8004026 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d038      	beq.n	8003d7c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d019      	beq.n	8003d46 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d12:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d16:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1e:	f7fe fb15 	bl	800234c <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d26:	f7fe fb11 	bl	800234c <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e176      	b.n	8004026 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x23a>
 8003d44:	e01a      	b.n	8003d7c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d46:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4a:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d52:	f7fe fafb 	bl	800234c <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d58:	e00a      	b.n	8003d70 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d5a:	f7fe faf7 	bl	800234c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d903      	bls.n	8003d70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e15c      	b.n	8004026 <HAL_RCC_OscConfig+0x53a>
 8003d6c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d70:	4b91      	ldr	r3, [pc, #580]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ee      	bne.n	8003d5a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80a4 	beq.w	8003ed2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8a:	4b8b      	ldr	r3, [pc, #556]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10d      	bne.n	8003db2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d96:	4b88      	ldr	r3, [pc, #544]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	4a87      	ldr	r2, [pc, #540]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da0:	6413      	str	r3, [r2, #64]	; 0x40
 8003da2:	4b85      	ldr	r3, [pc, #532]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dae:	2301      	movs	r3, #1
 8003db0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db2:	4b82      	ldr	r3, [pc, #520]	; (8003fbc <HAL_RCC_OscConfig+0x4d0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d118      	bne.n	8003df0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003dbe:	4b7f      	ldr	r3, [pc, #508]	; (8003fbc <HAL_RCC_OscConfig+0x4d0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a7e      	ldr	r2, [pc, #504]	; (8003fbc <HAL_RCC_OscConfig+0x4d0>)
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dca:	f7fe fabf 	bl	800234c <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd2:	f7fe fabb 	bl	800234c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b64      	cmp	r3, #100	; 0x64
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e120      	b.n	8004026 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de4:	4b75      	ldr	r3, [pc, #468]	; (8003fbc <HAL_RCC_OscConfig+0x4d0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_OscConfig+0x31a>
 8003df8:	4b6f      	ldr	r3, [pc, #444]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfc:	4a6e      	ldr	r2, [pc, #440]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	6713      	str	r3, [r2, #112]	; 0x70
 8003e04:	e02d      	b.n	8003e62 <HAL_RCC_OscConfig+0x376>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10c      	bne.n	8003e28 <HAL_RCC_OscConfig+0x33c>
 8003e0e:	4b6a      	ldr	r3, [pc, #424]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	4a69      	ldr	r2, [pc, #420]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1a:	4b67      	ldr	r3, [pc, #412]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	4a66      	ldr	r2, [pc, #408]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003e20:	f023 0304 	bic.w	r3, r3, #4
 8003e24:	6713      	str	r3, [r2, #112]	; 0x70
 8003e26:	e01c      	b.n	8003e62 <HAL_RCC_OscConfig+0x376>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b05      	cmp	r3, #5
 8003e2e:	d10c      	bne.n	8003e4a <HAL_RCC_OscConfig+0x35e>
 8003e30:	4b61      	ldr	r3, [pc, #388]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	4a60      	ldr	r2, [pc, #384]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003e36:	f043 0304 	orr.w	r3, r3, #4
 8003e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3c:	4b5e      	ldr	r3, [pc, #376]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e40:	4a5d      	ldr	r2, [pc, #372]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	6713      	str	r3, [r2, #112]	; 0x70
 8003e48:	e00b      	b.n	8003e62 <HAL_RCC_OscConfig+0x376>
 8003e4a:	4b5b      	ldr	r3, [pc, #364]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	4a5a      	ldr	r2, [pc, #360]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	6713      	str	r3, [r2, #112]	; 0x70
 8003e56:	4b58      	ldr	r3, [pc, #352]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5a:	4a57      	ldr	r2, [pc, #348]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003e5c:	f023 0304 	bic.w	r3, r3, #4
 8003e60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d015      	beq.n	8003e96 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6a:	f7fe fa6f 	bl	800234c <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e70:	e00a      	b.n	8003e88 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e72:	f7fe fa6b 	bl	800234c <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e0ce      	b.n	8004026 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e88:	4b4b      	ldr	r3, [pc, #300]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ee      	beq.n	8003e72 <HAL_RCC_OscConfig+0x386>
 8003e94:	e014      	b.n	8003ec0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e96:	f7fe fa59 	bl	800234c <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9c:	e00a      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9e:	f7fe fa55 	bl	800234c <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e0b8      	b.n	8004026 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb4:	4b40      	ldr	r3, [pc, #256]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1ee      	bne.n	8003e9e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d105      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec6:	4b3c      	ldr	r3, [pc, #240]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	4a3b      	ldr	r2, [pc, #236]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 80a4 	beq.w	8004024 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003edc:	4b36      	ldr	r3, [pc, #216]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 030c 	and.w	r3, r3, #12
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d06b      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d149      	bne.n	8003f84 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef0:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a30      	ldr	r2, [pc, #192]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fe fa26 	bl	800234c <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f04:	f7fe fa22 	bl	800234c <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e087      	b.n	8004026 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f16:	4b28      	ldr	r3, [pc, #160]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69da      	ldr	r2, [r3, #28]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	019b      	lsls	r3, r3, #6
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	085b      	lsrs	r3, r3, #1
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	041b      	lsls	r3, r3, #16
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	061b      	lsls	r3, r3, #24
 8003f46:	4313      	orrs	r3, r2
 8003f48:	4a1b      	ldr	r2, [pc, #108]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003f4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f4e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f50:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a18      	ldr	r2, [pc, #96]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fe f9f6 	bl	800234c <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fe f9f2 	bl	800234c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e057      	b.n	8004026 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x478>
 8003f82:	e04f      	b.n	8004024 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f84:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a0b      	ldr	r2, [pc, #44]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fe f9dc 	bl	800234c <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fe f9d8 	bl	800234c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e03d      	b.n	8004026 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003faa:	4b03      	ldr	r3, [pc, #12]	; (8003fb8 <HAL_RCC_OscConfig+0x4cc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4ac>
 8003fb6:	e035      	b.n	8004024 <HAL_RCC_OscConfig+0x538>
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <HAL_RCC_OscConfig+0x544>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d028      	beq.n	8004020 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d121      	bne.n	8004020 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d11a      	bne.n	8004020 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ff6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d111      	bne.n	8004020 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	085b      	lsrs	r3, r3, #1
 8004008:	3b01      	subs	r3, #1
 800400a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d107      	bne.n	8004020 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40023800 	.word	0x40023800

08004034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0d0      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800404c:	4b6a      	ldr	r3, [pc, #424]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d910      	bls.n	800407c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405a:	4b67      	ldr	r3, [pc, #412]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 020f 	bic.w	r2, r3, #15
 8004062:	4965      	ldr	r1, [pc, #404]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	4313      	orrs	r3, r2
 8004068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406a:	4b63      	ldr	r3, [pc, #396]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d001      	beq.n	800407c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0b8      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d020      	beq.n	80040ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004094:	4b59      	ldr	r3, [pc, #356]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4a58      	ldr	r2, [pc, #352]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 800409a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800409e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040ac:	4b53      	ldr	r3, [pc, #332]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	4a52      	ldr	r2, [pc, #328]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 80040b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b8:	4b50      	ldr	r3, [pc, #320]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	494d      	ldr	r1, [pc, #308]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d040      	beq.n	8004158 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d107      	bne.n	80040ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040de:	4b47      	ldr	r3, [pc, #284]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d115      	bne.n	8004116 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e07f      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d107      	bne.n	8004106 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f6:	4b41      	ldr	r3, [pc, #260]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e073      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004106:	4b3d      	ldr	r3, [pc, #244]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e06b      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004116:	4b39      	ldr	r3, [pc, #228]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f023 0203 	bic.w	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	4936      	ldr	r1, [pc, #216]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 8004124:	4313      	orrs	r3, r2
 8004126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004128:	f7fe f910 	bl	800234c <HAL_GetTick>
 800412c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412e:	e00a      	b.n	8004146 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004130:	f7fe f90c 	bl	800234c <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	; 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e053      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004146:	4b2d      	ldr	r3, [pc, #180]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 020c 	and.w	r2, r3, #12
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	429a      	cmp	r2, r3
 8004156:	d1eb      	bne.n	8004130 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004158:	4b27      	ldr	r3, [pc, #156]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d210      	bcs.n	8004188 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004166:	4b24      	ldr	r3, [pc, #144]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 020f 	bic.w	r2, r3, #15
 800416e:	4922      	ldr	r1, [pc, #136]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	4313      	orrs	r3, r2
 8004174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004176:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d001      	beq.n	8004188 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e032      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004194:	4b19      	ldr	r3, [pc, #100]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4916      	ldr	r1, [pc, #88]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041b2:	4b12      	ldr	r3, [pc, #72]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	490e      	ldr	r1, [pc, #56]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041c6:	f000 f821 	bl	800420c <HAL_RCC_GetSysClockFreq>
 80041ca:	4601      	mov	r1, r0
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	091b      	lsrs	r3, r3, #4
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <HAL_RCC_ClockConfig+0x1cc>)
 80041d8:	5cd3      	ldrb	r3, [r2, r3]
 80041da:	fa21 f303 	lsr.w	r3, r1, r3
 80041de:	4a09      	ldr	r2, [pc, #36]	; (8004204 <HAL_RCC_ClockConfig+0x1d0>)
 80041e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_RCC_ClockConfig+0x1d4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fe f86c 	bl	80022c4 <HAL_InitTick>

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40023c00 	.word	0x40023c00
 80041fc:	40023800 	.word	0x40023800
 8004200:	080080a4 	.word	0x080080a4
 8004204:	20000000 	.word	0x20000000
 8004208:	20000004 	.word	0x20000004

0800420c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800420c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	2300      	movs	r3, #0
 800421c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004222:	4b63      	ldr	r3, [pc, #396]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	2b04      	cmp	r3, #4
 800422c:	d007      	beq.n	800423e <HAL_RCC_GetSysClockFreq+0x32>
 800422e:	2b08      	cmp	r3, #8
 8004230:	d008      	beq.n	8004244 <HAL_RCC_GetSysClockFreq+0x38>
 8004232:	2b00      	cmp	r3, #0
 8004234:	f040 80b4 	bne.w	80043a0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004238:	4b5e      	ldr	r3, [pc, #376]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800423a:	60bb      	str	r3, [r7, #8]
      break;
 800423c:	e0b3      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800423e:	4b5e      	ldr	r3, [pc, #376]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004240:	60bb      	str	r3, [r7, #8]
      break;
 8004242:	e0b0      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004244:	4b5a      	ldr	r3, [pc, #360]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800424c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800424e:	4b58      	ldr	r3, [pc, #352]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d04a      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425a:	4b55      	ldr	r3, [pc, #340]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	099b      	lsrs	r3, r3, #6
 8004260:	f04f 0400 	mov.w	r4, #0
 8004264:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	ea03 0501 	and.w	r5, r3, r1
 8004270:	ea04 0602 	and.w	r6, r4, r2
 8004274:	4629      	mov	r1, r5
 8004276:	4632      	mov	r2, r6
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	f04f 0400 	mov.w	r4, #0
 8004280:	0154      	lsls	r4, r2, #5
 8004282:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004286:	014b      	lsls	r3, r1, #5
 8004288:	4619      	mov	r1, r3
 800428a:	4622      	mov	r2, r4
 800428c:	1b49      	subs	r1, r1, r5
 800428e:	eb62 0206 	sbc.w	r2, r2, r6
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	f04f 0400 	mov.w	r4, #0
 800429a:	0194      	lsls	r4, r2, #6
 800429c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042a0:	018b      	lsls	r3, r1, #6
 80042a2:	1a5b      	subs	r3, r3, r1
 80042a4:	eb64 0402 	sbc.w	r4, r4, r2
 80042a8:	f04f 0100 	mov.w	r1, #0
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	00e2      	lsls	r2, r4, #3
 80042b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042b6:	00d9      	lsls	r1, r3, #3
 80042b8:	460b      	mov	r3, r1
 80042ba:	4614      	mov	r4, r2
 80042bc:	195b      	adds	r3, r3, r5
 80042be:	eb44 0406 	adc.w	r4, r4, r6
 80042c2:	f04f 0100 	mov.w	r1, #0
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	0262      	lsls	r2, r4, #9
 80042cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042d0:	0259      	lsls	r1, r3, #9
 80042d2:	460b      	mov	r3, r1
 80042d4:	4614      	mov	r4, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	4621      	mov	r1, r4
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f04f 0400 	mov.w	r4, #0
 80042e0:	461a      	mov	r2, r3
 80042e2:	4623      	mov	r3, r4
 80042e4:	f7fc fc0a 	bl	8000afc <__aeabi_uldivmod>
 80042e8:	4603      	mov	r3, r0
 80042ea:	460c      	mov	r4, r1
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	e049      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f0:	4b2f      	ldr	r3, [pc, #188]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	099b      	lsrs	r3, r3, #6
 80042f6:	f04f 0400 	mov.w	r4, #0
 80042fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	ea03 0501 	and.w	r5, r3, r1
 8004306:	ea04 0602 	and.w	r6, r4, r2
 800430a:	4629      	mov	r1, r5
 800430c:	4632      	mov	r2, r6
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	f04f 0400 	mov.w	r4, #0
 8004316:	0154      	lsls	r4, r2, #5
 8004318:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800431c:	014b      	lsls	r3, r1, #5
 800431e:	4619      	mov	r1, r3
 8004320:	4622      	mov	r2, r4
 8004322:	1b49      	subs	r1, r1, r5
 8004324:	eb62 0206 	sbc.w	r2, r2, r6
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	f04f 0400 	mov.w	r4, #0
 8004330:	0194      	lsls	r4, r2, #6
 8004332:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004336:	018b      	lsls	r3, r1, #6
 8004338:	1a5b      	subs	r3, r3, r1
 800433a:	eb64 0402 	sbc.w	r4, r4, r2
 800433e:	f04f 0100 	mov.w	r1, #0
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	00e2      	lsls	r2, r4, #3
 8004348:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800434c:	00d9      	lsls	r1, r3, #3
 800434e:	460b      	mov	r3, r1
 8004350:	4614      	mov	r4, r2
 8004352:	195b      	adds	r3, r3, r5
 8004354:	eb44 0406 	adc.w	r4, r4, r6
 8004358:	f04f 0100 	mov.w	r1, #0
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	02a2      	lsls	r2, r4, #10
 8004362:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004366:	0299      	lsls	r1, r3, #10
 8004368:	460b      	mov	r3, r1
 800436a:	4614      	mov	r4, r2
 800436c:	4618      	mov	r0, r3
 800436e:	4621      	mov	r1, r4
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f04f 0400 	mov.w	r4, #0
 8004376:	461a      	mov	r2, r3
 8004378:	4623      	mov	r3, r4
 800437a:	f7fc fbbf 	bl	8000afc <__aeabi_uldivmod>
 800437e:	4603      	mov	r3, r0
 8004380:	460c      	mov	r4, r1
 8004382:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004384:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	3301      	adds	r3, #1
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	60bb      	str	r3, [r7, #8]
      break;
 800439e:	e002      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a0:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043a2:	60bb      	str	r3, [r7, #8]
      break;
 80043a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a6:	68bb      	ldr	r3, [r7, #8]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b0:	40023800 	.word	0x40023800
 80043b4:	00f42400 	.word	0x00f42400
 80043b8:	007a1200 	.word	0x007a1200

080043bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c0:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c2:	681b      	ldr	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000000 	.word	0x20000000

080043d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043d8:	f7ff fff0 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 80043dc:	4601      	mov	r1, r0
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	0a9b      	lsrs	r3, r3, #10
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	4a03      	ldr	r2, [pc, #12]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ea:	5cd3      	ldrb	r3, [r2, r3]
 80043ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40023800 	.word	0x40023800
 80043f8:	080080b4 	.word	0x080080b4

080043fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004400:	f7ff ffdc 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 8004404:	4601      	mov	r1, r0
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	0b5b      	lsrs	r3, r3, #13
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	4a03      	ldr	r2, [pc, #12]	; (8004420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004412:	5cd3      	ldrb	r3, [r2, r3]
 8004414:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40023800 	.word	0x40023800
 8004420:	080080b4 	.word	0x080080b4

08004424 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004438:	2300      	movs	r3, #0
 800443a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d012      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800444c:	4b69      	ldr	r3, [pc, #420]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4a68      	ldr	r2, [pc, #416]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004452:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004456:	6093      	str	r3, [r2, #8]
 8004458:	4b66      	ldr	r3, [pc, #408]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004460:	4964      	ldr	r1, [pc, #400]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004462:	4313      	orrs	r3, r2
 8004464:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800446e:	2301      	movs	r3, #1
 8004470:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d017      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800447e:	4b5d      	ldr	r3, [pc, #372]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448c:	4959      	ldr	r1, [pc, #356]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800449c:	d101      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800449e:	2301      	movs	r3, #1
 80044a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044aa:	2301      	movs	r3, #1
 80044ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d017      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044ba:	4b4e      	ldr	r3, [pc, #312]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	494a      	ldr	r1, [pc, #296]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044d8:	d101      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80044da:	2301      	movs	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044f6:	2301      	movs	r3, #1
 80044f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 808b 	beq.w	800461e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004508:	4b3a      	ldr	r3, [pc, #232]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	4a39      	ldr	r2, [pc, #228]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004512:	6413      	str	r3, [r2, #64]	; 0x40
 8004514:	4b37      	ldr	r3, [pc, #220]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004520:	4b35      	ldr	r3, [pc, #212]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a34      	ldr	r2, [pc, #208]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800452a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452c:	f7fd ff0e 	bl	800234c <HAL_GetTick>
 8004530:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004534:	f7fd ff0a 	bl	800234c <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e355      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004546:	4b2c      	ldr	r3, [pc, #176]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004552:	4b28      	ldr	r3, [pc, #160]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d035      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	429a      	cmp	r2, r3
 800456e:	d02e      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004570:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004578:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800457a:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004584:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004586:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458a:	4a1a      	ldr	r2, [pc, #104]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004590:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004592:	4a18      	ldr	r2, [pc, #96]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004598:	4b16      	ldr	r3, [pc, #88]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d114      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fd fed2 	bl	800234c <HAL_GetTick>
 80045a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045aa:	e00a      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ac:	f7fd fece 	bl	800234c <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e317      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c2:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0ee      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045da:	d111      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80045dc:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045ea:	400b      	ands	r3, r1
 80045ec:	4901      	ldr	r1, [pc, #4]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
 80045f2:	e00b      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40007000 	.word	0x40007000
 80045fc:	0ffffcff 	.word	0x0ffffcff
 8004600:	4bb0      	ldr	r3, [pc, #704]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4aaf      	ldr	r2, [pc, #700]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004606:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800460a:	6093      	str	r3, [r2, #8]
 800460c:	4bad      	ldr	r3, [pc, #692]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800460e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004618:	49aa      	ldr	r1, [pc, #680]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800461a:	4313      	orrs	r3, r2
 800461c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	d010      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800462a:	4ba6      	ldr	r3, [pc, #664]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800462c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004630:	4aa4      	ldr	r2, [pc, #656]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004636:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800463a:	4ba2      	ldr	r3, [pc, #648]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800463c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	499f      	ldr	r1, [pc, #636]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004658:	4b9a      	ldr	r3, [pc, #616]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004666:	4997      	ldr	r1, [pc, #604]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800467a:	4b92      	ldr	r3, [pc, #584]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004680:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004688:	498e      	ldr	r1, [pc, #568]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800469c:	4b89      	ldr	r3, [pc, #548]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046aa:	4986      	ldr	r1, [pc, #536]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046be:	4b81      	ldr	r3, [pc, #516]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046cc:	497d      	ldr	r1, [pc, #500]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046e0:	4b78      	ldr	r3, [pc, #480]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e6:	f023 0203 	bic.w	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	4975      	ldr	r1, [pc, #468]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004702:	4b70      	ldr	r3, [pc, #448]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004708:	f023 020c 	bic.w	r2, r3, #12
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004710:	496c      	ldr	r1, [pc, #432]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004724:	4b67      	ldr	r3, [pc, #412]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004732:	4964      	ldr	r1, [pc, #400]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004746:	4b5f      	ldr	r3, [pc, #380]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004754:	495b      	ldr	r1, [pc, #364]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004768:	4b56      	ldr	r3, [pc, #344]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800476a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	4953      	ldr	r1, [pc, #332]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800478a:	4b4e      	ldr	r3, [pc, #312]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004790:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004798:	494a      	ldr	r1, [pc, #296]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047ac:	4b45      	ldr	r3, [pc, #276]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ba:	4942      	ldr	r1, [pc, #264]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047ce:	4b3d      	ldr	r3, [pc, #244]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047dc:	4939      	ldr	r1, [pc, #228]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047f0:	4b34      	ldr	r3, [pc, #208]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047fe:	4931      	ldr	r1, [pc, #196]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d011      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004812:	4b2c      	ldr	r3, [pc, #176]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004818:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004820:	4928      	ldr	r1, [pc, #160]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800482c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004830:	d101      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004832:	2301      	movs	r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004842:	2301      	movs	r3, #1
 8004844:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004852:	4b1c      	ldr	r3, [pc, #112]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004858:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004860:	4918      	ldr	r1, [pc, #96]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00b      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004874:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004884:	490f      	ldr	r1, [pc, #60]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d005      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800489a:	f040 80d8 	bne.w	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a08      	ldr	r2, [pc, #32]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048aa:	f7fd fd4f 	bl	800234c <HAL_GetTick>
 80048ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048b0:	e00a      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048b2:	f7fd fd4b 	bl	800234c <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b64      	cmp	r3, #100	; 0x64
 80048be:	d903      	bls.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e196      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80048c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048c8:	4b6c      	ldr	r3, [pc, #432]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1ee      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d021      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d11d      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048e8:	4b64      	ldr	r3, [pc, #400]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ee:	0c1b      	lsrs	r3, r3, #16
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048f6:	4b61      	ldr	r3, [pc, #388]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fc:	0e1b      	lsrs	r3, r3, #24
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	019a      	lsls	r2, r3, #6
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	431a      	orrs	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	061b      	lsls	r3, r3, #24
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	071b      	lsls	r3, r3, #28
 800491c:	4957      	ldr	r1, [pc, #348]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d004      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004934:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004942:	2b00      	cmp	r3, #0
 8004944:	d02e      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800494e:	d129      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004950:	4b4a      	ldr	r3, [pc, #296]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004956:	0c1b      	lsrs	r3, r3, #16
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800495e:	4b47      	ldr	r3, [pc, #284]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004964:	0f1b      	lsrs	r3, r3, #28
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	019a      	lsls	r2, r3, #6
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	041b      	lsls	r3, r3, #16
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	061b      	lsls	r3, r3, #24
 800497e:	431a      	orrs	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	071b      	lsls	r3, r3, #28
 8004984:	493d      	ldr	r1, [pc, #244]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800498c:	4b3b      	ldr	r3, [pc, #236]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800498e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004992:	f023 021f 	bic.w	r2, r3, #31
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	3b01      	subs	r3, #1
 800499c:	4937      	ldr	r1, [pc, #220]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01d      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049b0:	4b32      	ldr	r3, [pc, #200]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b6:	0e1b      	lsrs	r3, r3, #24
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049be:	4b2f      	ldr	r3, [pc, #188]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049c4:	0f1b      	lsrs	r3, r3, #28
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	019a      	lsls	r2, r3, #6
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	041b      	lsls	r3, r3, #16
 80049d8:	431a      	orrs	r2, r3
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	061b      	lsls	r3, r3, #24
 80049de:	431a      	orrs	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	071b      	lsls	r3, r3, #28
 80049e4:	4925      	ldr	r1, [pc, #148]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d011      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	019a      	lsls	r2, r3, #6
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	041b      	lsls	r3, r3, #16
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	061b      	lsls	r3, r3, #24
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	071b      	lsls	r3, r3, #28
 8004a14:	4919      	ldr	r1, [pc, #100]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a1c:	4b17      	ldr	r3, [pc, #92]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a16      	ldr	r2, [pc, #88]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a28:	f7fd fc90 	bl	800234c <HAL_GetTick>
 8004a2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a30:	f7fd fc8c 	bl	800234c <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b64      	cmp	r3, #100	; 0x64
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e0d7      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a42:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	f040 80cd 	bne.w	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a08      	ldr	r2, [pc, #32]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a62:	f7fd fc73 	bl	800234c <HAL_GetTick>
 8004a66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a68:	e00a      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a6a:	f7fd fc6f 	bl	800234c <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b64      	cmp	r3, #100	; 0x64
 8004a76:	d903      	bls.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e0ba      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004a7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a80:	4b5e      	ldr	r3, [pc, #376]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a8c:	d0ed      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d02e      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d12a      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ab6:	4b51      	ldr	r3, [pc, #324]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abc:	0c1b      	lsrs	r3, r3, #16
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ac4:	4b4d      	ldr	r3, [pc, #308]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aca:	0f1b      	lsrs	r3, r3, #28
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	019a      	lsls	r2, r3, #6
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	061b      	lsls	r3, r3, #24
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	071b      	lsls	r3, r3, #28
 8004aea:	4944      	ldr	r1, [pc, #272]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004af2:	4b42      	ldr	r3, [pc, #264]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004af8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	3b01      	subs	r3, #1
 8004b02:	021b      	lsls	r3, r3, #8
 8004b04:	493d      	ldr	r1, [pc, #244]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d022      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b20:	d11d      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b22:	4b36      	ldr	r3, [pc, #216]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	0e1b      	lsrs	r3, r3, #24
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b30:	4b32      	ldr	r3, [pc, #200]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	0f1b      	lsrs	r3, r3, #28
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	019a      	lsls	r2, r3, #6
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	041b      	lsls	r3, r3, #16
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	061b      	lsls	r3, r3, #24
 8004b50:	431a      	orrs	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	071b      	lsls	r3, r3, #28
 8004b56:	4929      	ldr	r1, [pc, #164]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d028      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b6a:	4b24      	ldr	r3, [pc, #144]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	0e1b      	lsrs	r3, r3, #24
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b78:	4b20      	ldr	r3, [pc, #128]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7e:	0c1b      	lsrs	r3, r3, #16
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	019a      	lsls	r2, r3, #6
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	041b      	lsls	r3, r3, #16
 8004b90:	431a      	orrs	r2, r3
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	061b      	lsls	r3, r3, #24
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	071b      	lsls	r3, r3, #28
 8004b9e:	4917      	ldr	r1, [pc, #92]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	4911      	ldr	r1, [pc, #68]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a0e      	ldr	r2, [pc, #56]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc8:	f7fd fbc0 	bl	800234c <HAL_GetTick>
 8004bcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bd0:	f7fd fbbc 	bl	800234c <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	; 0x64
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e007      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bee:	d1ef      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40023800 	.word	0x40023800

08004c00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e084      	b.n	8004d1c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7fc ff1d 	bl	8001a6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2202      	movs	r2, #2
 8004c36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c48:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c52:	d902      	bls.n	8004c5a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	e002      	b.n	8004c60 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c5e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c68:	d007      	beq.n	8004c7a <HAL_SPI_Init+0x7a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c72:	d002      	beq.n	8004c7a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10b      	bne.n	8004c9a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c8a:	d903      	bls.n	8004c94 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
 8004c92:	e002      	b.n	8004c9a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	ea42 0103 	orr.w	r1, r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	0c1b      	lsrs	r3, r3, #16
 8004cda:	f003 0204 	and.w	r2, r3, #4
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	ea42 0103 	orr.w	r1, r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69da      	ldr	r2, [r3, #28]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e01d      	b.n	8004d72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fd f904 	bl	8001f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4619      	mov	r1, r3
 8004d62:	4610      	mov	r0, r2
 8004d64:	f000 fc0e 	bl	8005584 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <HAL_TIM_Base_Start_IT+0x50>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b06      	cmp	r3, #6
 8004da4:	d00b      	beq.n	8004dbe <HAL_TIM_Base_Start_IT+0x42>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dac:	d007      	beq.n	8004dbe <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f042 0201 	orr.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	00010007 	.word	0x00010007

08004dd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e01d      	b.n	8004e1e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f815 	bl	8004e26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f000 fbb8 	bl	8005584 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
	...

08004e3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	6839      	ldr	r1, [r7, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 ff30 	bl	8005cb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <HAL_TIM_PWM_Start+0x7c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d004      	beq.n	8004e68 <HAL_TIM_PWM_Start+0x2c>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a16      	ldr	r2, [pc, #88]	; (8004ebc <HAL_TIM_PWM_Start+0x80>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d101      	bne.n	8004e6c <HAL_TIM_PWM_Start+0x30>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <HAL_TIM_PWM_Start+0x32>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d007      	beq.n	8004e82 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	4b0d      	ldr	r3, [pc, #52]	; (8004ec0 <HAL_TIM_PWM_Start+0x84>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b06      	cmp	r3, #6
 8004e92:	d00b      	beq.n	8004eac <HAL_TIM_PWM_Start+0x70>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9a:	d007      	beq.n	8004eac <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40010400 	.word	0x40010400
 8004ec0:	00010007 	.word	0x00010007

08004ec4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e02d      	b.n	8004f34 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d106      	bne.n	8004ef2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f825 	bl	8004f3c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3304      	adds	r3, #4
 8004f02:	4619      	mov	r1, r3
 8004f04:	4610      	mov	r0, r2
 8004f06:	f000 fb3d 	bl	8005584 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0208 	bic.w	r2, r2, #8
 8004f18:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6819      	ldr	r1, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d122      	bne.n	8004fac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d11b      	bne.n	8004fac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0202 	mvn.w	r2, #2
 8004f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fad8 	bl	8005548 <HAL_TIM_IC_CaptureCallback>
 8004f98:	e005      	b.n	8004fa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 faca 	bl	8005534 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fadb 	bl	800555c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f003 0304 	and.w	r3, r3, #4
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d122      	bne.n	8005000 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d11b      	bne.n	8005000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0204 	mvn.w	r2, #4
 8004fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 faae 	bl	8005548 <HAL_TIM_IC_CaptureCallback>
 8004fec:	e005      	b.n	8004ffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 faa0 	bl	8005534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fab1 	bl	800555c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b08      	cmp	r3, #8
 800500c:	d122      	bne.n	8005054 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b08      	cmp	r3, #8
 800501a:	d11b      	bne.n	8005054 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0208 	mvn.w	r2, #8
 8005024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2204      	movs	r2, #4
 800502a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fa84 	bl	8005548 <HAL_TIM_IC_CaptureCallback>
 8005040:	e005      	b.n	800504e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fa76 	bl	8005534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fa87 	bl	800555c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0310 	and.w	r3, r3, #16
 800505e:	2b10      	cmp	r3, #16
 8005060:	d122      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b10      	cmp	r3, #16
 800506e:	d11b      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f06f 0210 	mvn.w	r2, #16
 8005078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2208      	movs	r2, #8
 800507e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fa5a 	bl	8005548 <HAL_TIM_IC_CaptureCallback>
 8005094:	e005      	b.n	80050a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fa4c 	bl	8005534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fa5d 	bl	800555c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d10e      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d107      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0201 	mvn.w	r2, #1
 80050cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fc fbc8 	bl	8001864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050de:	2b80      	cmp	r3, #128	; 0x80
 80050e0:	d10e      	bne.n	8005100 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ec:	2b80      	cmp	r3, #128	; 0x80
 80050ee:	d107      	bne.n	8005100 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fe98 	bl	8005e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800510e:	d10e      	bne.n	800512e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511a:	2b80      	cmp	r3, #128	; 0x80
 800511c:	d107      	bne.n	800512e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fe8b 	bl	8005e44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005138:	2b40      	cmp	r3, #64	; 0x40
 800513a:	d10e      	bne.n	800515a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d107      	bne.n	800515a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fa0b 	bl	8005570 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b20      	cmp	r3, #32
 8005166:	d10e      	bne.n	8005186 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b20      	cmp	r3, #32
 8005174:	d107      	bne.n	8005186 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f06f 0220 	mvn.w	r2, #32
 800517e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fe4b 	bl	8005e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d101      	bne.n	80051aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80051a6:	2302      	movs	r3, #2
 80051a8:	e105      	b.n	80053b6 <HAL_TIM_PWM_ConfigChannel+0x226>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2202      	movs	r2, #2
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b14      	cmp	r3, #20
 80051be:	f200 80f0 	bhi.w	80053a2 <HAL_TIM_PWM_ConfigChannel+0x212>
 80051c2:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80051c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c8:	0800521d 	.word	0x0800521d
 80051cc:	080053a3 	.word	0x080053a3
 80051d0:	080053a3 	.word	0x080053a3
 80051d4:	080053a3 	.word	0x080053a3
 80051d8:	0800525d 	.word	0x0800525d
 80051dc:	080053a3 	.word	0x080053a3
 80051e0:	080053a3 	.word	0x080053a3
 80051e4:	080053a3 	.word	0x080053a3
 80051e8:	0800529f 	.word	0x0800529f
 80051ec:	080053a3 	.word	0x080053a3
 80051f0:	080053a3 	.word	0x080053a3
 80051f4:	080053a3 	.word	0x080053a3
 80051f8:	080052df 	.word	0x080052df
 80051fc:	080053a3 	.word	0x080053a3
 8005200:	080053a3 	.word	0x080053a3
 8005204:	080053a3 	.word	0x080053a3
 8005208:	08005321 	.word	0x08005321
 800520c:	080053a3 	.word	0x080053a3
 8005210:	080053a3 	.word	0x080053a3
 8005214:	080053a3 	.word	0x080053a3
 8005218:	08005361 	.word	0x08005361
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fa4e 	bl	80056c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0208 	orr.w	r2, r2, #8
 8005236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0204 	bic.w	r2, r2, #4
 8005246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6999      	ldr	r1, [r3, #24]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	691a      	ldr	r2, [r3, #16]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	619a      	str	r2, [r3, #24]
      break;
 800525a:	e0a3      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	4618      	mov	r0, r3
 8005264:	f000 faa0 	bl	80057a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699a      	ldr	r2, [r3, #24]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6999      	ldr	r1, [r3, #24]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	021a      	lsls	r2, r3, #8
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	619a      	str	r2, [r3, #24]
      break;
 800529c:	e082      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 faf7 	bl	8005898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69da      	ldr	r2, [r3, #28]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0208 	orr.w	r2, r2, #8
 80052b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69da      	ldr	r2, [r3, #28]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0204 	bic.w	r2, r2, #4
 80052c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69d9      	ldr	r1, [r3, #28]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	61da      	str	r2, [r3, #28]
      break;
 80052dc:	e062      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68b9      	ldr	r1, [r7, #8]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 fb4d 	bl	8005984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69da      	ldr	r2, [r3, #28]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69da      	ldr	r2, [r3, #28]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005308:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69d9      	ldr	r1, [r3, #28]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	021a      	lsls	r2, r3, #8
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	61da      	str	r2, [r3, #28]
      break;
 800531e:	e041      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	4618      	mov	r0, r3
 8005328:	f000 fb84 	bl	8005a34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0208 	orr.w	r2, r2, #8
 800533a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0204 	bic.w	r2, r2, #4
 800534a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800535e:	e021      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fbb6 	bl	8005ad8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800537a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	021a      	lsls	r2, r3, #8
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80053a0:	e000      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80053a2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop

080053c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_TIM_ConfigClockSource+0x18>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e0a6      	b.n	8005526 <HAL_TIM_ConfigClockSource+0x166>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4b4f      	ldr	r3, [pc, #316]	; (8005530 <HAL_TIM_ConfigClockSource+0x170>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b40      	cmp	r3, #64	; 0x40
 800540e:	d067      	beq.n	80054e0 <HAL_TIM_ConfigClockSource+0x120>
 8005410:	2b40      	cmp	r3, #64	; 0x40
 8005412:	d80b      	bhi.n	800542c <HAL_TIM_ConfigClockSource+0x6c>
 8005414:	2b10      	cmp	r3, #16
 8005416:	d073      	beq.n	8005500 <HAL_TIM_ConfigClockSource+0x140>
 8005418:	2b10      	cmp	r3, #16
 800541a:	d802      	bhi.n	8005422 <HAL_TIM_ConfigClockSource+0x62>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d06f      	beq.n	8005500 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005420:	e078      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005422:	2b20      	cmp	r3, #32
 8005424:	d06c      	beq.n	8005500 <HAL_TIM_ConfigClockSource+0x140>
 8005426:	2b30      	cmp	r3, #48	; 0x30
 8005428:	d06a      	beq.n	8005500 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800542a:	e073      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800542c:	2b70      	cmp	r3, #112	; 0x70
 800542e:	d00d      	beq.n	800544c <HAL_TIM_ConfigClockSource+0x8c>
 8005430:	2b70      	cmp	r3, #112	; 0x70
 8005432:	d804      	bhi.n	800543e <HAL_TIM_ConfigClockSource+0x7e>
 8005434:	2b50      	cmp	r3, #80	; 0x50
 8005436:	d033      	beq.n	80054a0 <HAL_TIM_ConfigClockSource+0xe0>
 8005438:	2b60      	cmp	r3, #96	; 0x60
 800543a:	d041      	beq.n	80054c0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800543c:	e06a      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800543e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005442:	d066      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0x152>
 8005444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005448:	d017      	beq.n	800547a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800544a:	e063      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	6899      	ldr	r1, [r3, #8]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f000 fc0a 	bl	8005c74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800546e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	609a      	str	r2, [r3, #8]
      break;
 8005478:	e04c      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6899      	ldr	r1, [r3, #8]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f000 fbf3 	bl	8005c74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800549c:	609a      	str	r2, [r3, #8]
      break;
 800549e:	e039      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6818      	ldr	r0, [r3, #0]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	6859      	ldr	r1, [r3, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	461a      	mov	r2, r3
 80054ae:	f000 fb67 	bl	8005b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2150      	movs	r1, #80	; 0x50
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fbc0 	bl	8005c3e <TIM_ITRx_SetConfig>
      break;
 80054be:	e029      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6818      	ldr	r0, [r3, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	6859      	ldr	r1, [r3, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	461a      	mov	r2, r3
 80054ce:	f000 fb86 	bl	8005bde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2160      	movs	r1, #96	; 0x60
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fbb0 	bl	8005c3e <TIM_ITRx_SetConfig>
      break;
 80054de:	e019      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	6859      	ldr	r1, [r3, #4]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	461a      	mov	r2, r3
 80054ee:	f000 fb47 	bl	8005b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2140      	movs	r1, #64	; 0x40
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fba0 	bl	8005c3e <TIM_ITRx_SetConfig>
      break;
 80054fe:	e009      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4619      	mov	r1, r3
 800550a:	4610      	mov	r0, r2
 800550c:	f000 fb97 	bl	8005c3e <TIM_ITRx_SetConfig>
      break;
 8005510:	e000      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005512:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	fffeff88 	.word	0xfffeff88

08005534 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a40      	ldr	r2, [pc, #256]	; (8005698 <TIM_Base_SetConfig+0x114>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d013      	beq.n	80055c4 <TIM_Base_SetConfig+0x40>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a2:	d00f      	beq.n	80055c4 <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a3d      	ldr	r2, [pc, #244]	; (800569c <TIM_Base_SetConfig+0x118>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d00b      	beq.n	80055c4 <TIM_Base_SetConfig+0x40>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a3c      	ldr	r2, [pc, #240]	; (80056a0 <TIM_Base_SetConfig+0x11c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d007      	beq.n	80055c4 <TIM_Base_SetConfig+0x40>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a3b      	ldr	r2, [pc, #236]	; (80056a4 <TIM_Base_SetConfig+0x120>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d003      	beq.n	80055c4 <TIM_Base_SetConfig+0x40>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a3a      	ldr	r2, [pc, #232]	; (80056a8 <TIM_Base_SetConfig+0x124>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d108      	bne.n	80055d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2f      	ldr	r2, [pc, #188]	; (8005698 <TIM_Base_SetConfig+0x114>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d02b      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e4:	d027      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2c      	ldr	r2, [pc, #176]	; (800569c <TIM_Base_SetConfig+0x118>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d023      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a2b      	ldr	r2, [pc, #172]	; (80056a0 <TIM_Base_SetConfig+0x11c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d01f      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a2a      	ldr	r2, [pc, #168]	; (80056a4 <TIM_Base_SetConfig+0x120>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d01b      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a29      	ldr	r2, [pc, #164]	; (80056a8 <TIM_Base_SetConfig+0x124>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d017      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a28      	ldr	r2, [pc, #160]	; (80056ac <TIM_Base_SetConfig+0x128>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a27      	ldr	r2, [pc, #156]	; (80056b0 <TIM_Base_SetConfig+0x12c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00f      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a26      	ldr	r2, [pc, #152]	; (80056b4 <TIM_Base_SetConfig+0x130>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00b      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a25      	ldr	r2, [pc, #148]	; (80056b8 <TIM_Base_SetConfig+0x134>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d007      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a24      	ldr	r2, [pc, #144]	; (80056bc <TIM_Base_SetConfig+0x138>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d003      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a23      	ldr	r2, [pc, #140]	; (80056c0 <TIM_Base_SetConfig+0x13c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d108      	bne.n	8005648 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800563c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a0a      	ldr	r2, [pc, #40]	; (8005698 <TIM_Base_SetConfig+0x114>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d003      	beq.n	800567c <TIM_Base_SetConfig+0xf8>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a0c      	ldr	r2, [pc, #48]	; (80056a8 <TIM_Base_SetConfig+0x124>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d103      	bne.n	8005684 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	691a      	ldr	r2, [r3, #16]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	615a      	str	r2, [r3, #20]
}
 800568a:	bf00      	nop
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	40010000 	.word	0x40010000
 800569c:	40000400 	.word	0x40000400
 80056a0:	40000800 	.word	0x40000800
 80056a4:	40000c00 	.word	0x40000c00
 80056a8:	40010400 	.word	0x40010400
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40014400 	.word	0x40014400
 80056b4:	40014800 	.word	0x40014800
 80056b8:	40001800 	.word	0x40001800
 80056bc:	40001c00 	.word	0x40001c00
 80056c0:	40002000 	.word	0x40002000

080056c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f023 0201 	bic.w	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4b2b      	ldr	r3, [pc, #172]	; (800579c <TIM_OC1_SetConfig+0xd8>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0303 	bic.w	r3, r3, #3
 80056fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4313      	orrs	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f023 0302 	bic.w	r3, r3, #2
 800570c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	4313      	orrs	r3, r2
 8005716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a21      	ldr	r2, [pc, #132]	; (80057a0 <TIM_OC1_SetConfig+0xdc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d003      	beq.n	8005728 <TIM_OC1_SetConfig+0x64>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a20      	ldr	r2, [pc, #128]	; (80057a4 <TIM_OC1_SetConfig+0xe0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d10c      	bne.n	8005742 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f023 0308 	bic.w	r3, r3, #8
 800572e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	4313      	orrs	r3, r2
 8005738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f023 0304 	bic.w	r3, r3, #4
 8005740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a16      	ldr	r2, [pc, #88]	; (80057a0 <TIM_OC1_SetConfig+0xdc>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d003      	beq.n	8005752 <TIM_OC1_SetConfig+0x8e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a15      	ldr	r2, [pc, #84]	; (80057a4 <TIM_OC1_SetConfig+0xe0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d111      	bne.n	8005776 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	621a      	str	r2, [r3, #32]
}
 8005790:	bf00      	nop
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	fffeff8f 	.word	0xfffeff8f
 80057a0:	40010000 	.word	0x40010000
 80057a4:	40010400 	.word	0x40010400

080057a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f023 0210 	bic.w	r2, r3, #16
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4b2e      	ldr	r3, [pc, #184]	; (800588c <TIM_OC2_SetConfig+0xe4>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	021b      	lsls	r3, r3, #8
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f023 0320 	bic.w	r3, r3, #32
 80057f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a23      	ldr	r2, [pc, #140]	; (8005890 <TIM_OC2_SetConfig+0xe8>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d003      	beq.n	8005810 <TIM_OC2_SetConfig+0x68>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a22      	ldr	r2, [pc, #136]	; (8005894 <TIM_OC2_SetConfig+0xec>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d10d      	bne.n	800582c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800582a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a18      	ldr	r2, [pc, #96]	; (8005890 <TIM_OC2_SetConfig+0xe8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d003      	beq.n	800583c <TIM_OC2_SetConfig+0x94>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a17      	ldr	r2, [pc, #92]	; (8005894 <TIM_OC2_SetConfig+0xec>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d113      	bne.n	8005864 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800584a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	feff8fff 	.word	0xfeff8fff
 8005890:	40010000 	.word	0x40010000
 8005894:	40010400 	.word	0x40010400

08005898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4b2d      	ldr	r3, [pc, #180]	; (8005978 <TIM_OC3_SetConfig+0xe0>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0303 	bic.w	r3, r3, #3
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a22      	ldr	r2, [pc, #136]	; (800597c <TIM_OC3_SetConfig+0xe4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d003      	beq.n	80058fe <TIM_OC3_SetConfig+0x66>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a21      	ldr	r2, [pc, #132]	; (8005980 <TIM_OC3_SetConfig+0xe8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d10d      	bne.n	800591a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005904:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	021b      	lsls	r3, r3, #8
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a17      	ldr	r2, [pc, #92]	; (800597c <TIM_OC3_SetConfig+0xe4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d003      	beq.n	800592a <TIM_OC3_SetConfig+0x92>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a16      	ldr	r2, [pc, #88]	; (8005980 <TIM_OC3_SetConfig+0xe8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d113      	bne.n	8005952 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	621a      	str	r2, [r3, #32]
}
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	fffeff8f 	.word	0xfffeff8f
 800597c:	40010000 	.word	0x40010000
 8005980:	40010400 	.word	0x40010400

08005984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4b1e      	ldr	r3, [pc, #120]	; (8005a28 <TIM_OC4_SetConfig+0xa4>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	031b      	lsls	r3, r3, #12
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a13      	ldr	r2, [pc, #76]	; (8005a2c <TIM_OC4_SetConfig+0xa8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d003      	beq.n	80059ec <TIM_OC4_SetConfig+0x68>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a12      	ldr	r2, [pc, #72]	; (8005a30 <TIM_OC4_SetConfig+0xac>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d109      	bne.n	8005a00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	019b      	lsls	r3, r3, #6
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	621a      	str	r2, [r3, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	feff8fff 	.word	0xfeff8fff
 8005a2c:	40010000 	.word	0x40010000
 8005a30:	40010400 	.word	0x40010400

08005a34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4b1b      	ldr	r3, [pc, #108]	; (8005acc <TIM_OC5_SetConfig+0x98>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	041b      	lsls	r3, r3, #16
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a12      	ldr	r2, [pc, #72]	; (8005ad0 <TIM_OC5_SetConfig+0x9c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d003      	beq.n	8005a92 <TIM_OC5_SetConfig+0x5e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a11      	ldr	r2, [pc, #68]	; (8005ad4 <TIM_OC5_SetConfig+0xa0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d109      	bne.n	8005aa6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	021b      	lsls	r3, r3, #8
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	621a      	str	r2, [r3, #32]
}
 8005ac0:	bf00      	nop
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	fffeff8f 	.word	0xfffeff8f
 8005ad0:	40010000 	.word	0x40010000
 8005ad4:	40010400 	.word	0x40010400

08005ad8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4b1c      	ldr	r3, [pc, #112]	; (8005b74 <TIM_OC6_SetConfig+0x9c>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	021b      	lsls	r3, r3, #8
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	051b      	lsls	r3, r3, #20
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a13      	ldr	r2, [pc, #76]	; (8005b78 <TIM_OC6_SetConfig+0xa0>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d003      	beq.n	8005b38 <TIM_OC6_SetConfig+0x60>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a12      	ldr	r2, [pc, #72]	; (8005b7c <TIM_OC6_SetConfig+0xa4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d109      	bne.n	8005b4c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	029b      	lsls	r3, r3, #10
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	621a      	str	r2, [r3, #32]
}
 8005b66:	bf00      	nop
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	feff8fff 	.word	0xfeff8fff
 8005b78:	40010000 	.word	0x40010000
 8005b7c:	40010400 	.word	0x40010400

08005b80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	f023 0201 	bic.w	r2, r3, #1
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f023 030a 	bic.w	r3, r3, #10
 8005bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	621a      	str	r2, [r3, #32]
}
 8005bd2:	bf00      	nop
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b087      	sub	sp, #28
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f023 0210 	bic.w	r2, r3, #16
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	031b      	lsls	r3, r3, #12
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	621a      	str	r2, [r3, #32]
}
 8005c32:	bf00      	nop
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b085      	sub	sp, #20
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f043 0307 	orr.w	r3, r3, #7
 8005c60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	609a      	str	r2, [r3, #8]
}
 8005c68:	bf00      	nop
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	021a      	lsls	r2, r3, #8
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	609a      	str	r2, [r3, #8]
}
 8005ca8:	bf00      	nop
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f003 031f 	and.w	r3, r3, #31
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a1a      	ldr	r2, [r3, #32]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	401a      	ands	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a1a      	ldr	r2, [r3, #32]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cec:	431a      	orrs	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	621a      	str	r2, [r3, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
	...

08005d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e06d      	b.n	8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a30      	ldr	r2, [pc, #192]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d004      	beq.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a2f      	ldr	r2, [pc, #188]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d108      	bne.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a20      	ldr	r2, [pc, #128]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d022      	beq.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8a:	d01d      	beq.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1d      	ldr	r2, [pc, #116]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d018      	beq.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a1c      	ldr	r2, [pc, #112]	; (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d013      	beq.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1a      	ldr	r2, [pc, #104]	; (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00e      	beq.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a15      	ldr	r2, [pc, #84]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d009      	beq.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a16      	ldr	r2, [pc, #88]	; (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a15      	ldr	r2, [pc, #84]	; (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d10c      	bne.n	8005de2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	40010000 	.word	0x40010000
 8005e04:	40010400 	.word	0x40010400
 8005e08:	40000400 	.word	0x40000400
 8005e0c:	40000800 	.word	0x40000800
 8005e10:	40000c00 	.word	0x40000c00
 8005e14:	40014000 	.word	0x40014000
 8005e18:	40001800 	.word	0x40001800

08005e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e040      	b.n	8005eec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fc f9a0 	bl	80021c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2224      	movs	r2, #36	; 0x24
 8005e84:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0201 	bic.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fa70 	bl	800637c <UART_SetConfig>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d101      	bne.n	8005ea6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e022      	b.n	8005eec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fd0e 	bl	80068d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ec2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ed2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fd95 	bl	8006a14 <UART_CheckIdleState>
 8005eea:	4603      	mov	r3, r0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	4613      	mov	r3, r2
 8005f00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d144      	bne.n	8005f94 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <HAL_UART_Transmit_IT+0x22>
 8005f10:	88fb      	ldrh	r3, [r7, #6]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e03d      	b.n	8005f96 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_UART_Transmit_IT+0x34>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e036      	b.n	8005f96 <HAL_UART_Transmit_IT+0xa2>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	88fa      	ldrh	r2, [r7, #6]
 8005f3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	88fa      	ldrh	r2, [r7, #6]
 8005f42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2221      	movs	r2, #33	; 0x21
 8005f56:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f60:	d107      	bne.n	8005f72 <HAL_UART_Transmit_IT+0x7e>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d103      	bne.n	8005f72 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4a0d      	ldr	r2, [pc, #52]	; (8005fa4 <HAL_UART_Transmit_IT+0xb0>)
 8005f6e:	665a      	str	r2, [r3, #100]	; 0x64
 8005f70:	e002      	b.n	8005f78 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4a0c      	ldr	r2, [pc, #48]	; (8005fa8 <HAL_UART_Transmit_IT+0xb4>)
 8005f76:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f8e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	e000      	b.n	8005f96 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8005f94:	2302      	movs	r3, #2
  }
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	08006c47 	.word	0x08006c47
 8005fa8:	08006bd5 	.word	0x08006bd5

08005fac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	f040 808a 	bne.w	80060d8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <HAL_UART_Receive_IT+0x24>
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e082      	b.n	80060da <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_UART_Receive_IT+0x36>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e07b      	b.n	80060da <HAL_UART_Receive_IT+0x12e>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	88fa      	ldrh	r2, [r7, #6]
 8005ff4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	88fa      	ldrh	r2, [r7, #6]
 8005ffc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600e:	d10e      	bne.n	800602e <HAL_UART_Receive_IT+0x82>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d105      	bne.n	8006024 <HAL_UART_Receive_IT+0x78>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800601e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006022:	e02d      	b.n	8006080 <HAL_UART_Receive_IT+0xd4>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	22ff      	movs	r2, #255	; 0xff
 8006028:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800602c:	e028      	b.n	8006080 <HAL_UART_Receive_IT+0xd4>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10d      	bne.n	8006052 <HAL_UART_Receive_IT+0xa6>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d104      	bne.n	8006048 <HAL_UART_Receive_IT+0x9c>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	22ff      	movs	r2, #255	; 0xff
 8006042:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006046:	e01b      	b.n	8006080 <HAL_UART_Receive_IT+0xd4>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	227f      	movs	r2, #127	; 0x7f
 800604c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006050:	e016      	b.n	8006080 <HAL_UART_Receive_IT+0xd4>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800605a:	d10d      	bne.n	8006078 <HAL_UART_Receive_IT+0xcc>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d104      	bne.n	800606e <HAL_UART_Receive_IT+0xc2>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	227f      	movs	r2, #127	; 0x7f
 8006068:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800606c:	e008      	b.n	8006080 <HAL_UART_Receive_IT+0xd4>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	223f      	movs	r2, #63	; 0x3f
 8006072:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006076:	e003      	b.n	8006080 <HAL_UART_Receive_IT+0xd4>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2222      	movs	r2, #34	; 0x22
 800608a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0201 	orr.w	r2, r2, #1
 800609a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a4:	d107      	bne.n	80060b6 <HAL_UART_Receive_IT+0x10a>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d103      	bne.n	80060b6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4a0d      	ldr	r2, [pc, #52]	; (80060e8 <HAL_UART_Receive_IT+0x13c>)
 80060b2:	661a      	str	r2, [r3, #96]	; 0x60
 80060b4:	e002      	b.n	80060bc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4a0c      	ldr	r2, [pc, #48]	; (80060ec <HAL_UART_Receive_IT+0x140>)
 80060ba:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80060d2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80060d4:	2300      	movs	r3, #0
 80060d6:	e000      	b.n	80060da <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80060d8:	2302      	movs	r3, #2
  }
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	08006d9b 	.word	0x08006d9b
 80060ec:	08006cf5 	.word	0x08006cf5

080060f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006110:	69fa      	ldr	r2, [r7, #28]
 8006112:	f640 030f 	movw	r3, #2063	; 0x80f
 8006116:	4013      	ands	r3, r2
 8006118:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d113      	bne.n	8006148 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f003 0320 	and.w	r3, r3, #32
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00e      	beq.n	8006148 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	f003 0320 	and.w	r3, r3, #32
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 8100 	beq.w	800633e <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	4798      	blx	r3
      }
      return;
 8006146:	e0fa      	b.n	800633e <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 80d5 	beq.w	80062fa <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d105      	bne.n	8006166 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 80ca 	beq.w	80062fa <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00e      	beq.n	800618e <HAL_UART_IRQHandler+0x9e>
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2201      	movs	r2, #1
 8006180:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006186:	f043 0201 	orr.w	r2, r3, #1
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00e      	beq.n	80061b6 <HAL_UART_IRQHandler+0xc6>
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d009      	beq.n	80061b6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2202      	movs	r2, #2
 80061a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ae:	f043 0204 	orr.w	r2, r3, #4
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00e      	beq.n	80061de <HAL_UART_IRQHandler+0xee>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d009      	beq.n	80061de <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2204      	movs	r2, #4
 80061d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061d6:	f043 0202 	orr.w	r2, r3, #2
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d013      	beq.n	8006210 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d104      	bne.n	80061fc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d009      	beq.n	8006210 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2208      	movs	r2, #8
 8006202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006208:	f043 0208 	orr.w	r2, r3, #8
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00f      	beq.n	800623a <HAL_UART_IRQHandler+0x14a>
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00a      	beq.n	800623a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800622c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006232:	f043 0220 	orr.w	r2, r3, #32
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d07f      	beq.n	8006342 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00c      	beq.n	8006266 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	d007      	beq.n	8006266 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800626a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006276:	2b40      	cmp	r3, #64	; 0x40
 8006278:	d004      	beq.n	8006284 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006280:	2b00      	cmp	r3, #0
 8006282:	d031      	beq.n	80062e8 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fc6f 	bl	8006b68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006294:	2b40      	cmp	r3, #64	; 0x40
 8006296:	d123      	bne.n	80062e0 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062a6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d013      	beq.n	80062d8 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b4:	4a26      	ldr	r2, [pc, #152]	; (8006350 <HAL_UART_IRQHandler+0x260>)
 80062b6:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fc fa7f 	bl	80027c0 <HAL_DMA_Abort_IT>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d016      	beq.n	80062f6 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80062d2:	4610      	mov	r0, r2
 80062d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d6:	e00e      	b.n	80062f6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f845 	bl	8006368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062de:	e00a      	b.n	80062f6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f841 	bl	8006368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e6:	e006      	b.n	80062f6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f83d 	bl	8006368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80062f4:	e025      	b.n	8006342 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f6:	bf00      	nop
    return;
 80062f8:	e023      	b.n	8006342 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00d      	beq.n	8006320 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630a:	2b00      	cmp	r3, #0
 800630c:	d008      	beq.n	8006320 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006312:	2b00      	cmp	r3, #0
 8006314:	d017      	beq.n	8006346 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	4798      	blx	r3
    }
    return;
 800631e:	e012      	b.n	8006346 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00e      	beq.n	8006348 <HAL_UART_IRQHandler+0x258>
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006330:	2b00      	cmp	r3, #0
 8006332:	d009      	beq.n	8006348 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fcc4 	bl	8006cc2 <UART_EndTransmit_IT>
    return;
 800633a:	bf00      	nop
 800633c:	e004      	b.n	8006348 <HAL_UART_IRQHandler+0x258>
      return;
 800633e:	bf00      	nop
 8006340:	e002      	b.n	8006348 <HAL_UART_IRQHandler+0x258>
    return;
 8006342:	bf00      	nop
 8006344:	e000      	b.n	8006348 <HAL_UART_IRQHandler+0x258>
    return;
 8006346:	bf00      	nop
  }

}
 8006348:	3720      	adds	r7, #32
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	08006ba9 	.word	0x08006ba9

08006354 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b088      	sub	sp, #32
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006384:	2300      	movs	r3, #0
 8006386:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	4bb1      	ldr	r3, [pc, #708]	; (8006670 <UART_SetConfig+0x2f4>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6812      	ldr	r2, [r2, #0]
 80063b2:	6939      	ldr	r1, [r7, #16]
 80063b4:	430b      	orrs	r3, r1
 80063b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a9f      	ldr	r2, [pc, #636]	; (8006674 <UART_SetConfig+0x2f8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d121      	bne.n	8006440 <UART_SetConfig+0xc4>
 80063fc:	4b9e      	ldr	r3, [pc, #632]	; (8006678 <UART_SetConfig+0x2fc>)
 80063fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	2b03      	cmp	r3, #3
 8006408:	d816      	bhi.n	8006438 <UART_SetConfig+0xbc>
 800640a:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <UART_SetConfig+0x94>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006421 	.word	0x08006421
 8006414:	0800642d 	.word	0x0800642d
 8006418:	08006427 	.word	0x08006427
 800641c:	08006433 	.word	0x08006433
 8006420:	2301      	movs	r3, #1
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e151      	b.n	80066ca <UART_SetConfig+0x34e>
 8006426:	2302      	movs	r3, #2
 8006428:	77fb      	strb	r3, [r7, #31]
 800642a:	e14e      	b.n	80066ca <UART_SetConfig+0x34e>
 800642c:	2304      	movs	r3, #4
 800642e:	77fb      	strb	r3, [r7, #31]
 8006430:	e14b      	b.n	80066ca <UART_SetConfig+0x34e>
 8006432:	2308      	movs	r3, #8
 8006434:	77fb      	strb	r3, [r7, #31]
 8006436:	e148      	b.n	80066ca <UART_SetConfig+0x34e>
 8006438:	2310      	movs	r3, #16
 800643a:	77fb      	strb	r3, [r7, #31]
 800643c:	bf00      	nop
 800643e:	e144      	b.n	80066ca <UART_SetConfig+0x34e>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a8d      	ldr	r2, [pc, #564]	; (800667c <UART_SetConfig+0x300>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d134      	bne.n	80064b4 <UART_SetConfig+0x138>
 800644a:	4b8b      	ldr	r3, [pc, #556]	; (8006678 <UART_SetConfig+0x2fc>)
 800644c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006450:	f003 030c 	and.w	r3, r3, #12
 8006454:	2b0c      	cmp	r3, #12
 8006456:	d829      	bhi.n	80064ac <UART_SetConfig+0x130>
 8006458:	a201      	add	r2, pc, #4	; (adr r2, 8006460 <UART_SetConfig+0xe4>)
 800645a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645e:	bf00      	nop
 8006460:	08006495 	.word	0x08006495
 8006464:	080064ad 	.word	0x080064ad
 8006468:	080064ad 	.word	0x080064ad
 800646c:	080064ad 	.word	0x080064ad
 8006470:	080064a1 	.word	0x080064a1
 8006474:	080064ad 	.word	0x080064ad
 8006478:	080064ad 	.word	0x080064ad
 800647c:	080064ad 	.word	0x080064ad
 8006480:	0800649b 	.word	0x0800649b
 8006484:	080064ad 	.word	0x080064ad
 8006488:	080064ad 	.word	0x080064ad
 800648c:	080064ad 	.word	0x080064ad
 8006490:	080064a7 	.word	0x080064a7
 8006494:	2300      	movs	r3, #0
 8006496:	77fb      	strb	r3, [r7, #31]
 8006498:	e117      	b.n	80066ca <UART_SetConfig+0x34e>
 800649a:	2302      	movs	r3, #2
 800649c:	77fb      	strb	r3, [r7, #31]
 800649e:	e114      	b.n	80066ca <UART_SetConfig+0x34e>
 80064a0:	2304      	movs	r3, #4
 80064a2:	77fb      	strb	r3, [r7, #31]
 80064a4:	e111      	b.n	80066ca <UART_SetConfig+0x34e>
 80064a6:	2308      	movs	r3, #8
 80064a8:	77fb      	strb	r3, [r7, #31]
 80064aa:	e10e      	b.n	80066ca <UART_SetConfig+0x34e>
 80064ac:	2310      	movs	r3, #16
 80064ae:	77fb      	strb	r3, [r7, #31]
 80064b0:	bf00      	nop
 80064b2:	e10a      	b.n	80066ca <UART_SetConfig+0x34e>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a71      	ldr	r2, [pc, #452]	; (8006680 <UART_SetConfig+0x304>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d120      	bne.n	8006500 <UART_SetConfig+0x184>
 80064be:	4b6e      	ldr	r3, [pc, #440]	; (8006678 <UART_SetConfig+0x2fc>)
 80064c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064c8:	2b10      	cmp	r3, #16
 80064ca:	d00f      	beq.n	80064ec <UART_SetConfig+0x170>
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d802      	bhi.n	80064d6 <UART_SetConfig+0x15a>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d005      	beq.n	80064e0 <UART_SetConfig+0x164>
 80064d4:	e010      	b.n	80064f8 <UART_SetConfig+0x17c>
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	d005      	beq.n	80064e6 <UART_SetConfig+0x16a>
 80064da:	2b30      	cmp	r3, #48	; 0x30
 80064dc:	d009      	beq.n	80064f2 <UART_SetConfig+0x176>
 80064de:	e00b      	b.n	80064f8 <UART_SetConfig+0x17c>
 80064e0:	2300      	movs	r3, #0
 80064e2:	77fb      	strb	r3, [r7, #31]
 80064e4:	e0f1      	b.n	80066ca <UART_SetConfig+0x34e>
 80064e6:	2302      	movs	r3, #2
 80064e8:	77fb      	strb	r3, [r7, #31]
 80064ea:	e0ee      	b.n	80066ca <UART_SetConfig+0x34e>
 80064ec:	2304      	movs	r3, #4
 80064ee:	77fb      	strb	r3, [r7, #31]
 80064f0:	e0eb      	b.n	80066ca <UART_SetConfig+0x34e>
 80064f2:	2308      	movs	r3, #8
 80064f4:	77fb      	strb	r3, [r7, #31]
 80064f6:	e0e8      	b.n	80066ca <UART_SetConfig+0x34e>
 80064f8:	2310      	movs	r3, #16
 80064fa:	77fb      	strb	r3, [r7, #31]
 80064fc:	bf00      	nop
 80064fe:	e0e4      	b.n	80066ca <UART_SetConfig+0x34e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a5f      	ldr	r2, [pc, #380]	; (8006684 <UART_SetConfig+0x308>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d120      	bne.n	800654c <UART_SetConfig+0x1d0>
 800650a:	4b5b      	ldr	r3, [pc, #364]	; (8006678 <UART_SetConfig+0x2fc>)
 800650c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006510:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006514:	2b40      	cmp	r3, #64	; 0x40
 8006516:	d00f      	beq.n	8006538 <UART_SetConfig+0x1bc>
 8006518:	2b40      	cmp	r3, #64	; 0x40
 800651a:	d802      	bhi.n	8006522 <UART_SetConfig+0x1a6>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <UART_SetConfig+0x1b0>
 8006520:	e010      	b.n	8006544 <UART_SetConfig+0x1c8>
 8006522:	2b80      	cmp	r3, #128	; 0x80
 8006524:	d005      	beq.n	8006532 <UART_SetConfig+0x1b6>
 8006526:	2bc0      	cmp	r3, #192	; 0xc0
 8006528:	d009      	beq.n	800653e <UART_SetConfig+0x1c2>
 800652a:	e00b      	b.n	8006544 <UART_SetConfig+0x1c8>
 800652c:	2300      	movs	r3, #0
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e0cb      	b.n	80066ca <UART_SetConfig+0x34e>
 8006532:	2302      	movs	r3, #2
 8006534:	77fb      	strb	r3, [r7, #31]
 8006536:	e0c8      	b.n	80066ca <UART_SetConfig+0x34e>
 8006538:	2304      	movs	r3, #4
 800653a:	77fb      	strb	r3, [r7, #31]
 800653c:	e0c5      	b.n	80066ca <UART_SetConfig+0x34e>
 800653e:	2308      	movs	r3, #8
 8006540:	77fb      	strb	r3, [r7, #31]
 8006542:	e0c2      	b.n	80066ca <UART_SetConfig+0x34e>
 8006544:	2310      	movs	r3, #16
 8006546:	77fb      	strb	r3, [r7, #31]
 8006548:	bf00      	nop
 800654a:	e0be      	b.n	80066ca <UART_SetConfig+0x34e>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a4d      	ldr	r2, [pc, #308]	; (8006688 <UART_SetConfig+0x30c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d124      	bne.n	80065a0 <UART_SetConfig+0x224>
 8006556:	4b48      	ldr	r3, [pc, #288]	; (8006678 <UART_SetConfig+0x2fc>)
 8006558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006564:	d012      	beq.n	800658c <UART_SetConfig+0x210>
 8006566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800656a:	d802      	bhi.n	8006572 <UART_SetConfig+0x1f6>
 800656c:	2b00      	cmp	r3, #0
 800656e:	d007      	beq.n	8006580 <UART_SetConfig+0x204>
 8006570:	e012      	b.n	8006598 <UART_SetConfig+0x21c>
 8006572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006576:	d006      	beq.n	8006586 <UART_SetConfig+0x20a>
 8006578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800657c:	d009      	beq.n	8006592 <UART_SetConfig+0x216>
 800657e:	e00b      	b.n	8006598 <UART_SetConfig+0x21c>
 8006580:	2300      	movs	r3, #0
 8006582:	77fb      	strb	r3, [r7, #31]
 8006584:	e0a1      	b.n	80066ca <UART_SetConfig+0x34e>
 8006586:	2302      	movs	r3, #2
 8006588:	77fb      	strb	r3, [r7, #31]
 800658a:	e09e      	b.n	80066ca <UART_SetConfig+0x34e>
 800658c:	2304      	movs	r3, #4
 800658e:	77fb      	strb	r3, [r7, #31]
 8006590:	e09b      	b.n	80066ca <UART_SetConfig+0x34e>
 8006592:	2308      	movs	r3, #8
 8006594:	77fb      	strb	r3, [r7, #31]
 8006596:	e098      	b.n	80066ca <UART_SetConfig+0x34e>
 8006598:	2310      	movs	r3, #16
 800659a:	77fb      	strb	r3, [r7, #31]
 800659c:	bf00      	nop
 800659e:	e094      	b.n	80066ca <UART_SetConfig+0x34e>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a39      	ldr	r2, [pc, #228]	; (800668c <UART_SetConfig+0x310>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d124      	bne.n	80065f4 <UART_SetConfig+0x278>
 80065aa:	4b33      	ldr	r3, [pc, #204]	; (8006678 <UART_SetConfig+0x2fc>)
 80065ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b8:	d012      	beq.n	80065e0 <UART_SetConfig+0x264>
 80065ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065be:	d802      	bhi.n	80065c6 <UART_SetConfig+0x24a>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d007      	beq.n	80065d4 <UART_SetConfig+0x258>
 80065c4:	e012      	b.n	80065ec <UART_SetConfig+0x270>
 80065c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ca:	d006      	beq.n	80065da <UART_SetConfig+0x25e>
 80065cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065d0:	d009      	beq.n	80065e6 <UART_SetConfig+0x26a>
 80065d2:	e00b      	b.n	80065ec <UART_SetConfig+0x270>
 80065d4:	2301      	movs	r3, #1
 80065d6:	77fb      	strb	r3, [r7, #31]
 80065d8:	e077      	b.n	80066ca <UART_SetConfig+0x34e>
 80065da:	2302      	movs	r3, #2
 80065dc:	77fb      	strb	r3, [r7, #31]
 80065de:	e074      	b.n	80066ca <UART_SetConfig+0x34e>
 80065e0:	2304      	movs	r3, #4
 80065e2:	77fb      	strb	r3, [r7, #31]
 80065e4:	e071      	b.n	80066ca <UART_SetConfig+0x34e>
 80065e6:	2308      	movs	r3, #8
 80065e8:	77fb      	strb	r3, [r7, #31]
 80065ea:	e06e      	b.n	80066ca <UART_SetConfig+0x34e>
 80065ec:	2310      	movs	r3, #16
 80065ee:	77fb      	strb	r3, [r7, #31]
 80065f0:	bf00      	nop
 80065f2:	e06a      	b.n	80066ca <UART_SetConfig+0x34e>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a25      	ldr	r2, [pc, #148]	; (8006690 <UART_SetConfig+0x314>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d124      	bne.n	8006648 <UART_SetConfig+0x2cc>
 80065fe:	4b1e      	ldr	r3, [pc, #120]	; (8006678 <UART_SetConfig+0x2fc>)
 8006600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006604:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800660c:	d012      	beq.n	8006634 <UART_SetConfig+0x2b8>
 800660e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006612:	d802      	bhi.n	800661a <UART_SetConfig+0x29e>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d007      	beq.n	8006628 <UART_SetConfig+0x2ac>
 8006618:	e012      	b.n	8006640 <UART_SetConfig+0x2c4>
 800661a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800661e:	d006      	beq.n	800662e <UART_SetConfig+0x2b2>
 8006620:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006624:	d009      	beq.n	800663a <UART_SetConfig+0x2be>
 8006626:	e00b      	b.n	8006640 <UART_SetConfig+0x2c4>
 8006628:	2300      	movs	r3, #0
 800662a:	77fb      	strb	r3, [r7, #31]
 800662c:	e04d      	b.n	80066ca <UART_SetConfig+0x34e>
 800662e:	2302      	movs	r3, #2
 8006630:	77fb      	strb	r3, [r7, #31]
 8006632:	e04a      	b.n	80066ca <UART_SetConfig+0x34e>
 8006634:	2304      	movs	r3, #4
 8006636:	77fb      	strb	r3, [r7, #31]
 8006638:	e047      	b.n	80066ca <UART_SetConfig+0x34e>
 800663a:	2308      	movs	r3, #8
 800663c:	77fb      	strb	r3, [r7, #31]
 800663e:	e044      	b.n	80066ca <UART_SetConfig+0x34e>
 8006640:	2310      	movs	r3, #16
 8006642:	77fb      	strb	r3, [r7, #31]
 8006644:	bf00      	nop
 8006646:	e040      	b.n	80066ca <UART_SetConfig+0x34e>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a11      	ldr	r2, [pc, #68]	; (8006694 <UART_SetConfig+0x318>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d139      	bne.n	80066c6 <UART_SetConfig+0x34a>
 8006652:	4b09      	ldr	r3, [pc, #36]	; (8006678 <UART_SetConfig+0x2fc>)
 8006654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800665c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006660:	d027      	beq.n	80066b2 <UART_SetConfig+0x336>
 8006662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006666:	d817      	bhi.n	8006698 <UART_SetConfig+0x31c>
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01c      	beq.n	80066a6 <UART_SetConfig+0x32a>
 800666c:	e027      	b.n	80066be <UART_SetConfig+0x342>
 800666e:	bf00      	nop
 8006670:	efff69f3 	.word	0xefff69f3
 8006674:	40011000 	.word	0x40011000
 8006678:	40023800 	.word	0x40023800
 800667c:	40004400 	.word	0x40004400
 8006680:	40004800 	.word	0x40004800
 8006684:	40004c00 	.word	0x40004c00
 8006688:	40005000 	.word	0x40005000
 800668c:	40011400 	.word	0x40011400
 8006690:	40007800 	.word	0x40007800
 8006694:	40007c00 	.word	0x40007c00
 8006698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800669c:	d006      	beq.n	80066ac <UART_SetConfig+0x330>
 800669e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80066a2:	d009      	beq.n	80066b8 <UART_SetConfig+0x33c>
 80066a4:	e00b      	b.n	80066be <UART_SetConfig+0x342>
 80066a6:	2300      	movs	r3, #0
 80066a8:	77fb      	strb	r3, [r7, #31]
 80066aa:	e00e      	b.n	80066ca <UART_SetConfig+0x34e>
 80066ac:	2302      	movs	r3, #2
 80066ae:	77fb      	strb	r3, [r7, #31]
 80066b0:	e00b      	b.n	80066ca <UART_SetConfig+0x34e>
 80066b2:	2304      	movs	r3, #4
 80066b4:	77fb      	strb	r3, [r7, #31]
 80066b6:	e008      	b.n	80066ca <UART_SetConfig+0x34e>
 80066b8:	2308      	movs	r3, #8
 80066ba:	77fb      	strb	r3, [r7, #31]
 80066bc:	e005      	b.n	80066ca <UART_SetConfig+0x34e>
 80066be:	2310      	movs	r3, #16
 80066c0:	77fb      	strb	r3, [r7, #31]
 80066c2:	bf00      	nop
 80066c4:	e001      	b.n	80066ca <UART_SetConfig+0x34e>
 80066c6:	2310      	movs	r3, #16
 80066c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d2:	d17f      	bne.n	80067d4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80066d4:	7ffb      	ldrb	r3, [r7, #31]
 80066d6:	2b08      	cmp	r3, #8
 80066d8:	d85c      	bhi.n	8006794 <UART_SetConfig+0x418>
 80066da:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <UART_SetConfig+0x364>)
 80066dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e0:	08006705 	.word	0x08006705
 80066e4:	08006725 	.word	0x08006725
 80066e8:	08006745 	.word	0x08006745
 80066ec:	08006795 	.word	0x08006795
 80066f0:	0800675d 	.word	0x0800675d
 80066f4:	08006795 	.word	0x08006795
 80066f8:	08006795 	.word	0x08006795
 80066fc:	08006795 	.word	0x08006795
 8006700:	0800677d 	.word	0x0800677d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006704:	f7fd fe66 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 8006708:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	005a      	lsls	r2, r3, #1
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	085b      	lsrs	r3, r3, #1
 8006714:	441a      	add	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	fbb2 f3f3 	udiv	r3, r2, r3
 800671e:	b29b      	uxth	r3, r3
 8006720:	61bb      	str	r3, [r7, #24]
        break;
 8006722:	e03a      	b.n	800679a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006724:	f7fd fe6a 	bl	80043fc <HAL_RCC_GetPCLK2Freq>
 8006728:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	005a      	lsls	r2, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	085b      	lsrs	r3, r3, #1
 8006734:	441a      	add	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	fbb2 f3f3 	udiv	r3, r2, r3
 800673e:	b29b      	uxth	r3, r3
 8006740:	61bb      	str	r3, [r7, #24]
        break;
 8006742:	e02a      	b.n	800679a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	085a      	lsrs	r2, r3, #1
 800674a:	4b5f      	ldr	r3, [pc, #380]	; (80068c8 <UART_SetConfig+0x54c>)
 800674c:	4413      	add	r3, r2
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6852      	ldr	r2, [r2, #4]
 8006752:	fbb3 f3f2 	udiv	r3, r3, r2
 8006756:	b29b      	uxth	r3, r3
 8006758:	61bb      	str	r3, [r7, #24]
        break;
 800675a:	e01e      	b.n	800679a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800675c:	f7fd fd56 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8006760:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	005a      	lsls	r2, r3, #1
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	085b      	lsrs	r3, r3, #1
 800676c:	441a      	add	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	fbb2 f3f3 	udiv	r3, r2, r3
 8006776:	b29b      	uxth	r3, r3
 8006778:	61bb      	str	r3, [r7, #24]
        break;
 800677a:	e00e      	b.n	800679a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	085b      	lsrs	r3, r3, #1
 8006782:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	fbb2 f3f3 	udiv	r3, r2, r3
 800678e:	b29b      	uxth	r3, r3
 8006790:	61bb      	str	r3, [r7, #24]
        break;
 8006792:	e002      	b.n	800679a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	75fb      	strb	r3, [r7, #23]
        break;
 8006798:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b0f      	cmp	r3, #15
 800679e:	d916      	bls.n	80067ce <UART_SetConfig+0x452>
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a6:	d212      	bcs.n	80067ce <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	f023 030f 	bic.w	r3, r3, #15
 80067b0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	b29a      	uxth	r2, r3
 80067be:	897b      	ldrh	r3, [r7, #10]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	897a      	ldrh	r2, [r7, #10]
 80067ca:	60da      	str	r2, [r3, #12]
 80067cc:	e070      	b.n	80068b0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	75fb      	strb	r3, [r7, #23]
 80067d2:	e06d      	b.n	80068b0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80067d4:	7ffb      	ldrb	r3, [r7, #31]
 80067d6:	2b08      	cmp	r3, #8
 80067d8:	d859      	bhi.n	800688e <UART_SetConfig+0x512>
 80067da:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <UART_SetConfig+0x464>)
 80067dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e0:	08006805 	.word	0x08006805
 80067e4:	08006823 	.word	0x08006823
 80067e8:	08006841 	.word	0x08006841
 80067ec:	0800688f 	.word	0x0800688f
 80067f0:	08006859 	.word	0x08006859
 80067f4:	0800688f 	.word	0x0800688f
 80067f8:	0800688f 	.word	0x0800688f
 80067fc:	0800688f 	.word	0x0800688f
 8006800:	08006877 	.word	0x08006877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006804:	f7fd fde6 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 8006808:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	085a      	lsrs	r2, r3, #1
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	441a      	add	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	fbb2 f3f3 	udiv	r3, r2, r3
 800681c:	b29b      	uxth	r3, r3
 800681e:	61bb      	str	r3, [r7, #24]
        break;
 8006820:	e038      	b.n	8006894 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006822:	f7fd fdeb 	bl	80043fc <HAL_RCC_GetPCLK2Freq>
 8006826:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	085a      	lsrs	r2, r3, #1
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	441a      	add	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	fbb2 f3f3 	udiv	r3, r2, r3
 800683a:	b29b      	uxth	r3, r3
 800683c:	61bb      	str	r3, [r7, #24]
        break;
 800683e:	e029      	b.n	8006894 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	085a      	lsrs	r2, r3, #1
 8006846:	4b21      	ldr	r3, [pc, #132]	; (80068cc <UART_SetConfig+0x550>)
 8006848:	4413      	add	r3, r2
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6852      	ldr	r2, [r2, #4]
 800684e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006852:	b29b      	uxth	r3, r3
 8006854:	61bb      	str	r3, [r7, #24]
        break;
 8006856:	e01d      	b.n	8006894 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006858:	f7fd fcd8 	bl	800420c <HAL_RCC_GetSysClockFreq>
 800685c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	085a      	lsrs	r2, r3, #1
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	441a      	add	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006870:	b29b      	uxth	r3, r3
 8006872:	61bb      	str	r3, [r7, #24]
        break;
 8006874:	e00e      	b.n	8006894 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	085b      	lsrs	r3, r3, #1
 800687c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	fbb2 f3f3 	udiv	r3, r2, r3
 8006888:	b29b      	uxth	r3, r3
 800688a:	61bb      	str	r3, [r7, #24]
        break;
 800688c:	e002      	b.n	8006894 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	75fb      	strb	r3, [r7, #23]
        break;
 8006892:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	2b0f      	cmp	r3, #15
 8006898:	d908      	bls.n	80068ac <UART_SetConfig+0x530>
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a0:	d204      	bcs.n	80068ac <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	60da      	str	r2, [r3, #12]
 80068aa:	e001      	b.n	80068b0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80068bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3720      	adds	r7, #32
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	01e84800 	.word	0x01e84800
 80068cc:	00f42400 	.word	0x00f42400

080068d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00a      	beq.n	80068fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	f003 0310 	and.w	r3, r3, #16
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d01a      	beq.n	80069e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ce:	d10a      	bne.n	80069e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	605a      	str	r2, [r3, #4]
  }
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006a22:	f7fb fc93 	bl	800234c <HAL_GetTick>
 8006a26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b08      	cmp	r3, #8
 8006a34:	d10e      	bne.n	8006a54 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f814 	bl	8006a72 <UART_WaitOnFlagUntilTimeout>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e00a      	b.n	8006a6a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	603b      	str	r3, [r7, #0]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a82:	e05d      	b.n	8006b40 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8a:	d059      	beq.n	8006b40 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a8c:	f7fb fc5e 	bl	800234c <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d302      	bcc.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d11b      	bne.n	8006ada <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ab0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0201 	bic.w	r2, r2, #1
 8006ac0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2220      	movs	r2, #32
 8006acc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e042      	b.n	8006b60 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d02b      	beq.n	8006b40 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006af6:	d123      	bne.n	8006b40 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b00:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b10:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0201 	bic.w	r2, r2, #1
 8006b20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2220      	movs	r2, #32
 8006b26:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2220      	movs	r2, #32
 8006b32:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e00f      	b.n	8006b60 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	69da      	ldr	r2, [r3, #28]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	4013      	ands	r3, r2
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	bf0c      	ite	eq
 8006b50:	2301      	moveq	r3, #1
 8006b52:	2300      	movne	r3, #0
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	461a      	mov	r2, r3
 8006b58:	79fb      	ldrb	r3, [r7, #7]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d092      	beq.n	8006a84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b7e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 0201 	bic.w	r2, r2, #1
 8006b8e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2220      	movs	r2, #32
 8006b94:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f7ff fbce 	bl	8006368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bcc:	bf00      	nop
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be0:	2b21      	cmp	r3, #33	; 0x21
 8006be2:	d12a      	bne.n	8006c3a <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d110      	bne.n	8006c12 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bfe:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c0e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006c10:	e013      	b.n	8006c3a <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c16:	781a      	ldrb	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006c3a:	bf00      	nop
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b085      	sub	sp, #20
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c52:	2b21      	cmp	r3, #33	; 0x21
 8006c54:	d12f      	bne.n	8006cb6 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d110      	bne.n	8006c84 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c70:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c80:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006c82:	e018      	b.n	8006cb6 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c88:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c98:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c9e:	1c9a      	adds	r2, r3, #2
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	3b01      	subs	r3, #1
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006cb6:	bf00      	nop
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b082      	sub	sp, #8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cd8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7ff fb34 	bl	8006354 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cec:	bf00      	nop
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d02:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d08:	2b22      	cmp	r3, #34	; 0x22
 8006d0a:	d13a      	bne.n	8006d82 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d12:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d14:	89bb      	ldrh	r3, [r7, #12]
 8006d16:	b2d9      	uxtb	r1, r3
 8006d18:	89fb      	ldrh	r3, [r7, #14]
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d20:	400a      	ands	r2, r1
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d121      	bne.n	8006d92 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d5c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0201 	bic.w	r2, r2, #1
 8006d6c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2220      	movs	r2, #32
 8006d72:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7fa f84c 	bl	8000e18 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d80:	e007      	b.n	8006d92 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	699a      	ldr	r2, [r3, #24]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0208 	orr.w	r2, r2, #8
 8006d90:	619a      	str	r2, [r3, #24]
}
 8006d92:	bf00      	nop
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006da8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dae:	2b22      	cmp	r3, #34	; 0x22
 8006db0:	d13a      	bne.n	8006e28 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dbe:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006dc0:	89ba      	ldrh	r2, [r7, #12]
 8006dc2:	89fb      	ldrh	r3, [r7, #14]
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd0:	1c9a      	adds	r2, r3, #2
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	3b01      	subs	r3, #1
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d121      	bne.n	8006e38 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e02:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689a      	ldr	r2, [r3, #8]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0201 	bic.w	r2, r2, #1
 8006e12:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2220      	movs	r2, #32
 8006e18:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7f9 fff9 	bl	8000e18 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e26:	e007      	b.n	8006e38 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	699a      	ldr	r2, [r3, #24]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f042 0208 	orr.w	r2, r2, #8
 8006e36:	619a      	str	r2, [r3, #24]
}
 8006e38:	bf00      	nop
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <__errno>:
 8006e40:	4b01      	ldr	r3, [pc, #4]	; (8006e48 <__errno+0x8>)
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	2000000c 	.word	0x2000000c

08006e4c <__libc_init_array>:
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	4e0d      	ldr	r6, [pc, #52]	; (8006e84 <__libc_init_array+0x38>)
 8006e50:	4c0d      	ldr	r4, [pc, #52]	; (8006e88 <__libc_init_array+0x3c>)
 8006e52:	1ba4      	subs	r4, r4, r6
 8006e54:	10a4      	asrs	r4, r4, #2
 8006e56:	2500      	movs	r5, #0
 8006e58:	42a5      	cmp	r5, r4
 8006e5a:	d109      	bne.n	8006e70 <__libc_init_array+0x24>
 8006e5c:	4e0b      	ldr	r6, [pc, #44]	; (8006e8c <__libc_init_array+0x40>)
 8006e5e:	4c0c      	ldr	r4, [pc, #48]	; (8006e90 <__libc_init_array+0x44>)
 8006e60:	f001 f90c 	bl	800807c <_init>
 8006e64:	1ba4      	subs	r4, r4, r6
 8006e66:	10a4      	asrs	r4, r4, #2
 8006e68:	2500      	movs	r5, #0
 8006e6a:	42a5      	cmp	r5, r4
 8006e6c:	d105      	bne.n	8006e7a <__libc_init_array+0x2e>
 8006e6e:	bd70      	pop	{r4, r5, r6, pc}
 8006e70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e74:	4798      	blx	r3
 8006e76:	3501      	adds	r5, #1
 8006e78:	e7ee      	b.n	8006e58 <__libc_init_array+0xc>
 8006e7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e7e:	4798      	blx	r3
 8006e80:	3501      	adds	r5, #1
 8006e82:	e7f2      	b.n	8006e6a <__libc_init_array+0x1e>
 8006e84:	08008288 	.word	0x08008288
 8006e88:	08008288 	.word	0x08008288
 8006e8c:	08008288 	.word	0x08008288
 8006e90:	0800828c 	.word	0x0800828c

08006e94 <memset>:
 8006e94:	4402      	add	r2, r0
 8006e96:	4603      	mov	r3, r0
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d100      	bne.n	8006e9e <memset+0xa>
 8006e9c:	4770      	bx	lr
 8006e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006ea2:	e7f9      	b.n	8006e98 <memset+0x4>

08006ea4 <siprintf>:
 8006ea4:	b40e      	push	{r1, r2, r3}
 8006ea6:	b500      	push	{lr}
 8006ea8:	b09c      	sub	sp, #112	; 0x70
 8006eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8006eac:	9002      	str	r0, [sp, #8]
 8006eae:	9006      	str	r0, [sp, #24]
 8006eb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006eb4:	4809      	ldr	r0, [pc, #36]	; (8006edc <siprintf+0x38>)
 8006eb6:	9107      	str	r1, [sp, #28]
 8006eb8:	9104      	str	r1, [sp, #16]
 8006eba:	4909      	ldr	r1, [pc, #36]	; (8006ee0 <siprintf+0x3c>)
 8006ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec0:	9105      	str	r1, [sp, #20]
 8006ec2:	6800      	ldr	r0, [r0, #0]
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	a902      	add	r1, sp, #8
 8006ec8:	f000 f892 	bl	8006ff0 <_svfiprintf_r>
 8006ecc:	9b02      	ldr	r3, [sp, #8]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	b01c      	add	sp, #112	; 0x70
 8006ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ed8:	b003      	add	sp, #12
 8006eda:	4770      	bx	lr
 8006edc:	2000000c 	.word	0x2000000c
 8006ee0:	ffff0208 	.word	0xffff0208

08006ee4 <siscanf>:
 8006ee4:	b40e      	push	{r1, r2, r3}
 8006ee6:	b530      	push	{r4, r5, lr}
 8006ee8:	b09c      	sub	sp, #112	; 0x70
 8006eea:	ac1f      	add	r4, sp, #124	; 0x7c
 8006eec:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006ef0:	f854 5b04 	ldr.w	r5, [r4], #4
 8006ef4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006ef8:	9002      	str	r0, [sp, #8]
 8006efa:	9006      	str	r0, [sp, #24]
 8006efc:	f7f9 f988 	bl	8000210 <strlen>
 8006f00:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <siscanf+0x4c>)
 8006f02:	9003      	str	r0, [sp, #12]
 8006f04:	9007      	str	r0, [sp, #28]
 8006f06:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f08:	480a      	ldr	r0, [pc, #40]	; (8006f34 <siscanf+0x50>)
 8006f0a:	9401      	str	r4, [sp, #4]
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f10:	9314      	str	r3, [sp, #80]	; 0x50
 8006f12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f16:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f1a:	462a      	mov	r2, r5
 8006f1c:	4623      	mov	r3, r4
 8006f1e:	a902      	add	r1, sp, #8
 8006f20:	6800      	ldr	r0, [r0, #0]
 8006f22:	f000 f9b7 	bl	8007294 <__ssvfiscanf_r>
 8006f26:	b01c      	add	sp, #112	; 0x70
 8006f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f2c:	b003      	add	sp, #12
 8006f2e:	4770      	bx	lr
 8006f30:	08006f39 	.word	0x08006f39
 8006f34:	2000000c 	.word	0x2000000c

08006f38 <__seofread>:
 8006f38:	2000      	movs	r0, #0
 8006f3a:	4770      	bx	lr

08006f3c <__ssputs_r>:
 8006f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f40:	688e      	ldr	r6, [r1, #8]
 8006f42:	429e      	cmp	r6, r3
 8006f44:	4682      	mov	sl, r0
 8006f46:	460c      	mov	r4, r1
 8006f48:	4690      	mov	r8, r2
 8006f4a:	4699      	mov	r9, r3
 8006f4c:	d837      	bhi.n	8006fbe <__ssputs_r+0x82>
 8006f4e:	898a      	ldrh	r2, [r1, #12]
 8006f50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f54:	d031      	beq.n	8006fba <__ssputs_r+0x7e>
 8006f56:	6825      	ldr	r5, [r4, #0]
 8006f58:	6909      	ldr	r1, [r1, #16]
 8006f5a:	1a6f      	subs	r7, r5, r1
 8006f5c:	6965      	ldr	r5, [r4, #20]
 8006f5e:	2302      	movs	r3, #2
 8006f60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f64:	fb95 f5f3 	sdiv	r5, r5, r3
 8006f68:	f109 0301 	add.w	r3, r9, #1
 8006f6c:	443b      	add	r3, r7
 8006f6e:	429d      	cmp	r5, r3
 8006f70:	bf38      	it	cc
 8006f72:	461d      	movcc	r5, r3
 8006f74:	0553      	lsls	r3, r2, #21
 8006f76:	d530      	bpl.n	8006fda <__ssputs_r+0x9e>
 8006f78:	4629      	mov	r1, r5
 8006f7a:	f000 ffd7 	bl	8007f2c <_malloc_r>
 8006f7e:	4606      	mov	r6, r0
 8006f80:	b950      	cbnz	r0, 8006f98 <__ssputs_r+0x5c>
 8006f82:	230c      	movs	r3, #12
 8006f84:	f8ca 3000 	str.w	r3, [sl]
 8006f88:	89a3      	ldrh	r3, [r4, #12]
 8006f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f8e:	81a3      	strh	r3, [r4, #12]
 8006f90:	f04f 30ff 	mov.w	r0, #4294967295
 8006f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f98:	463a      	mov	r2, r7
 8006f9a:	6921      	ldr	r1, [r4, #16]
 8006f9c:	f000 ff54 	bl	8007e48 <memcpy>
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006faa:	81a3      	strh	r3, [r4, #12]
 8006fac:	6126      	str	r6, [r4, #16]
 8006fae:	6165      	str	r5, [r4, #20]
 8006fb0:	443e      	add	r6, r7
 8006fb2:	1bed      	subs	r5, r5, r7
 8006fb4:	6026      	str	r6, [r4, #0]
 8006fb6:	60a5      	str	r5, [r4, #8]
 8006fb8:	464e      	mov	r6, r9
 8006fba:	454e      	cmp	r6, r9
 8006fbc:	d900      	bls.n	8006fc0 <__ssputs_r+0x84>
 8006fbe:	464e      	mov	r6, r9
 8006fc0:	4632      	mov	r2, r6
 8006fc2:	4641      	mov	r1, r8
 8006fc4:	6820      	ldr	r0, [r4, #0]
 8006fc6:	f000 ff4a 	bl	8007e5e <memmove>
 8006fca:	68a3      	ldr	r3, [r4, #8]
 8006fcc:	1b9b      	subs	r3, r3, r6
 8006fce:	60a3      	str	r3, [r4, #8]
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	441e      	add	r6, r3
 8006fd4:	6026      	str	r6, [r4, #0]
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	e7dc      	b.n	8006f94 <__ssputs_r+0x58>
 8006fda:	462a      	mov	r2, r5
 8006fdc:	f001 f800 	bl	8007fe0 <_realloc_r>
 8006fe0:	4606      	mov	r6, r0
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d1e2      	bne.n	8006fac <__ssputs_r+0x70>
 8006fe6:	6921      	ldr	r1, [r4, #16]
 8006fe8:	4650      	mov	r0, sl
 8006fea:	f000 ff51 	bl	8007e90 <_free_r>
 8006fee:	e7c8      	b.n	8006f82 <__ssputs_r+0x46>

08006ff0 <_svfiprintf_r>:
 8006ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff4:	461d      	mov	r5, r3
 8006ff6:	898b      	ldrh	r3, [r1, #12]
 8006ff8:	061f      	lsls	r7, r3, #24
 8006ffa:	b09d      	sub	sp, #116	; 0x74
 8006ffc:	4680      	mov	r8, r0
 8006ffe:	460c      	mov	r4, r1
 8007000:	4616      	mov	r6, r2
 8007002:	d50f      	bpl.n	8007024 <_svfiprintf_r+0x34>
 8007004:	690b      	ldr	r3, [r1, #16]
 8007006:	b96b      	cbnz	r3, 8007024 <_svfiprintf_r+0x34>
 8007008:	2140      	movs	r1, #64	; 0x40
 800700a:	f000 ff8f 	bl	8007f2c <_malloc_r>
 800700e:	6020      	str	r0, [r4, #0]
 8007010:	6120      	str	r0, [r4, #16]
 8007012:	b928      	cbnz	r0, 8007020 <_svfiprintf_r+0x30>
 8007014:	230c      	movs	r3, #12
 8007016:	f8c8 3000 	str.w	r3, [r8]
 800701a:	f04f 30ff 	mov.w	r0, #4294967295
 800701e:	e0c8      	b.n	80071b2 <_svfiprintf_r+0x1c2>
 8007020:	2340      	movs	r3, #64	; 0x40
 8007022:	6163      	str	r3, [r4, #20]
 8007024:	2300      	movs	r3, #0
 8007026:	9309      	str	r3, [sp, #36]	; 0x24
 8007028:	2320      	movs	r3, #32
 800702a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800702e:	2330      	movs	r3, #48	; 0x30
 8007030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007034:	9503      	str	r5, [sp, #12]
 8007036:	f04f 0b01 	mov.w	fp, #1
 800703a:	4637      	mov	r7, r6
 800703c:	463d      	mov	r5, r7
 800703e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007042:	b10b      	cbz	r3, 8007048 <_svfiprintf_r+0x58>
 8007044:	2b25      	cmp	r3, #37	; 0x25
 8007046:	d13e      	bne.n	80070c6 <_svfiprintf_r+0xd6>
 8007048:	ebb7 0a06 	subs.w	sl, r7, r6
 800704c:	d00b      	beq.n	8007066 <_svfiprintf_r+0x76>
 800704e:	4653      	mov	r3, sl
 8007050:	4632      	mov	r2, r6
 8007052:	4621      	mov	r1, r4
 8007054:	4640      	mov	r0, r8
 8007056:	f7ff ff71 	bl	8006f3c <__ssputs_r>
 800705a:	3001      	adds	r0, #1
 800705c:	f000 80a4 	beq.w	80071a8 <_svfiprintf_r+0x1b8>
 8007060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007062:	4453      	add	r3, sl
 8007064:	9309      	str	r3, [sp, #36]	; 0x24
 8007066:	783b      	ldrb	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 809d 	beq.w	80071a8 <_svfiprintf_r+0x1b8>
 800706e:	2300      	movs	r3, #0
 8007070:	f04f 32ff 	mov.w	r2, #4294967295
 8007074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007078:	9304      	str	r3, [sp, #16]
 800707a:	9307      	str	r3, [sp, #28]
 800707c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007080:	931a      	str	r3, [sp, #104]	; 0x68
 8007082:	462f      	mov	r7, r5
 8007084:	2205      	movs	r2, #5
 8007086:	f817 1b01 	ldrb.w	r1, [r7], #1
 800708a:	4850      	ldr	r0, [pc, #320]	; (80071cc <_svfiprintf_r+0x1dc>)
 800708c:	f7f9 f8c8 	bl	8000220 <memchr>
 8007090:	9b04      	ldr	r3, [sp, #16]
 8007092:	b9d0      	cbnz	r0, 80070ca <_svfiprintf_r+0xda>
 8007094:	06d9      	lsls	r1, r3, #27
 8007096:	bf44      	itt	mi
 8007098:	2220      	movmi	r2, #32
 800709a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800709e:	071a      	lsls	r2, r3, #28
 80070a0:	bf44      	itt	mi
 80070a2:	222b      	movmi	r2, #43	; 0x2b
 80070a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070a8:	782a      	ldrb	r2, [r5, #0]
 80070aa:	2a2a      	cmp	r2, #42	; 0x2a
 80070ac:	d015      	beq.n	80070da <_svfiprintf_r+0xea>
 80070ae:	9a07      	ldr	r2, [sp, #28]
 80070b0:	462f      	mov	r7, r5
 80070b2:	2000      	movs	r0, #0
 80070b4:	250a      	movs	r5, #10
 80070b6:	4639      	mov	r1, r7
 80070b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070bc:	3b30      	subs	r3, #48	; 0x30
 80070be:	2b09      	cmp	r3, #9
 80070c0:	d94d      	bls.n	800715e <_svfiprintf_r+0x16e>
 80070c2:	b1b8      	cbz	r0, 80070f4 <_svfiprintf_r+0x104>
 80070c4:	e00f      	b.n	80070e6 <_svfiprintf_r+0xf6>
 80070c6:	462f      	mov	r7, r5
 80070c8:	e7b8      	b.n	800703c <_svfiprintf_r+0x4c>
 80070ca:	4a40      	ldr	r2, [pc, #256]	; (80071cc <_svfiprintf_r+0x1dc>)
 80070cc:	1a80      	subs	r0, r0, r2
 80070ce:	fa0b f000 	lsl.w	r0, fp, r0
 80070d2:	4318      	orrs	r0, r3
 80070d4:	9004      	str	r0, [sp, #16]
 80070d6:	463d      	mov	r5, r7
 80070d8:	e7d3      	b.n	8007082 <_svfiprintf_r+0x92>
 80070da:	9a03      	ldr	r2, [sp, #12]
 80070dc:	1d11      	adds	r1, r2, #4
 80070de:	6812      	ldr	r2, [r2, #0]
 80070e0:	9103      	str	r1, [sp, #12]
 80070e2:	2a00      	cmp	r2, #0
 80070e4:	db01      	blt.n	80070ea <_svfiprintf_r+0xfa>
 80070e6:	9207      	str	r2, [sp, #28]
 80070e8:	e004      	b.n	80070f4 <_svfiprintf_r+0x104>
 80070ea:	4252      	negs	r2, r2
 80070ec:	f043 0302 	orr.w	r3, r3, #2
 80070f0:	9207      	str	r2, [sp, #28]
 80070f2:	9304      	str	r3, [sp, #16]
 80070f4:	783b      	ldrb	r3, [r7, #0]
 80070f6:	2b2e      	cmp	r3, #46	; 0x2e
 80070f8:	d10c      	bne.n	8007114 <_svfiprintf_r+0x124>
 80070fa:	787b      	ldrb	r3, [r7, #1]
 80070fc:	2b2a      	cmp	r3, #42	; 0x2a
 80070fe:	d133      	bne.n	8007168 <_svfiprintf_r+0x178>
 8007100:	9b03      	ldr	r3, [sp, #12]
 8007102:	1d1a      	adds	r2, r3, #4
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	9203      	str	r2, [sp, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	bfb8      	it	lt
 800710c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007110:	3702      	adds	r7, #2
 8007112:	9305      	str	r3, [sp, #20]
 8007114:	4d2e      	ldr	r5, [pc, #184]	; (80071d0 <_svfiprintf_r+0x1e0>)
 8007116:	7839      	ldrb	r1, [r7, #0]
 8007118:	2203      	movs	r2, #3
 800711a:	4628      	mov	r0, r5
 800711c:	f7f9 f880 	bl	8000220 <memchr>
 8007120:	b138      	cbz	r0, 8007132 <_svfiprintf_r+0x142>
 8007122:	2340      	movs	r3, #64	; 0x40
 8007124:	1b40      	subs	r0, r0, r5
 8007126:	fa03 f000 	lsl.w	r0, r3, r0
 800712a:	9b04      	ldr	r3, [sp, #16]
 800712c:	4303      	orrs	r3, r0
 800712e:	3701      	adds	r7, #1
 8007130:	9304      	str	r3, [sp, #16]
 8007132:	7839      	ldrb	r1, [r7, #0]
 8007134:	4827      	ldr	r0, [pc, #156]	; (80071d4 <_svfiprintf_r+0x1e4>)
 8007136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800713a:	2206      	movs	r2, #6
 800713c:	1c7e      	adds	r6, r7, #1
 800713e:	f7f9 f86f 	bl	8000220 <memchr>
 8007142:	2800      	cmp	r0, #0
 8007144:	d038      	beq.n	80071b8 <_svfiprintf_r+0x1c8>
 8007146:	4b24      	ldr	r3, [pc, #144]	; (80071d8 <_svfiprintf_r+0x1e8>)
 8007148:	bb13      	cbnz	r3, 8007190 <_svfiprintf_r+0x1a0>
 800714a:	9b03      	ldr	r3, [sp, #12]
 800714c:	3307      	adds	r3, #7
 800714e:	f023 0307 	bic.w	r3, r3, #7
 8007152:	3308      	adds	r3, #8
 8007154:	9303      	str	r3, [sp, #12]
 8007156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007158:	444b      	add	r3, r9
 800715a:	9309      	str	r3, [sp, #36]	; 0x24
 800715c:	e76d      	b.n	800703a <_svfiprintf_r+0x4a>
 800715e:	fb05 3202 	mla	r2, r5, r2, r3
 8007162:	2001      	movs	r0, #1
 8007164:	460f      	mov	r7, r1
 8007166:	e7a6      	b.n	80070b6 <_svfiprintf_r+0xc6>
 8007168:	2300      	movs	r3, #0
 800716a:	3701      	adds	r7, #1
 800716c:	9305      	str	r3, [sp, #20]
 800716e:	4619      	mov	r1, r3
 8007170:	250a      	movs	r5, #10
 8007172:	4638      	mov	r0, r7
 8007174:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007178:	3a30      	subs	r2, #48	; 0x30
 800717a:	2a09      	cmp	r2, #9
 800717c:	d903      	bls.n	8007186 <_svfiprintf_r+0x196>
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0c8      	beq.n	8007114 <_svfiprintf_r+0x124>
 8007182:	9105      	str	r1, [sp, #20]
 8007184:	e7c6      	b.n	8007114 <_svfiprintf_r+0x124>
 8007186:	fb05 2101 	mla	r1, r5, r1, r2
 800718a:	2301      	movs	r3, #1
 800718c:	4607      	mov	r7, r0
 800718e:	e7f0      	b.n	8007172 <_svfiprintf_r+0x182>
 8007190:	ab03      	add	r3, sp, #12
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	4622      	mov	r2, r4
 8007196:	4b11      	ldr	r3, [pc, #68]	; (80071dc <_svfiprintf_r+0x1ec>)
 8007198:	a904      	add	r1, sp, #16
 800719a:	4640      	mov	r0, r8
 800719c:	f3af 8000 	nop.w
 80071a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80071a4:	4681      	mov	r9, r0
 80071a6:	d1d6      	bne.n	8007156 <_svfiprintf_r+0x166>
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	065b      	lsls	r3, r3, #25
 80071ac:	f53f af35 	bmi.w	800701a <_svfiprintf_r+0x2a>
 80071b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071b2:	b01d      	add	sp, #116	; 0x74
 80071b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b8:	ab03      	add	r3, sp, #12
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	4622      	mov	r2, r4
 80071be:	4b07      	ldr	r3, [pc, #28]	; (80071dc <_svfiprintf_r+0x1ec>)
 80071c0:	a904      	add	r1, sp, #16
 80071c2:	4640      	mov	r0, r8
 80071c4:	f000 fa2c 	bl	8007620 <_printf_i>
 80071c8:	e7ea      	b.n	80071a0 <_svfiprintf_r+0x1b0>
 80071ca:	bf00      	nop
 80071cc:	080080c4 	.word	0x080080c4
 80071d0:	080080ca 	.word	0x080080ca
 80071d4:	080080ce 	.word	0x080080ce
 80071d8:	00000000 	.word	0x00000000
 80071dc:	08006f3d 	.word	0x08006f3d

080071e0 <_sungetc_r>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	1c4b      	adds	r3, r1, #1
 80071e4:	4614      	mov	r4, r2
 80071e6:	d103      	bne.n	80071f0 <_sungetc_r+0x10>
 80071e8:	f04f 35ff 	mov.w	r5, #4294967295
 80071ec:	4628      	mov	r0, r5
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	8993      	ldrh	r3, [r2, #12]
 80071f2:	f023 0320 	bic.w	r3, r3, #32
 80071f6:	8193      	strh	r3, [r2, #12]
 80071f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071fa:	6852      	ldr	r2, [r2, #4]
 80071fc:	b2cd      	uxtb	r5, r1
 80071fe:	b18b      	cbz	r3, 8007224 <_sungetc_r+0x44>
 8007200:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007202:	4293      	cmp	r3, r2
 8007204:	dd08      	ble.n	8007218 <_sungetc_r+0x38>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	1e5a      	subs	r2, r3, #1
 800720a:	6022      	str	r2, [r4, #0]
 800720c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007210:	6863      	ldr	r3, [r4, #4]
 8007212:	3301      	adds	r3, #1
 8007214:	6063      	str	r3, [r4, #4]
 8007216:	e7e9      	b.n	80071ec <_sungetc_r+0xc>
 8007218:	4621      	mov	r1, r4
 800721a:	f000 fdb7 	bl	8007d8c <__submore>
 800721e:	2800      	cmp	r0, #0
 8007220:	d0f1      	beq.n	8007206 <_sungetc_r+0x26>
 8007222:	e7e1      	b.n	80071e8 <_sungetc_r+0x8>
 8007224:	6921      	ldr	r1, [r4, #16]
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	b151      	cbz	r1, 8007240 <_sungetc_r+0x60>
 800722a:	4299      	cmp	r1, r3
 800722c:	d208      	bcs.n	8007240 <_sungetc_r+0x60>
 800722e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007232:	42a9      	cmp	r1, r5
 8007234:	d104      	bne.n	8007240 <_sungetc_r+0x60>
 8007236:	3b01      	subs	r3, #1
 8007238:	3201      	adds	r2, #1
 800723a:	6023      	str	r3, [r4, #0]
 800723c:	6062      	str	r2, [r4, #4]
 800723e:	e7d5      	b.n	80071ec <_sungetc_r+0xc>
 8007240:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007248:	6363      	str	r3, [r4, #52]	; 0x34
 800724a:	2303      	movs	r3, #3
 800724c:	63a3      	str	r3, [r4, #56]	; 0x38
 800724e:	4623      	mov	r3, r4
 8007250:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	2301      	movs	r3, #1
 8007258:	e7dc      	b.n	8007214 <_sungetc_r+0x34>

0800725a <__ssrefill_r>:
 800725a:	b510      	push	{r4, lr}
 800725c:	460c      	mov	r4, r1
 800725e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007260:	b169      	cbz	r1, 800727e <__ssrefill_r+0x24>
 8007262:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007266:	4299      	cmp	r1, r3
 8007268:	d001      	beq.n	800726e <__ssrefill_r+0x14>
 800726a:	f000 fe11 	bl	8007e90 <_free_r>
 800726e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007270:	6063      	str	r3, [r4, #4]
 8007272:	2000      	movs	r0, #0
 8007274:	6360      	str	r0, [r4, #52]	; 0x34
 8007276:	b113      	cbz	r3, 800727e <__ssrefill_r+0x24>
 8007278:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800727a:	6023      	str	r3, [r4, #0]
 800727c:	bd10      	pop	{r4, pc}
 800727e:	6923      	ldr	r3, [r4, #16]
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	2300      	movs	r3, #0
 8007284:	6063      	str	r3, [r4, #4]
 8007286:	89a3      	ldrh	r3, [r4, #12]
 8007288:	f043 0320 	orr.w	r3, r3, #32
 800728c:	81a3      	strh	r3, [r4, #12]
 800728e:	f04f 30ff 	mov.w	r0, #4294967295
 8007292:	e7f3      	b.n	800727c <__ssrefill_r+0x22>

08007294 <__ssvfiscanf_r>:
 8007294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007298:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800729c:	460c      	mov	r4, r1
 800729e:	2100      	movs	r1, #0
 80072a0:	9144      	str	r1, [sp, #272]	; 0x110
 80072a2:	9145      	str	r1, [sp, #276]	; 0x114
 80072a4:	499f      	ldr	r1, [pc, #636]	; (8007524 <__ssvfiscanf_r+0x290>)
 80072a6:	91a0      	str	r1, [sp, #640]	; 0x280
 80072a8:	f10d 0804 	add.w	r8, sp, #4
 80072ac:	499e      	ldr	r1, [pc, #632]	; (8007528 <__ssvfiscanf_r+0x294>)
 80072ae:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800752c <__ssvfiscanf_r+0x298>
 80072b2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80072b6:	4606      	mov	r6, r0
 80072b8:	4692      	mov	sl, r2
 80072ba:	91a1      	str	r1, [sp, #644]	; 0x284
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	270a      	movs	r7, #10
 80072c0:	f89a 3000 	ldrb.w	r3, [sl]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 812a 	beq.w	800751e <__ssvfiscanf_r+0x28a>
 80072ca:	4655      	mov	r5, sl
 80072cc:	f000 fd9c 	bl	8007e08 <__locale_ctype_ptr>
 80072d0:	f815 bb01 	ldrb.w	fp, [r5], #1
 80072d4:	4458      	add	r0, fp
 80072d6:	7843      	ldrb	r3, [r0, #1]
 80072d8:	f013 0308 	ands.w	r3, r3, #8
 80072dc:	d01c      	beq.n	8007318 <__ssvfiscanf_r+0x84>
 80072de:	6863      	ldr	r3, [r4, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	dd12      	ble.n	800730a <__ssvfiscanf_r+0x76>
 80072e4:	f000 fd90 	bl	8007e08 <__locale_ctype_ptr>
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	781a      	ldrb	r2, [r3, #0]
 80072ec:	4410      	add	r0, r2
 80072ee:	7842      	ldrb	r2, [r0, #1]
 80072f0:	0712      	lsls	r2, r2, #28
 80072f2:	d401      	bmi.n	80072f8 <__ssvfiscanf_r+0x64>
 80072f4:	46aa      	mov	sl, r5
 80072f6:	e7e3      	b.n	80072c0 <__ssvfiscanf_r+0x2c>
 80072f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80072fa:	3201      	adds	r2, #1
 80072fc:	9245      	str	r2, [sp, #276]	; 0x114
 80072fe:	6862      	ldr	r2, [r4, #4]
 8007300:	3301      	adds	r3, #1
 8007302:	3a01      	subs	r2, #1
 8007304:	6062      	str	r2, [r4, #4]
 8007306:	6023      	str	r3, [r4, #0]
 8007308:	e7e9      	b.n	80072de <__ssvfiscanf_r+0x4a>
 800730a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800730c:	4621      	mov	r1, r4
 800730e:	4630      	mov	r0, r6
 8007310:	4798      	blx	r3
 8007312:	2800      	cmp	r0, #0
 8007314:	d0e6      	beq.n	80072e4 <__ssvfiscanf_r+0x50>
 8007316:	e7ed      	b.n	80072f4 <__ssvfiscanf_r+0x60>
 8007318:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800731c:	f040 8082 	bne.w	8007424 <__ssvfiscanf_r+0x190>
 8007320:	9343      	str	r3, [sp, #268]	; 0x10c
 8007322:	9341      	str	r3, [sp, #260]	; 0x104
 8007324:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8007328:	2b2a      	cmp	r3, #42	; 0x2a
 800732a:	d103      	bne.n	8007334 <__ssvfiscanf_r+0xa0>
 800732c:	2310      	movs	r3, #16
 800732e:	9341      	str	r3, [sp, #260]	; 0x104
 8007330:	f10a 0502 	add.w	r5, sl, #2
 8007334:	46aa      	mov	sl, r5
 8007336:	f815 1b01 	ldrb.w	r1, [r5], #1
 800733a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800733e:	2a09      	cmp	r2, #9
 8007340:	d922      	bls.n	8007388 <__ssvfiscanf_r+0xf4>
 8007342:	2203      	movs	r2, #3
 8007344:	4879      	ldr	r0, [pc, #484]	; (800752c <__ssvfiscanf_r+0x298>)
 8007346:	f7f8 ff6b 	bl	8000220 <memchr>
 800734a:	b138      	cbz	r0, 800735c <__ssvfiscanf_r+0xc8>
 800734c:	eba0 0309 	sub.w	r3, r0, r9
 8007350:	2001      	movs	r0, #1
 8007352:	4098      	lsls	r0, r3
 8007354:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007356:	4318      	orrs	r0, r3
 8007358:	9041      	str	r0, [sp, #260]	; 0x104
 800735a:	46aa      	mov	sl, r5
 800735c:	f89a 3000 	ldrb.w	r3, [sl]
 8007360:	2b67      	cmp	r3, #103	; 0x67
 8007362:	f10a 0501 	add.w	r5, sl, #1
 8007366:	d82b      	bhi.n	80073c0 <__ssvfiscanf_r+0x12c>
 8007368:	2b65      	cmp	r3, #101	; 0x65
 800736a:	f080 809f 	bcs.w	80074ac <__ssvfiscanf_r+0x218>
 800736e:	2b47      	cmp	r3, #71	; 0x47
 8007370:	d810      	bhi.n	8007394 <__ssvfiscanf_r+0x100>
 8007372:	2b45      	cmp	r3, #69	; 0x45
 8007374:	f080 809a 	bcs.w	80074ac <__ssvfiscanf_r+0x218>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d06c      	beq.n	8007456 <__ssvfiscanf_r+0x1c2>
 800737c:	2b25      	cmp	r3, #37	; 0x25
 800737e:	d051      	beq.n	8007424 <__ssvfiscanf_r+0x190>
 8007380:	2303      	movs	r3, #3
 8007382:	9347      	str	r3, [sp, #284]	; 0x11c
 8007384:	9742      	str	r7, [sp, #264]	; 0x108
 8007386:	e027      	b.n	80073d8 <__ssvfiscanf_r+0x144>
 8007388:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800738a:	fb07 1303 	mla	r3, r7, r3, r1
 800738e:	3b30      	subs	r3, #48	; 0x30
 8007390:	9343      	str	r3, [sp, #268]	; 0x10c
 8007392:	e7cf      	b.n	8007334 <__ssvfiscanf_r+0xa0>
 8007394:	2b5b      	cmp	r3, #91	; 0x5b
 8007396:	d06a      	beq.n	800746e <__ssvfiscanf_r+0x1da>
 8007398:	d80c      	bhi.n	80073b4 <__ssvfiscanf_r+0x120>
 800739a:	2b58      	cmp	r3, #88	; 0x58
 800739c:	d1f0      	bne.n	8007380 <__ssvfiscanf_r+0xec>
 800739e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80073a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073a4:	9241      	str	r2, [sp, #260]	; 0x104
 80073a6:	2210      	movs	r2, #16
 80073a8:	9242      	str	r2, [sp, #264]	; 0x108
 80073aa:	2b6e      	cmp	r3, #110	; 0x6e
 80073ac:	bf8c      	ite	hi
 80073ae:	2304      	movhi	r3, #4
 80073b0:	2303      	movls	r3, #3
 80073b2:	e010      	b.n	80073d6 <__ssvfiscanf_r+0x142>
 80073b4:	2b63      	cmp	r3, #99	; 0x63
 80073b6:	d065      	beq.n	8007484 <__ssvfiscanf_r+0x1f0>
 80073b8:	2b64      	cmp	r3, #100	; 0x64
 80073ba:	d1e1      	bne.n	8007380 <__ssvfiscanf_r+0xec>
 80073bc:	9742      	str	r7, [sp, #264]	; 0x108
 80073be:	e7f4      	b.n	80073aa <__ssvfiscanf_r+0x116>
 80073c0:	2b70      	cmp	r3, #112	; 0x70
 80073c2:	d04b      	beq.n	800745c <__ssvfiscanf_r+0x1c8>
 80073c4:	d826      	bhi.n	8007414 <__ssvfiscanf_r+0x180>
 80073c6:	2b6e      	cmp	r3, #110	; 0x6e
 80073c8:	d062      	beq.n	8007490 <__ssvfiscanf_r+0x1fc>
 80073ca:	d84c      	bhi.n	8007466 <__ssvfiscanf_r+0x1d2>
 80073cc:	2b69      	cmp	r3, #105	; 0x69
 80073ce:	d1d7      	bne.n	8007380 <__ssvfiscanf_r+0xec>
 80073d0:	2300      	movs	r3, #0
 80073d2:	9342      	str	r3, [sp, #264]	; 0x108
 80073d4:	2303      	movs	r3, #3
 80073d6:	9347      	str	r3, [sp, #284]	; 0x11c
 80073d8:	6863      	ldr	r3, [r4, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	dd68      	ble.n	80074b0 <__ssvfiscanf_r+0x21c>
 80073de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80073e0:	0659      	lsls	r1, r3, #25
 80073e2:	d407      	bmi.n	80073f4 <__ssvfiscanf_r+0x160>
 80073e4:	f000 fd10 	bl	8007e08 <__locale_ctype_ptr>
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	781a      	ldrb	r2, [r3, #0]
 80073ec:	4410      	add	r0, r2
 80073ee:	7842      	ldrb	r2, [r0, #1]
 80073f0:	0712      	lsls	r2, r2, #28
 80073f2:	d464      	bmi.n	80074be <__ssvfiscanf_r+0x22a>
 80073f4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	dc73      	bgt.n	80074e2 <__ssvfiscanf_r+0x24e>
 80073fa:	466b      	mov	r3, sp
 80073fc:	4622      	mov	r2, r4
 80073fe:	a941      	add	r1, sp, #260	; 0x104
 8007400:	4630      	mov	r0, r6
 8007402:	f000 fa1f 	bl	8007844 <_scanf_chars>
 8007406:	2801      	cmp	r0, #1
 8007408:	f000 8089 	beq.w	800751e <__ssvfiscanf_r+0x28a>
 800740c:	2802      	cmp	r0, #2
 800740e:	f47f af71 	bne.w	80072f4 <__ssvfiscanf_r+0x60>
 8007412:	e01d      	b.n	8007450 <__ssvfiscanf_r+0x1bc>
 8007414:	2b75      	cmp	r3, #117	; 0x75
 8007416:	d0d1      	beq.n	80073bc <__ssvfiscanf_r+0x128>
 8007418:	2b78      	cmp	r3, #120	; 0x78
 800741a:	d0c0      	beq.n	800739e <__ssvfiscanf_r+0x10a>
 800741c:	2b73      	cmp	r3, #115	; 0x73
 800741e:	d1af      	bne.n	8007380 <__ssvfiscanf_r+0xec>
 8007420:	2302      	movs	r3, #2
 8007422:	e7d8      	b.n	80073d6 <__ssvfiscanf_r+0x142>
 8007424:	6863      	ldr	r3, [r4, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	dd0c      	ble.n	8007444 <__ssvfiscanf_r+0x1b0>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	781a      	ldrb	r2, [r3, #0]
 800742e:	455a      	cmp	r2, fp
 8007430:	d175      	bne.n	800751e <__ssvfiscanf_r+0x28a>
 8007432:	3301      	adds	r3, #1
 8007434:	6862      	ldr	r2, [r4, #4]
 8007436:	6023      	str	r3, [r4, #0]
 8007438:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800743a:	3a01      	subs	r2, #1
 800743c:	3301      	adds	r3, #1
 800743e:	6062      	str	r2, [r4, #4]
 8007440:	9345      	str	r3, [sp, #276]	; 0x114
 8007442:	e757      	b.n	80072f4 <__ssvfiscanf_r+0x60>
 8007444:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007446:	4621      	mov	r1, r4
 8007448:	4630      	mov	r0, r6
 800744a:	4798      	blx	r3
 800744c:	2800      	cmp	r0, #0
 800744e:	d0ec      	beq.n	800742a <__ssvfiscanf_r+0x196>
 8007450:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007452:	2800      	cmp	r0, #0
 8007454:	d159      	bne.n	800750a <__ssvfiscanf_r+0x276>
 8007456:	f04f 30ff 	mov.w	r0, #4294967295
 800745a:	e05c      	b.n	8007516 <__ssvfiscanf_r+0x282>
 800745c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800745e:	f042 0220 	orr.w	r2, r2, #32
 8007462:	9241      	str	r2, [sp, #260]	; 0x104
 8007464:	e79b      	b.n	800739e <__ssvfiscanf_r+0x10a>
 8007466:	2308      	movs	r3, #8
 8007468:	9342      	str	r3, [sp, #264]	; 0x108
 800746a:	2304      	movs	r3, #4
 800746c:	e7b3      	b.n	80073d6 <__ssvfiscanf_r+0x142>
 800746e:	4629      	mov	r1, r5
 8007470:	4640      	mov	r0, r8
 8007472:	f000 fb3f 	bl	8007af4 <__sccl>
 8007476:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800747c:	9341      	str	r3, [sp, #260]	; 0x104
 800747e:	4605      	mov	r5, r0
 8007480:	2301      	movs	r3, #1
 8007482:	e7a8      	b.n	80073d6 <__ssvfiscanf_r+0x142>
 8007484:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800748a:	9341      	str	r3, [sp, #260]	; 0x104
 800748c:	2300      	movs	r3, #0
 800748e:	e7a2      	b.n	80073d6 <__ssvfiscanf_r+0x142>
 8007490:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007492:	06c3      	lsls	r3, r0, #27
 8007494:	f53f af2e 	bmi.w	80072f4 <__ssvfiscanf_r+0x60>
 8007498:	9b00      	ldr	r3, [sp, #0]
 800749a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800749c:	1d19      	adds	r1, r3, #4
 800749e:	9100      	str	r1, [sp, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	07c0      	lsls	r0, r0, #31
 80074a4:	bf4c      	ite	mi
 80074a6:	801a      	strhmi	r2, [r3, #0]
 80074a8:	601a      	strpl	r2, [r3, #0]
 80074aa:	e723      	b.n	80072f4 <__ssvfiscanf_r+0x60>
 80074ac:	2305      	movs	r3, #5
 80074ae:	e792      	b.n	80073d6 <__ssvfiscanf_r+0x142>
 80074b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80074b2:	4621      	mov	r1, r4
 80074b4:	4630      	mov	r0, r6
 80074b6:	4798      	blx	r3
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d090      	beq.n	80073de <__ssvfiscanf_r+0x14a>
 80074bc:	e7c8      	b.n	8007450 <__ssvfiscanf_r+0x1bc>
 80074be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80074c0:	3201      	adds	r2, #1
 80074c2:	9245      	str	r2, [sp, #276]	; 0x114
 80074c4:	6862      	ldr	r2, [r4, #4]
 80074c6:	3a01      	subs	r2, #1
 80074c8:	2a00      	cmp	r2, #0
 80074ca:	6062      	str	r2, [r4, #4]
 80074cc:	dd02      	ble.n	80074d4 <__ssvfiscanf_r+0x240>
 80074ce:	3301      	adds	r3, #1
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	e787      	b.n	80073e4 <__ssvfiscanf_r+0x150>
 80074d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80074d6:	4621      	mov	r1, r4
 80074d8:	4630      	mov	r0, r6
 80074da:	4798      	blx	r3
 80074dc:	2800      	cmp	r0, #0
 80074de:	d081      	beq.n	80073e4 <__ssvfiscanf_r+0x150>
 80074e0:	e7b6      	b.n	8007450 <__ssvfiscanf_r+0x1bc>
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	dc06      	bgt.n	80074f4 <__ssvfiscanf_r+0x260>
 80074e6:	466b      	mov	r3, sp
 80074e8:	4622      	mov	r2, r4
 80074ea:	a941      	add	r1, sp, #260	; 0x104
 80074ec:	4630      	mov	r0, r6
 80074ee:	f000 fa0d 	bl	800790c <_scanf_i>
 80074f2:	e788      	b.n	8007406 <__ssvfiscanf_r+0x172>
 80074f4:	4b0e      	ldr	r3, [pc, #56]	; (8007530 <__ssvfiscanf_r+0x29c>)
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f43f aefc 	beq.w	80072f4 <__ssvfiscanf_r+0x60>
 80074fc:	466b      	mov	r3, sp
 80074fe:	4622      	mov	r2, r4
 8007500:	a941      	add	r1, sp, #260	; 0x104
 8007502:	4630      	mov	r0, r6
 8007504:	f3af 8000 	nop.w
 8007508:	e77d      	b.n	8007406 <__ssvfiscanf_r+0x172>
 800750a:	89a3      	ldrh	r3, [r4, #12]
 800750c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007510:	bf18      	it	ne
 8007512:	f04f 30ff 	movne.w	r0, #4294967295
 8007516:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800751a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800751e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007520:	e7f9      	b.n	8007516 <__ssvfiscanf_r+0x282>
 8007522:	bf00      	nop
 8007524:	080071e1 	.word	0x080071e1
 8007528:	0800725b 	.word	0x0800725b
 800752c:	080080ca 	.word	0x080080ca
 8007530:	00000000 	.word	0x00000000

08007534 <_printf_common>:
 8007534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007538:	4691      	mov	r9, r2
 800753a:	461f      	mov	r7, r3
 800753c:	688a      	ldr	r2, [r1, #8]
 800753e:	690b      	ldr	r3, [r1, #16]
 8007540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007544:	4293      	cmp	r3, r2
 8007546:	bfb8      	it	lt
 8007548:	4613      	movlt	r3, r2
 800754a:	f8c9 3000 	str.w	r3, [r9]
 800754e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007552:	4606      	mov	r6, r0
 8007554:	460c      	mov	r4, r1
 8007556:	b112      	cbz	r2, 800755e <_printf_common+0x2a>
 8007558:	3301      	adds	r3, #1
 800755a:	f8c9 3000 	str.w	r3, [r9]
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	0699      	lsls	r1, r3, #26
 8007562:	bf42      	ittt	mi
 8007564:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007568:	3302      	addmi	r3, #2
 800756a:	f8c9 3000 	strmi.w	r3, [r9]
 800756e:	6825      	ldr	r5, [r4, #0]
 8007570:	f015 0506 	ands.w	r5, r5, #6
 8007574:	d107      	bne.n	8007586 <_printf_common+0x52>
 8007576:	f104 0a19 	add.w	sl, r4, #25
 800757a:	68e3      	ldr	r3, [r4, #12]
 800757c:	f8d9 2000 	ldr.w	r2, [r9]
 8007580:	1a9b      	subs	r3, r3, r2
 8007582:	42ab      	cmp	r3, r5
 8007584:	dc28      	bgt.n	80075d8 <_printf_common+0xa4>
 8007586:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800758a:	6822      	ldr	r2, [r4, #0]
 800758c:	3300      	adds	r3, #0
 800758e:	bf18      	it	ne
 8007590:	2301      	movne	r3, #1
 8007592:	0692      	lsls	r2, r2, #26
 8007594:	d42d      	bmi.n	80075f2 <_printf_common+0xbe>
 8007596:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800759a:	4639      	mov	r1, r7
 800759c:	4630      	mov	r0, r6
 800759e:	47c0      	blx	r8
 80075a0:	3001      	adds	r0, #1
 80075a2:	d020      	beq.n	80075e6 <_printf_common+0xb2>
 80075a4:	6823      	ldr	r3, [r4, #0]
 80075a6:	68e5      	ldr	r5, [r4, #12]
 80075a8:	f8d9 2000 	ldr.w	r2, [r9]
 80075ac:	f003 0306 	and.w	r3, r3, #6
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	bf08      	it	eq
 80075b4:	1aad      	subeq	r5, r5, r2
 80075b6:	68a3      	ldr	r3, [r4, #8]
 80075b8:	6922      	ldr	r2, [r4, #16]
 80075ba:	bf0c      	ite	eq
 80075bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075c0:	2500      	movne	r5, #0
 80075c2:	4293      	cmp	r3, r2
 80075c4:	bfc4      	itt	gt
 80075c6:	1a9b      	subgt	r3, r3, r2
 80075c8:	18ed      	addgt	r5, r5, r3
 80075ca:	f04f 0900 	mov.w	r9, #0
 80075ce:	341a      	adds	r4, #26
 80075d0:	454d      	cmp	r5, r9
 80075d2:	d11a      	bne.n	800760a <_printf_common+0xd6>
 80075d4:	2000      	movs	r0, #0
 80075d6:	e008      	b.n	80075ea <_printf_common+0xb6>
 80075d8:	2301      	movs	r3, #1
 80075da:	4652      	mov	r2, sl
 80075dc:	4639      	mov	r1, r7
 80075de:	4630      	mov	r0, r6
 80075e0:	47c0      	blx	r8
 80075e2:	3001      	adds	r0, #1
 80075e4:	d103      	bne.n	80075ee <_printf_common+0xba>
 80075e6:	f04f 30ff 	mov.w	r0, #4294967295
 80075ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ee:	3501      	adds	r5, #1
 80075f0:	e7c3      	b.n	800757a <_printf_common+0x46>
 80075f2:	18e1      	adds	r1, r4, r3
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	2030      	movs	r0, #48	; 0x30
 80075f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075fc:	4422      	add	r2, r4
 80075fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007602:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007606:	3302      	adds	r3, #2
 8007608:	e7c5      	b.n	8007596 <_printf_common+0x62>
 800760a:	2301      	movs	r3, #1
 800760c:	4622      	mov	r2, r4
 800760e:	4639      	mov	r1, r7
 8007610:	4630      	mov	r0, r6
 8007612:	47c0      	blx	r8
 8007614:	3001      	adds	r0, #1
 8007616:	d0e6      	beq.n	80075e6 <_printf_common+0xb2>
 8007618:	f109 0901 	add.w	r9, r9, #1
 800761c:	e7d8      	b.n	80075d0 <_printf_common+0x9c>
	...

08007620 <_printf_i>:
 8007620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007624:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007628:	460c      	mov	r4, r1
 800762a:	7e09      	ldrb	r1, [r1, #24]
 800762c:	b085      	sub	sp, #20
 800762e:	296e      	cmp	r1, #110	; 0x6e
 8007630:	4617      	mov	r7, r2
 8007632:	4606      	mov	r6, r0
 8007634:	4698      	mov	r8, r3
 8007636:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007638:	f000 80b3 	beq.w	80077a2 <_printf_i+0x182>
 800763c:	d822      	bhi.n	8007684 <_printf_i+0x64>
 800763e:	2963      	cmp	r1, #99	; 0x63
 8007640:	d036      	beq.n	80076b0 <_printf_i+0x90>
 8007642:	d80a      	bhi.n	800765a <_printf_i+0x3a>
 8007644:	2900      	cmp	r1, #0
 8007646:	f000 80b9 	beq.w	80077bc <_printf_i+0x19c>
 800764a:	2958      	cmp	r1, #88	; 0x58
 800764c:	f000 8083 	beq.w	8007756 <_printf_i+0x136>
 8007650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007654:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007658:	e032      	b.n	80076c0 <_printf_i+0xa0>
 800765a:	2964      	cmp	r1, #100	; 0x64
 800765c:	d001      	beq.n	8007662 <_printf_i+0x42>
 800765e:	2969      	cmp	r1, #105	; 0x69
 8007660:	d1f6      	bne.n	8007650 <_printf_i+0x30>
 8007662:	6820      	ldr	r0, [r4, #0]
 8007664:	6813      	ldr	r3, [r2, #0]
 8007666:	0605      	lsls	r5, r0, #24
 8007668:	f103 0104 	add.w	r1, r3, #4
 800766c:	d52a      	bpl.n	80076c4 <_printf_i+0xa4>
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6011      	str	r1, [r2, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	da03      	bge.n	800767e <_printf_i+0x5e>
 8007676:	222d      	movs	r2, #45	; 0x2d
 8007678:	425b      	negs	r3, r3
 800767a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800767e:	486f      	ldr	r0, [pc, #444]	; (800783c <_printf_i+0x21c>)
 8007680:	220a      	movs	r2, #10
 8007682:	e039      	b.n	80076f8 <_printf_i+0xd8>
 8007684:	2973      	cmp	r1, #115	; 0x73
 8007686:	f000 809d 	beq.w	80077c4 <_printf_i+0x1a4>
 800768a:	d808      	bhi.n	800769e <_printf_i+0x7e>
 800768c:	296f      	cmp	r1, #111	; 0x6f
 800768e:	d020      	beq.n	80076d2 <_printf_i+0xb2>
 8007690:	2970      	cmp	r1, #112	; 0x70
 8007692:	d1dd      	bne.n	8007650 <_printf_i+0x30>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	f043 0320 	orr.w	r3, r3, #32
 800769a:	6023      	str	r3, [r4, #0]
 800769c:	e003      	b.n	80076a6 <_printf_i+0x86>
 800769e:	2975      	cmp	r1, #117	; 0x75
 80076a0:	d017      	beq.n	80076d2 <_printf_i+0xb2>
 80076a2:	2978      	cmp	r1, #120	; 0x78
 80076a4:	d1d4      	bne.n	8007650 <_printf_i+0x30>
 80076a6:	2378      	movs	r3, #120	; 0x78
 80076a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076ac:	4864      	ldr	r0, [pc, #400]	; (8007840 <_printf_i+0x220>)
 80076ae:	e055      	b.n	800775c <_printf_i+0x13c>
 80076b0:	6813      	ldr	r3, [r2, #0]
 80076b2:	1d19      	adds	r1, r3, #4
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6011      	str	r1, [r2, #0]
 80076b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076c0:	2301      	movs	r3, #1
 80076c2:	e08c      	b.n	80077de <_printf_i+0x1be>
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6011      	str	r1, [r2, #0]
 80076c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076cc:	bf18      	it	ne
 80076ce:	b21b      	sxthne	r3, r3
 80076d0:	e7cf      	b.n	8007672 <_printf_i+0x52>
 80076d2:	6813      	ldr	r3, [r2, #0]
 80076d4:	6825      	ldr	r5, [r4, #0]
 80076d6:	1d18      	adds	r0, r3, #4
 80076d8:	6010      	str	r0, [r2, #0]
 80076da:	0628      	lsls	r0, r5, #24
 80076dc:	d501      	bpl.n	80076e2 <_printf_i+0xc2>
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	e002      	b.n	80076e8 <_printf_i+0xc8>
 80076e2:	0668      	lsls	r0, r5, #25
 80076e4:	d5fb      	bpl.n	80076de <_printf_i+0xbe>
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	4854      	ldr	r0, [pc, #336]	; (800783c <_printf_i+0x21c>)
 80076ea:	296f      	cmp	r1, #111	; 0x6f
 80076ec:	bf14      	ite	ne
 80076ee:	220a      	movne	r2, #10
 80076f0:	2208      	moveq	r2, #8
 80076f2:	2100      	movs	r1, #0
 80076f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076f8:	6865      	ldr	r5, [r4, #4]
 80076fa:	60a5      	str	r5, [r4, #8]
 80076fc:	2d00      	cmp	r5, #0
 80076fe:	f2c0 8095 	blt.w	800782c <_printf_i+0x20c>
 8007702:	6821      	ldr	r1, [r4, #0]
 8007704:	f021 0104 	bic.w	r1, r1, #4
 8007708:	6021      	str	r1, [r4, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d13d      	bne.n	800778a <_printf_i+0x16a>
 800770e:	2d00      	cmp	r5, #0
 8007710:	f040 808e 	bne.w	8007830 <_printf_i+0x210>
 8007714:	4665      	mov	r5, ip
 8007716:	2a08      	cmp	r2, #8
 8007718:	d10b      	bne.n	8007732 <_printf_i+0x112>
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	07db      	lsls	r3, r3, #31
 800771e:	d508      	bpl.n	8007732 <_printf_i+0x112>
 8007720:	6923      	ldr	r3, [r4, #16]
 8007722:	6862      	ldr	r2, [r4, #4]
 8007724:	429a      	cmp	r2, r3
 8007726:	bfde      	ittt	le
 8007728:	2330      	movle	r3, #48	; 0x30
 800772a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800772e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007732:	ebac 0305 	sub.w	r3, ip, r5
 8007736:	6123      	str	r3, [r4, #16]
 8007738:	f8cd 8000 	str.w	r8, [sp]
 800773c:	463b      	mov	r3, r7
 800773e:	aa03      	add	r2, sp, #12
 8007740:	4621      	mov	r1, r4
 8007742:	4630      	mov	r0, r6
 8007744:	f7ff fef6 	bl	8007534 <_printf_common>
 8007748:	3001      	adds	r0, #1
 800774a:	d14d      	bne.n	80077e8 <_printf_i+0x1c8>
 800774c:	f04f 30ff 	mov.w	r0, #4294967295
 8007750:	b005      	add	sp, #20
 8007752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007756:	4839      	ldr	r0, [pc, #228]	; (800783c <_printf_i+0x21c>)
 8007758:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800775c:	6813      	ldr	r3, [r2, #0]
 800775e:	6821      	ldr	r1, [r4, #0]
 8007760:	1d1d      	adds	r5, r3, #4
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6015      	str	r5, [r2, #0]
 8007766:	060a      	lsls	r2, r1, #24
 8007768:	d50b      	bpl.n	8007782 <_printf_i+0x162>
 800776a:	07ca      	lsls	r2, r1, #31
 800776c:	bf44      	itt	mi
 800776e:	f041 0120 	orrmi.w	r1, r1, #32
 8007772:	6021      	strmi	r1, [r4, #0]
 8007774:	b91b      	cbnz	r3, 800777e <_printf_i+0x15e>
 8007776:	6822      	ldr	r2, [r4, #0]
 8007778:	f022 0220 	bic.w	r2, r2, #32
 800777c:	6022      	str	r2, [r4, #0]
 800777e:	2210      	movs	r2, #16
 8007780:	e7b7      	b.n	80076f2 <_printf_i+0xd2>
 8007782:	064d      	lsls	r5, r1, #25
 8007784:	bf48      	it	mi
 8007786:	b29b      	uxthmi	r3, r3
 8007788:	e7ef      	b.n	800776a <_printf_i+0x14a>
 800778a:	4665      	mov	r5, ip
 800778c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007790:	fb02 3311 	mls	r3, r2, r1, r3
 8007794:	5cc3      	ldrb	r3, [r0, r3]
 8007796:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800779a:	460b      	mov	r3, r1
 800779c:	2900      	cmp	r1, #0
 800779e:	d1f5      	bne.n	800778c <_printf_i+0x16c>
 80077a0:	e7b9      	b.n	8007716 <_printf_i+0xf6>
 80077a2:	6813      	ldr	r3, [r2, #0]
 80077a4:	6825      	ldr	r5, [r4, #0]
 80077a6:	6961      	ldr	r1, [r4, #20]
 80077a8:	1d18      	adds	r0, r3, #4
 80077aa:	6010      	str	r0, [r2, #0]
 80077ac:	0628      	lsls	r0, r5, #24
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	d501      	bpl.n	80077b6 <_printf_i+0x196>
 80077b2:	6019      	str	r1, [r3, #0]
 80077b4:	e002      	b.n	80077bc <_printf_i+0x19c>
 80077b6:	066a      	lsls	r2, r5, #25
 80077b8:	d5fb      	bpl.n	80077b2 <_printf_i+0x192>
 80077ba:	8019      	strh	r1, [r3, #0]
 80077bc:	2300      	movs	r3, #0
 80077be:	6123      	str	r3, [r4, #16]
 80077c0:	4665      	mov	r5, ip
 80077c2:	e7b9      	b.n	8007738 <_printf_i+0x118>
 80077c4:	6813      	ldr	r3, [r2, #0]
 80077c6:	1d19      	adds	r1, r3, #4
 80077c8:	6011      	str	r1, [r2, #0]
 80077ca:	681d      	ldr	r5, [r3, #0]
 80077cc:	6862      	ldr	r2, [r4, #4]
 80077ce:	2100      	movs	r1, #0
 80077d0:	4628      	mov	r0, r5
 80077d2:	f7f8 fd25 	bl	8000220 <memchr>
 80077d6:	b108      	cbz	r0, 80077dc <_printf_i+0x1bc>
 80077d8:	1b40      	subs	r0, r0, r5
 80077da:	6060      	str	r0, [r4, #4]
 80077dc:	6863      	ldr	r3, [r4, #4]
 80077de:	6123      	str	r3, [r4, #16]
 80077e0:	2300      	movs	r3, #0
 80077e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e6:	e7a7      	b.n	8007738 <_printf_i+0x118>
 80077e8:	6923      	ldr	r3, [r4, #16]
 80077ea:	462a      	mov	r2, r5
 80077ec:	4639      	mov	r1, r7
 80077ee:	4630      	mov	r0, r6
 80077f0:	47c0      	blx	r8
 80077f2:	3001      	adds	r0, #1
 80077f4:	d0aa      	beq.n	800774c <_printf_i+0x12c>
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	079b      	lsls	r3, r3, #30
 80077fa:	d413      	bmi.n	8007824 <_printf_i+0x204>
 80077fc:	68e0      	ldr	r0, [r4, #12]
 80077fe:	9b03      	ldr	r3, [sp, #12]
 8007800:	4298      	cmp	r0, r3
 8007802:	bfb8      	it	lt
 8007804:	4618      	movlt	r0, r3
 8007806:	e7a3      	b.n	8007750 <_printf_i+0x130>
 8007808:	2301      	movs	r3, #1
 800780a:	464a      	mov	r2, r9
 800780c:	4639      	mov	r1, r7
 800780e:	4630      	mov	r0, r6
 8007810:	47c0      	blx	r8
 8007812:	3001      	adds	r0, #1
 8007814:	d09a      	beq.n	800774c <_printf_i+0x12c>
 8007816:	3501      	adds	r5, #1
 8007818:	68e3      	ldr	r3, [r4, #12]
 800781a:	9a03      	ldr	r2, [sp, #12]
 800781c:	1a9b      	subs	r3, r3, r2
 800781e:	42ab      	cmp	r3, r5
 8007820:	dcf2      	bgt.n	8007808 <_printf_i+0x1e8>
 8007822:	e7eb      	b.n	80077fc <_printf_i+0x1dc>
 8007824:	2500      	movs	r5, #0
 8007826:	f104 0919 	add.w	r9, r4, #25
 800782a:	e7f5      	b.n	8007818 <_printf_i+0x1f8>
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1ac      	bne.n	800778a <_printf_i+0x16a>
 8007830:	7803      	ldrb	r3, [r0, #0]
 8007832:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007836:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800783a:	e76c      	b.n	8007716 <_printf_i+0xf6>
 800783c:	080080d5 	.word	0x080080d5
 8007840:	080080e6 	.word	0x080080e6

08007844 <_scanf_chars>:
 8007844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007848:	4615      	mov	r5, r2
 800784a:	688a      	ldr	r2, [r1, #8]
 800784c:	4680      	mov	r8, r0
 800784e:	460c      	mov	r4, r1
 8007850:	b932      	cbnz	r2, 8007860 <_scanf_chars+0x1c>
 8007852:	698a      	ldr	r2, [r1, #24]
 8007854:	2a00      	cmp	r2, #0
 8007856:	bf14      	ite	ne
 8007858:	f04f 32ff 	movne.w	r2, #4294967295
 800785c:	2201      	moveq	r2, #1
 800785e:	608a      	str	r2, [r1, #8]
 8007860:	6822      	ldr	r2, [r4, #0]
 8007862:	06d1      	lsls	r1, r2, #27
 8007864:	bf5f      	itttt	pl
 8007866:	681a      	ldrpl	r2, [r3, #0]
 8007868:	1d11      	addpl	r1, r2, #4
 800786a:	6019      	strpl	r1, [r3, #0]
 800786c:	6817      	ldrpl	r7, [r2, #0]
 800786e:	2600      	movs	r6, #0
 8007870:	69a3      	ldr	r3, [r4, #24]
 8007872:	b1db      	cbz	r3, 80078ac <_scanf_chars+0x68>
 8007874:	2b01      	cmp	r3, #1
 8007876:	d107      	bne.n	8007888 <_scanf_chars+0x44>
 8007878:	682b      	ldr	r3, [r5, #0]
 800787a:	6962      	ldr	r2, [r4, #20]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	5cd3      	ldrb	r3, [r2, r3]
 8007880:	b9a3      	cbnz	r3, 80078ac <_scanf_chars+0x68>
 8007882:	2e00      	cmp	r6, #0
 8007884:	d132      	bne.n	80078ec <_scanf_chars+0xa8>
 8007886:	e006      	b.n	8007896 <_scanf_chars+0x52>
 8007888:	2b02      	cmp	r3, #2
 800788a:	d007      	beq.n	800789c <_scanf_chars+0x58>
 800788c:	2e00      	cmp	r6, #0
 800788e:	d12d      	bne.n	80078ec <_scanf_chars+0xa8>
 8007890:	69a3      	ldr	r3, [r4, #24]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d12a      	bne.n	80078ec <_scanf_chars+0xa8>
 8007896:	2001      	movs	r0, #1
 8007898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800789c:	f000 fab4 	bl	8007e08 <__locale_ctype_ptr>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	4418      	add	r0, r3
 80078a6:	7843      	ldrb	r3, [r0, #1]
 80078a8:	071b      	lsls	r3, r3, #28
 80078aa:	d4ef      	bmi.n	800788c <_scanf_chars+0x48>
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	06da      	lsls	r2, r3, #27
 80078b0:	bf5e      	ittt	pl
 80078b2:	682b      	ldrpl	r3, [r5, #0]
 80078b4:	781b      	ldrbpl	r3, [r3, #0]
 80078b6:	703b      	strbpl	r3, [r7, #0]
 80078b8:	682a      	ldr	r2, [r5, #0]
 80078ba:	686b      	ldr	r3, [r5, #4]
 80078bc:	f102 0201 	add.w	r2, r2, #1
 80078c0:	602a      	str	r2, [r5, #0]
 80078c2:	68a2      	ldr	r2, [r4, #8]
 80078c4:	f103 33ff 	add.w	r3, r3, #4294967295
 80078c8:	f102 32ff 	add.w	r2, r2, #4294967295
 80078cc:	606b      	str	r3, [r5, #4]
 80078ce:	f106 0601 	add.w	r6, r6, #1
 80078d2:	bf58      	it	pl
 80078d4:	3701      	addpl	r7, #1
 80078d6:	60a2      	str	r2, [r4, #8]
 80078d8:	b142      	cbz	r2, 80078ec <_scanf_chars+0xa8>
 80078da:	2b00      	cmp	r3, #0
 80078dc:	dcc8      	bgt.n	8007870 <_scanf_chars+0x2c>
 80078de:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80078e2:	4629      	mov	r1, r5
 80078e4:	4640      	mov	r0, r8
 80078e6:	4798      	blx	r3
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d0c1      	beq.n	8007870 <_scanf_chars+0x2c>
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	f013 0310 	ands.w	r3, r3, #16
 80078f2:	d105      	bne.n	8007900 <_scanf_chars+0xbc>
 80078f4:	68e2      	ldr	r2, [r4, #12]
 80078f6:	3201      	adds	r2, #1
 80078f8:	60e2      	str	r2, [r4, #12]
 80078fa:	69a2      	ldr	r2, [r4, #24]
 80078fc:	b102      	cbz	r2, 8007900 <_scanf_chars+0xbc>
 80078fe:	703b      	strb	r3, [r7, #0]
 8007900:	6923      	ldr	r3, [r4, #16]
 8007902:	441e      	add	r6, r3
 8007904:	6126      	str	r6, [r4, #16]
 8007906:	2000      	movs	r0, #0
 8007908:	e7c6      	b.n	8007898 <_scanf_chars+0x54>
	...

0800790c <_scanf_i>:
 800790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007910:	469a      	mov	sl, r3
 8007912:	4b74      	ldr	r3, [pc, #464]	; (8007ae4 <_scanf_i+0x1d8>)
 8007914:	460c      	mov	r4, r1
 8007916:	4683      	mov	fp, r0
 8007918:	4616      	mov	r6, r2
 800791a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800791e:	b087      	sub	sp, #28
 8007920:	ab03      	add	r3, sp, #12
 8007922:	68a7      	ldr	r7, [r4, #8]
 8007924:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007928:	4b6f      	ldr	r3, [pc, #444]	; (8007ae8 <_scanf_i+0x1dc>)
 800792a:	69a1      	ldr	r1, [r4, #24]
 800792c:	4a6f      	ldr	r2, [pc, #444]	; (8007aec <_scanf_i+0x1e0>)
 800792e:	2903      	cmp	r1, #3
 8007930:	bf08      	it	eq
 8007932:	461a      	moveq	r2, r3
 8007934:	1e7b      	subs	r3, r7, #1
 8007936:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800793a:	bf84      	itt	hi
 800793c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007940:	60a3      	strhi	r3, [r4, #8]
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	9200      	str	r2, [sp, #0]
 8007946:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800794a:	bf88      	it	hi
 800794c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007950:	f104 091c 	add.w	r9, r4, #28
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	bf8c      	ite	hi
 8007958:	197f      	addhi	r7, r7, r5
 800795a:	2700      	movls	r7, #0
 800795c:	464b      	mov	r3, r9
 800795e:	f04f 0800 	mov.w	r8, #0
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	6831      	ldr	r1, [r6, #0]
 8007966:	ab03      	add	r3, sp, #12
 8007968:	2202      	movs	r2, #2
 800796a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800796e:	7809      	ldrb	r1, [r1, #0]
 8007970:	f7f8 fc56 	bl	8000220 <memchr>
 8007974:	9b01      	ldr	r3, [sp, #4]
 8007976:	b330      	cbz	r0, 80079c6 <_scanf_i+0xba>
 8007978:	f1b8 0f01 	cmp.w	r8, #1
 800797c:	d15a      	bne.n	8007a34 <_scanf_i+0x128>
 800797e:	6862      	ldr	r2, [r4, #4]
 8007980:	b92a      	cbnz	r2, 800798e <_scanf_i+0x82>
 8007982:	6822      	ldr	r2, [r4, #0]
 8007984:	2108      	movs	r1, #8
 8007986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800798a:	6061      	str	r1, [r4, #4]
 800798c:	6022      	str	r2, [r4, #0]
 800798e:	6822      	ldr	r2, [r4, #0]
 8007990:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007994:	6022      	str	r2, [r4, #0]
 8007996:	68a2      	ldr	r2, [r4, #8]
 8007998:	1e51      	subs	r1, r2, #1
 800799a:	60a1      	str	r1, [r4, #8]
 800799c:	b19a      	cbz	r2, 80079c6 <_scanf_i+0xba>
 800799e:	6832      	ldr	r2, [r6, #0]
 80079a0:	1c51      	adds	r1, r2, #1
 80079a2:	6031      	str	r1, [r6, #0]
 80079a4:	7812      	ldrb	r2, [r2, #0]
 80079a6:	701a      	strb	r2, [r3, #0]
 80079a8:	1c5d      	adds	r5, r3, #1
 80079aa:	6873      	ldr	r3, [r6, #4]
 80079ac:	3b01      	subs	r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	6073      	str	r3, [r6, #4]
 80079b2:	dc07      	bgt.n	80079c4 <_scanf_i+0xb8>
 80079b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80079b8:	4631      	mov	r1, r6
 80079ba:	4658      	mov	r0, fp
 80079bc:	4798      	blx	r3
 80079be:	2800      	cmp	r0, #0
 80079c0:	f040 8086 	bne.w	8007ad0 <_scanf_i+0x1c4>
 80079c4:	462b      	mov	r3, r5
 80079c6:	f108 0801 	add.w	r8, r8, #1
 80079ca:	f1b8 0f03 	cmp.w	r8, #3
 80079ce:	d1c8      	bne.n	8007962 <_scanf_i+0x56>
 80079d0:	6862      	ldr	r2, [r4, #4]
 80079d2:	b90a      	cbnz	r2, 80079d8 <_scanf_i+0xcc>
 80079d4:	220a      	movs	r2, #10
 80079d6:	6062      	str	r2, [r4, #4]
 80079d8:	6862      	ldr	r2, [r4, #4]
 80079da:	4945      	ldr	r1, [pc, #276]	; (8007af0 <_scanf_i+0x1e4>)
 80079dc:	6960      	ldr	r0, [r4, #20]
 80079de:	9301      	str	r3, [sp, #4]
 80079e0:	1a89      	subs	r1, r1, r2
 80079e2:	f000 f887 	bl	8007af4 <__sccl>
 80079e6:	9b01      	ldr	r3, [sp, #4]
 80079e8:	f04f 0800 	mov.w	r8, #0
 80079ec:	461d      	mov	r5, r3
 80079ee:	68a3      	ldr	r3, [r4, #8]
 80079f0:	6822      	ldr	r2, [r4, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d03a      	beq.n	8007a6c <_scanf_i+0x160>
 80079f6:	6831      	ldr	r1, [r6, #0]
 80079f8:	6960      	ldr	r0, [r4, #20]
 80079fa:	f891 c000 	ldrb.w	ip, [r1]
 80079fe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007a02:	2800      	cmp	r0, #0
 8007a04:	d032      	beq.n	8007a6c <_scanf_i+0x160>
 8007a06:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007a0a:	d121      	bne.n	8007a50 <_scanf_i+0x144>
 8007a0c:	0510      	lsls	r0, r2, #20
 8007a0e:	d51f      	bpl.n	8007a50 <_scanf_i+0x144>
 8007a10:	f108 0801 	add.w	r8, r8, #1
 8007a14:	b117      	cbz	r7, 8007a1c <_scanf_i+0x110>
 8007a16:	3301      	adds	r3, #1
 8007a18:	3f01      	subs	r7, #1
 8007a1a:	60a3      	str	r3, [r4, #8]
 8007a1c:	6873      	ldr	r3, [r6, #4]
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	6073      	str	r3, [r6, #4]
 8007a24:	dd1b      	ble.n	8007a5e <_scanf_i+0x152>
 8007a26:	6833      	ldr	r3, [r6, #0]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	6033      	str	r3, [r6, #0]
 8007a2c:	68a3      	ldr	r3, [r4, #8]
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	60a3      	str	r3, [r4, #8]
 8007a32:	e7dc      	b.n	80079ee <_scanf_i+0xe2>
 8007a34:	f1b8 0f02 	cmp.w	r8, #2
 8007a38:	d1ad      	bne.n	8007996 <_scanf_i+0x8a>
 8007a3a:	6822      	ldr	r2, [r4, #0]
 8007a3c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007a40:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007a44:	d1bf      	bne.n	80079c6 <_scanf_i+0xba>
 8007a46:	2110      	movs	r1, #16
 8007a48:	6061      	str	r1, [r4, #4]
 8007a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a4e:	e7a1      	b.n	8007994 <_scanf_i+0x88>
 8007a50:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007a54:	6022      	str	r2, [r4, #0]
 8007a56:	780b      	ldrb	r3, [r1, #0]
 8007a58:	702b      	strb	r3, [r5, #0]
 8007a5a:	3501      	adds	r5, #1
 8007a5c:	e7de      	b.n	8007a1c <_scanf_i+0x110>
 8007a5e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007a62:	4631      	mov	r1, r6
 8007a64:	4658      	mov	r0, fp
 8007a66:	4798      	blx	r3
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d0df      	beq.n	8007a2c <_scanf_i+0x120>
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	05d9      	lsls	r1, r3, #23
 8007a70:	d50c      	bpl.n	8007a8c <_scanf_i+0x180>
 8007a72:	454d      	cmp	r5, r9
 8007a74:	d908      	bls.n	8007a88 <_scanf_i+0x17c>
 8007a76:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007a7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a7e:	4632      	mov	r2, r6
 8007a80:	4658      	mov	r0, fp
 8007a82:	4798      	blx	r3
 8007a84:	1e6f      	subs	r7, r5, #1
 8007a86:	463d      	mov	r5, r7
 8007a88:	454d      	cmp	r5, r9
 8007a8a:	d029      	beq.n	8007ae0 <_scanf_i+0x1d4>
 8007a8c:	6822      	ldr	r2, [r4, #0]
 8007a8e:	f012 0210 	ands.w	r2, r2, #16
 8007a92:	d113      	bne.n	8007abc <_scanf_i+0x1b0>
 8007a94:	702a      	strb	r2, [r5, #0]
 8007a96:	6863      	ldr	r3, [r4, #4]
 8007a98:	9e00      	ldr	r6, [sp, #0]
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	4658      	mov	r0, fp
 8007a9e:	47b0      	blx	r6
 8007aa0:	f8da 3000 	ldr.w	r3, [sl]
 8007aa4:	6821      	ldr	r1, [r4, #0]
 8007aa6:	1d1a      	adds	r2, r3, #4
 8007aa8:	f8ca 2000 	str.w	r2, [sl]
 8007aac:	f011 0f20 	tst.w	r1, #32
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	d010      	beq.n	8007ad6 <_scanf_i+0x1ca>
 8007ab4:	6018      	str	r0, [r3, #0]
 8007ab6:	68e3      	ldr	r3, [r4, #12]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	60e3      	str	r3, [r4, #12]
 8007abc:	eba5 0509 	sub.w	r5, r5, r9
 8007ac0:	44a8      	add	r8, r5
 8007ac2:	6925      	ldr	r5, [r4, #16]
 8007ac4:	4445      	add	r5, r8
 8007ac6:	6125      	str	r5, [r4, #16]
 8007ac8:	2000      	movs	r0, #0
 8007aca:	b007      	add	sp, #28
 8007acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad0:	f04f 0800 	mov.w	r8, #0
 8007ad4:	e7ca      	b.n	8007a6c <_scanf_i+0x160>
 8007ad6:	07ca      	lsls	r2, r1, #31
 8007ad8:	bf4c      	ite	mi
 8007ada:	8018      	strhmi	r0, [r3, #0]
 8007adc:	6018      	strpl	r0, [r3, #0]
 8007ade:	e7ea      	b.n	8007ab6 <_scanf_i+0x1aa>
 8007ae0:	2001      	movs	r0, #1
 8007ae2:	e7f2      	b.n	8007aca <_scanf_i+0x1be>
 8007ae4:	08008098 	.word	0x08008098
 8007ae8:	08007c51 	.word	0x08007c51
 8007aec:	08007d69 	.word	0x08007d69
 8007af0:	08008107 	.word	0x08008107

08007af4 <__sccl>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	780b      	ldrb	r3, [r1, #0]
 8007af8:	2b5e      	cmp	r3, #94	; 0x5e
 8007afa:	bf13      	iteet	ne
 8007afc:	1c4a      	addne	r2, r1, #1
 8007afe:	1c8a      	addeq	r2, r1, #2
 8007b00:	784b      	ldrbeq	r3, [r1, #1]
 8007b02:	2100      	movne	r1, #0
 8007b04:	bf08      	it	eq
 8007b06:	2101      	moveq	r1, #1
 8007b08:	1e44      	subs	r4, r0, #1
 8007b0a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8007b0e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8007b12:	42ac      	cmp	r4, r5
 8007b14:	d1fb      	bne.n	8007b0e <__sccl+0x1a>
 8007b16:	b913      	cbnz	r3, 8007b1e <__sccl+0x2a>
 8007b18:	3a01      	subs	r2, #1
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	bd70      	pop	{r4, r5, r6, pc}
 8007b1e:	f081 0401 	eor.w	r4, r1, #1
 8007b22:	54c4      	strb	r4, [r0, r3]
 8007b24:	1c51      	adds	r1, r2, #1
 8007b26:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8007b2a:	2d2d      	cmp	r5, #45	; 0x2d
 8007b2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8007b30:	460a      	mov	r2, r1
 8007b32:	d006      	beq.n	8007b42 <__sccl+0x4e>
 8007b34:	2d5d      	cmp	r5, #93	; 0x5d
 8007b36:	d0f0      	beq.n	8007b1a <__sccl+0x26>
 8007b38:	b90d      	cbnz	r5, 8007b3e <__sccl+0x4a>
 8007b3a:	4632      	mov	r2, r6
 8007b3c:	e7ed      	b.n	8007b1a <__sccl+0x26>
 8007b3e:	462b      	mov	r3, r5
 8007b40:	e7ef      	b.n	8007b22 <__sccl+0x2e>
 8007b42:	780e      	ldrb	r6, [r1, #0]
 8007b44:	2e5d      	cmp	r6, #93	; 0x5d
 8007b46:	d0fa      	beq.n	8007b3e <__sccl+0x4a>
 8007b48:	42b3      	cmp	r3, r6
 8007b4a:	dcf8      	bgt.n	8007b3e <__sccl+0x4a>
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	429e      	cmp	r6, r3
 8007b50:	54c4      	strb	r4, [r0, r3]
 8007b52:	dcfb      	bgt.n	8007b4c <__sccl+0x58>
 8007b54:	3102      	adds	r1, #2
 8007b56:	e7e6      	b.n	8007b26 <__sccl+0x32>

08007b58 <_strtol_l.isra.0>:
 8007b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b5c:	4680      	mov	r8, r0
 8007b5e:	4689      	mov	r9, r1
 8007b60:	4692      	mov	sl, r2
 8007b62:	461e      	mov	r6, r3
 8007b64:	460f      	mov	r7, r1
 8007b66:	463d      	mov	r5, r7
 8007b68:	9808      	ldr	r0, [sp, #32]
 8007b6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b6e:	f000 f947 	bl	8007e00 <__locale_ctype_ptr_l>
 8007b72:	4420      	add	r0, r4
 8007b74:	7843      	ldrb	r3, [r0, #1]
 8007b76:	f013 0308 	ands.w	r3, r3, #8
 8007b7a:	d132      	bne.n	8007be2 <_strtol_l.isra.0+0x8a>
 8007b7c:	2c2d      	cmp	r4, #45	; 0x2d
 8007b7e:	d132      	bne.n	8007be6 <_strtol_l.isra.0+0x8e>
 8007b80:	787c      	ldrb	r4, [r7, #1]
 8007b82:	1cbd      	adds	r5, r7, #2
 8007b84:	2201      	movs	r2, #1
 8007b86:	2e00      	cmp	r6, #0
 8007b88:	d05d      	beq.n	8007c46 <_strtol_l.isra.0+0xee>
 8007b8a:	2e10      	cmp	r6, #16
 8007b8c:	d109      	bne.n	8007ba2 <_strtol_l.isra.0+0x4a>
 8007b8e:	2c30      	cmp	r4, #48	; 0x30
 8007b90:	d107      	bne.n	8007ba2 <_strtol_l.isra.0+0x4a>
 8007b92:	782b      	ldrb	r3, [r5, #0]
 8007b94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b98:	2b58      	cmp	r3, #88	; 0x58
 8007b9a:	d14f      	bne.n	8007c3c <_strtol_l.isra.0+0xe4>
 8007b9c:	786c      	ldrb	r4, [r5, #1]
 8007b9e:	2610      	movs	r6, #16
 8007ba0:	3502      	adds	r5, #2
 8007ba2:	2a00      	cmp	r2, #0
 8007ba4:	bf14      	ite	ne
 8007ba6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007baa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007bae:	2700      	movs	r7, #0
 8007bb0:	fbb1 fcf6 	udiv	ip, r1, r6
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007bba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007bbe:	2b09      	cmp	r3, #9
 8007bc0:	d817      	bhi.n	8007bf2 <_strtol_l.isra.0+0x9a>
 8007bc2:	461c      	mov	r4, r3
 8007bc4:	42a6      	cmp	r6, r4
 8007bc6:	dd23      	ble.n	8007c10 <_strtol_l.isra.0+0xb8>
 8007bc8:	1c7b      	adds	r3, r7, #1
 8007bca:	d007      	beq.n	8007bdc <_strtol_l.isra.0+0x84>
 8007bcc:	4584      	cmp	ip, r0
 8007bce:	d31c      	bcc.n	8007c0a <_strtol_l.isra.0+0xb2>
 8007bd0:	d101      	bne.n	8007bd6 <_strtol_l.isra.0+0x7e>
 8007bd2:	45a6      	cmp	lr, r4
 8007bd4:	db19      	blt.n	8007c0a <_strtol_l.isra.0+0xb2>
 8007bd6:	fb00 4006 	mla	r0, r0, r6, r4
 8007bda:	2701      	movs	r7, #1
 8007bdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007be0:	e7eb      	b.n	8007bba <_strtol_l.isra.0+0x62>
 8007be2:	462f      	mov	r7, r5
 8007be4:	e7bf      	b.n	8007b66 <_strtol_l.isra.0+0xe>
 8007be6:	2c2b      	cmp	r4, #43	; 0x2b
 8007be8:	bf04      	itt	eq
 8007bea:	1cbd      	addeq	r5, r7, #2
 8007bec:	787c      	ldrbeq	r4, [r7, #1]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	e7c9      	b.n	8007b86 <_strtol_l.isra.0+0x2e>
 8007bf2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007bf6:	2b19      	cmp	r3, #25
 8007bf8:	d801      	bhi.n	8007bfe <_strtol_l.isra.0+0xa6>
 8007bfa:	3c37      	subs	r4, #55	; 0x37
 8007bfc:	e7e2      	b.n	8007bc4 <_strtol_l.isra.0+0x6c>
 8007bfe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007c02:	2b19      	cmp	r3, #25
 8007c04:	d804      	bhi.n	8007c10 <_strtol_l.isra.0+0xb8>
 8007c06:	3c57      	subs	r4, #87	; 0x57
 8007c08:	e7dc      	b.n	8007bc4 <_strtol_l.isra.0+0x6c>
 8007c0a:	f04f 37ff 	mov.w	r7, #4294967295
 8007c0e:	e7e5      	b.n	8007bdc <_strtol_l.isra.0+0x84>
 8007c10:	1c7b      	adds	r3, r7, #1
 8007c12:	d108      	bne.n	8007c26 <_strtol_l.isra.0+0xce>
 8007c14:	2322      	movs	r3, #34	; 0x22
 8007c16:	f8c8 3000 	str.w	r3, [r8]
 8007c1a:	4608      	mov	r0, r1
 8007c1c:	f1ba 0f00 	cmp.w	sl, #0
 8007c20:	d107      	bne.n	8007c32 <_strtol_l.isra.0+0xda>
 8007c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c26:	b102      	cbz	r2, 8007c2a <_strtol_l.isra.0+0xd2>
 8007c28:	4240      	negs	r0, r0
 8007c2a:	f1ba 0f00 	cmp.w	sl, #0
 8007c2e:	d0f8      	beq.n	8007c22 <_strtol_l.isra.0+0xca>
 8007c30:	b10f      	cbz	r7, 8007c36 <_strtol_l.isra.0+0xde>
 8007c32:	f105 39ff 	add.w	r9, r5, #4294967295
 8007c36:	f8ca 9000 	str.w	r9, [sl]
 8007c3a:	e7f2      	b.n	8007c22 <_strtol_l.isra.0+0xca>
 8007c3c:	2430      	movs	r4, #48	; 0x30
 8007c3e:	2e00      	cmp	r6, #0
 8007c40:	d1af      	bne.n	8007ba2 <_strtol_l.isra.0+0x4a>
 8007c42:	2608      	movs	r6, #8
 8007c44:	e7ad      	b.n	8007ba2 <_strtol_l.isra.0+0x4a>
 8007c46:	2c30      	cmp	r4, #48	; 0x30
 8007c48:	d0a3      	beq.n	8007b92 <_strtol_l.isra.0+0x3a>
 8007c4a:	260a      	movs	r6, #10
 8007c4c:	e7a9      	b.n	8007ba2 <_strtol_l.isra.0+0x4a>
	...

08007c50 <_strtol_r>:
 8007c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c52:	4c06      	ldr	r4, [pc, #24]	; (8007c6c <_strtol_r+0x1c>)
 8007c54:	4d06      	ldr	r5, [pc, #24]	; (8007c70 <_strtol_r+0x20>)
 8007c56:	6824      	ldr	r4, [r4, #0]
 8007c58:	6a24      	ldr	r4, [r4, #32]
 8007c5a:	2c00      	cmp	r4, #0
 8007c5c:	bf08      	it	eq
 8007c5e:	462c      	moveq	r4, r5
 8007c60:	9400      	str	r4, [sp, #0]
 8007c62:	f7ff ff79 	bl	8007b58 <_strtol_l.isra.0>
 8007c66:	b003      	add	sp, #12
 8007c68:	bd30      	pop	{r4, r5, pc}
 8007c6a:	bf00      	nop
 8007c6c:	2000000c 	.word	0x2000000c
 8007c70:	20000070 	.word	0x20000070

08007c74 <_strtoul_l.isra.0>:
 8007c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c78:	4680      	mov	r8, r0
 8007c7a:	4689      	mov	r9, r1
 8007c7c:	4692      	mov	sl, r2
 8007c7e:	461e      	mov	r6, r3
 8007c80:	460f      	mov	r7, r1
 8007c82:	463d      	mov	r5, r7
 8007c84:	9808      	ldr	r0, [sp, #32]
 8007c86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c8a:	f000 f8b9 	bl	8007e00 <__locale_ctype_ptr_l>
 8007c8e:	4420      	add	r0, r4
 8007c90:	7843      	ldrb	r3, [r0, #1]
 8007c92:	f013 0308 	ands.w	r3, r3, #8
 8007c96:	d130      	bne.n	8007cfa <_strtoul_l.isra.0+0x86>
 8007c98:	2c2d      	cmp	r4, #45	; 0x2d
 8007c9a:	d130      	bne.n	8007cfe <_strtoul_l.isra.0+0x8a>
 8007c9c:	787c      	ldrb	r4, [r7, #1]
 8007c9e:	1cbd      	adds	r5, r7, #2
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	2e00      	cmp	r6, #0
 8007ca4:	d05c      	beq.n	8007d60 <_strtoul_l.isra.0+0xec>
 8007ca6:	2e10      	cmp	r6, #16
 8007ca8:	d109      	bne.n	8007cbe <_strtoul_l.isra.0+0x4a>
 8007caa:	2c30      	cmp	r4, #48	; 0x30
 8007cac:	d107      	bne.n	8007cbe <_strtoul_l.isra.0+0x4a>
 8007cae:	782b      	ldrb	r3, [r5, #0]
 8007cb0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007cb4:	2b58      	cmp	r3, #88	; 0x58
 8007cb6:	d14e      	bne.n	8007d56 <_strtoul_l.isra.0+0xe2>
 8007cb8:	786c      	ldrb	r4, [r5, #1]
 8007cba:	2610      	movs	r6, #16
 8007cbc:	3502      	adds	r5, #2
 8007cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	fbb2 f2f6 	udiv	r2, r2, r6
 8007cc8:	fb06 fc02 	mul.w	ip, r6, r2
 8007ccc:	ea6f 0c0c 	mvn.w	ip, ip
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007cd6:	2f09      	cmp	r7, #9
 8007cd8:	d817      	bhi.n	8007d0a <_strtoul_l.isra.0+0x96>
 8007cda:	463c      	mov	r4, r7
 8007cdc:	42a6      	cmp	r6, r4
 8007cde:	dd23      	ble.n	8007d28 <_strtoul_l.isra.0+0xb4>
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	db1e      	blt.n	8007d22 <_strtoul_l.isra.0+0xae>
 8007ce4:	4282      	cmp	r2, r0
 8007ce6:	d31c      	bcc.n	8007d22 <_strtoul_l.isra.0+0xae>
 8007ce8:	d101      	bne.n	8007cee <_strtoul_l.isra.0+0x7a>
 8007cea:	45a4      	cmp	ip, r4
 8007cec:	db19      	blt.n	8007d22 <_strtoul_l.isra.0+0xae>
 8007cee:	fb00 4006 	mla	r0, r0, r6, r4
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cf8:	e7eb      	b.n	8007cd2 <_strtoul_l.isra.0+0x5e>
 8007cfa:	462f      	mov	r7, r5
 8007cfc:	e7c1      	b.n	8007c82 <_strtoul_l.isra.0+0xe>
 8007cfe:	2c2b      	cmp	r4, #43	; 0x2b
 8007d00:	bf04      	itt	eq
 8007d02:	1cbd      	addeq	r5, r7, #2
 8007d04:	787c      	ldrbeq	r4, [r7, #1]
 8007d06:	4619      	mov	r1, r3
 8007d08:	e7cb      	b.n	8007ca2 <_strtoul_l.isra.0+0x2e>
 8007d0a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007d0e:	2f19      	cmp	r7, #25
 8007d10:	d801      	bhi.n	8007d16 <_strtoul_l.isra.0+0xa2>
 8007d12:	3c37      	subs	r4, #55	; 0x37
 8007d14:	e7e2      	b.n	8007cdc <_strtoul_l.isra.0+0x68>
 8007d16:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007d1a:	2f19      	cmp	r7, #25
 8007d1c:	d804      	bhi.n	8007d28 <_strtoul_l.isra.0+0xb4>
 8007d1e:	3c57      	subs	r4, #87	; 0x57
 8007d20:	e7dc      	b.n	8007cdc <_strtoul_l.isra.0+0x68>
 8007d22:	f04f 33ff 	mov.w	r3, #4294967295
 8007d26:	e7e5      	b.n	8007cf4 <_strtoul_l.isra.0+0x80>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	da09      	bge.n	8007d40 <_strtoul_l.isra.0+0xcc>
 8007d2c:	2322      	movs	r3, #34	; 0x22
 8007d2e:	f8c8 3000 	str.w	r3, [r8]
 8007d32:	f04f 30ff 	mov.w	r0, #4294967295
 8007d36:	f1ba 0f00 	cmp.w	sl, #0
 8007d3a:	d107      	bne.n	8007d4c <_strtoul_l.isra.0+0xd8>
 8007d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d40:	b101      	cbz	r1, 8007d44 <_strtoul_l.isra.0+0xd0>
 8007d42:	4240      	negs	r0, r0
 8007d44:	f1ba 0f00 	cmp.w	sl, #0
 8007d48:	d0f8      	beq.n	8007d3c <_strtoul_l.isra.0+0xc8>
 8007d4a:	b10b      	cbz	r3, 8007d50 <_strtoul_l.isra.0+0xdc>
 8007d4c:	f105 39ff 	add.w	r9, r5, #4294967295
 8007d50:	f8ca 9000 	str.w	r9, [sl]
 8007d54:	e7f2      	b.n	8007d3c <_strtoul_l.isra.0+0xc8>
 8007d56:	2430      	movs	r4, #48	; 0x30
 8007d58:	2e00      	cmp	r6, #0
 8007d5a:	d1b0      	bne.n	8007cbe <_strtoul_l.isra.0+0x4a>
 8007d5c:	2608      	movs	r6, #8
 8007d5e:	e7ae      	b.n	8007cbe <_strtoul_l.isra.0+0x4a>
 8007d60:	2c30      	cmp	r4, #48	; 0x30
 8007d62:	d0a4      	beq.n	8007cae <_strtoul_l.isra.0+0x3a>
 8007d64:	260a      	movs	r6, #10
 8007d66:	e7aa      	b.n	8007cbe <_strtoul_l.isra.0+0x4a>

08007d68 <_strtoul_r>:
 8007d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d6a:	4c06      	ldr	r4, [pc, #24]	; (8007d84 <_strtoul_r+0x1c>)
 8007d6c:	4d06      	ldr	r5, [pc, #24]	; (8007d88 <_strtoul_r+0x20>)
 8007d6e:	6824      	ldr	r4, [r4, #0]
 8007d70:	6a24      	ldr	r4, [r4, #32]
 8007d72:	2c00      	cmp	r4, #0
 8007d74:	bf08      	it	eq
 8007d76:	462c      	moveq	r4, r5
 8007d78:	9400      	str	r4, [sp, #0]
 8007d7a:	f7ff ff7b 	bl	8007c74 <_strtoul_l.isra.0>
 8007d7e:	b003      	add	sp, #12
 8007d80:	bd30      	pop	{r4, r5, pc}
 8007d82:	bf00      	nop
 8007d84:	2000000c 	.word	0x2000000c
 8007d88:	20000070 	.word	0x20000070

08007d8c <__submore>:
 8007d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d90:	460c      	mov	r4, r1
 8007d92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d98:	4299      	cmp	r1, r3
 8007d9a:	d11d      	bne.n	8007dd8 <__submore+0x4c>
 8007d9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007da0:	f000 f8c4 	bl	8007f2c <_malloc_r>
 8007da4:	b918      	cbnz	r0, 8007dae <__submore+0x22>
 8007da6:	f04f 30ff 	mov.w	r0, #4294967295
 8007daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007db2:	63a3      	str	r3, [r4, #56]	; 0x38
 8007db4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007db8:	6360      	str	r0, [r4, #52]	; 0x34
 8007dba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007dbe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007dc2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007dc6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007dca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007dce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007dd2:	6020      	str	r0, [r4, #0]
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	e7e8      	b.n	8007daa <__submore+0x1e>
 8007dd8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007dda:	0077      	lsls	r7, r6, #1
 8007ddc:	463a      	mov	r2, r7
 8007dde:	f000 f8ff 	bl	8007fe0 <_realloc_r>
 8007de2:	4605      	mov	r5, r0
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d0de      	beq.n	8007da6 <__submore+0x1a>
 8007de8:	eb00 0806 	add.w	r8, r0, r6
 8007dec:	4601      	mov	r1, r0
 8007dee:	4632      	mov	r2, r6
 8007df0:	4640      	mov	r0, r8
 8007df2:	f000 f829 	bl	8007e48 <memcpy>
 8007df6:	f8c4 8000 	str.w	r8, [r4]
 8007dfa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007dfe:	e7e9      	b.n	8007dd4 <__submore+0x48>

08007e00 <__locale_ctype_ptr_l>:
 8007e00:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007e04:	4770      	bx	lr
	...

08007e08 <__locale_ctype_ptr>:
 8007e08:	4b04      	ldr	r3, [pc, #16]	; (8007e1c <__locale_ctype_ptr+0x14>)
 8007e0a:	4a05      	ldr	r2, [pc, #20]	; (8007e20 <__locale_ctype_ptr+0x18>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6a1b      	ldr	r3, [r3, #32]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	bf08      	it	eq
 8007e14:	4613      	moveq	r3, r2
 8007e16:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8007e1a:	4770      	bx	lr
 8007e1c:	2000000c 	.word	0x2000000c
 8007e20:	20000070 	.word	0x20000070

08007e24 <__ascii_mbtowc>:
 8007e24:	b082      	sub	sp, #8
 8007e26:	b901      	cbnz	r1, 8007e2a <__ascii_mbtowc+0x6>
 8007e28:	a901      	add	r1, sp, #4
 8007e2a:	b142      	cbz	r2, 8007e3e <__ascii_mbtowc+0x1a>
 8007e2c:	b14b      	cbz	r3, 8007e42 <__ascii_mbtowc+0x1e>
 8007e2e:	7813      	ldrb	r3, [r2, #0]
 8007e30:	600b      	str	r3, [r1, #0]
 8007e32:	7812      	ldrb	r2, [r2, #0]
 8007e34:	1c10      	adds	r0, r2, #0
 8007e36:	bf18      	it	ne
 8007e38:	2001      	movne	r0, #1
 8007e3a:	b002      	add	sp, #8
 8007e3c:	4770      	bx	lr
 8007e3e:	4610      	mov	r0, r2
 8007e40:	e7fb      	b.n	8007e3a <__ascii_mbtowc+0x16>
 8007e42:	f06f 0001 	mvn.w	r0, #1
 8007e46:	e7f8      	b.n	8007e3a <__ascii_mbtowc+0x16>

08007e48 <memcpy>:
 8007e48:	b510      	push	{r4, lr}
 8007e4a:	1e43      	subs	r3, r0, #1
 8007e4c:	440a      	add	r2, r1
 8007e4e:	4291      	cmp	r1, r2
 8007e50:	d100      	bne.n	8007e54 <memcpy+0xc>
 8007e52:	bd10      	pop	{r4, pc}
 8007e54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e5c:	e7f7      	b.n	8007e4e <memcpy+0x6>

08007e5e <memmove>:
 8007e5e:	4288      	cmp	r0, r1
 8007e60:	b510      	push	{r4, lr}
 8007e62:	eb01 0302 	add.w	r3, r1, r2
 8007e66:	d807      	bhi.n	8007e78 <memmove+0x1a>
 8007e68:	1e42      	subs	r2, r0, #1
 8007e6a:	4299      	cmp	r1, r3
 8007e6c:	d00a      	beq.n	8007e84 <memmove+0x26>
 8007e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e72:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e76:	e7f8      	b.n	8007e6a <memmove+0xc>
 8007e78:	4283      	cmp	r3, r0
 8007e7a:	d9f5      	bls.n	8007e68 <memmove+0xa>
 8007e7c:	1881      	adds	r1, r0, r2
 8007e7e:	1ad2      	subs	r2, r2, r3
 8007e80:	42d3      	cmn	r3, r2
 8007e82:	d100      	bne.n	8007e86 <memmove+0x28>
 8007e84:	bd10      	pop	{r4, pc}
 8007e86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e8a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007e8e:	e7f7      	b.n	8007e80 <memmove+0x22>

08007e90 <_free_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4605      	mov	r5, r0
 8007e94:	2900      	cmp	r1, #0
 8007e96:	d045      	beq.n	8007f24 <_free_r+0x94>
 8007e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e9c:	1f0c      	subs	r4, r1, #4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	bfb8      	it	lt
 8007ea2:	18e4      	addlt	r4, r4, r3
 8007ea4:	f000 f8df 	bl	8008066 <__malloc_lock>
 8007ea8:	4a1f      	ldr	r2, [pc, #124]	; (8007f28 <_free_r+0x98>)
 8007eaa:	6813      	ldr	r3, [r2, #0]
 8007eac:	4610      	mov	r0, r2
 8007eae:	b933      	cbnz	r3, 8007ebe <_free_r+0x2e>
 8007eb0:	6063      	str	r3, [r4, #4]
 8007eb2:	6014      	str	r4, [r2, #0]
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eba:	f000 b8d5 	b.w	8008068 <__malloc_unlock>
 8007ebe:	42a3      	cmp	r3, r4
 8007ec0:	d90c      	bls.n	8007edc <_free_r+0x4c>
 8007ec2:	6821      	ldr	r1, [r4, #0]
 8007ec4:	1862      	adds	r2, r4, r1
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	bf04      	itt	eq
 8007eca:	681a      	ldreq	r2, [r3, #0]
 8007ecc:	685b      	ldreq	r3, [r3, #4]
 8007ece:	6063      	str	r3, [r4, #4]
 8007ed0:	bf04      	itt	eq
 8007ed2:	1852      	addeq	r2, r2, r1
 8007ed4:	6022      	streq	r2, [r4, #0]
 8007ed6:	6004      	str	r4, [r0, #0]
 8007ed8:	e7ec      	b.n	8007eb4 <_free_r+0x24>
 8007eda:	4613      	mov	r3, r2
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	b10a      	cbz	r2, 8007ee4 <_free_r+0x54>
 8007ee0:	42a2      	cmp	r2, r4
 8007ee2:	d9fa      	bls.n	8007eda <_free_r+0x4a>
 8007ee4:	6819      	ldr	r1, [r3, #0]
 8007ee6:	1858      	adds	r0, r3, r1
 8007ee8:	42a0      	cmp	r0, r4
 8007eea:	d10b      	bne.n	8007f04 <_free_r+0x74>
 8007eec:	6820      	ldr	r0, [r4, #0]
 8007eee:	4401      	add	r1, r0
 8007ef0:	1858      	adds	r0, r3, r1
 8007ef2:	4282      	cmp	r2, r0
 8007ef4:	6019      	str	r1, [r3, #0]
 8007ef6:	d1dd      	bne.n	8007eb4 <_free_r+0x24>
 8007ef8:	6810      	ldr	r0, [r2, #0]
 8007efa:	6852      	ldr	r2, [r2, #4]
 8007efc:	605a      	str	r2, [r3, #4]
 8007efe:	4401      	add	r1, r0
 8007f00:	6019      	str	r1, [r3, #0]
 8007f02:	e7d7      	b.n	8007eb4 <_free_r+0x24>
 8007f04:	d902      	bls.n	8007f0c <_free_r+0x7c>
 8007f06:	230c      	movs	r3, #12
 8007f08:	602b      	str	r3, [r5, #0]
 8007f0a:	e7d3      	b.n	8007eb4 <_free_r+0x24>
 8007f0c:	6820      	ldr	r0, [r4, #0]
 8007f0e:	1821      	adds	r1, r4, r0
 8007f10:	428a      	cmp	r2, r1
 8007f12:	bf04      	itt	eq
 8007f14:	6811      	ldreq	r1, [r2, #0]
 8007f16:	6852      	ldreq	r2, [r2, #4]
 8007f18:	6062      	str	r2, [r4, #4]
 8007f1a:	bf04      	itt	eq
 8007f1c:	1809      	addeq	r1, r1, r0
 8007f1e:	6021      	streq	r1, [r4, #0]
 8007f20:	605c      	str	r4, [r3, #4]
 8007f22:	e7c7      	b.n	8007eb4 <_free_r+0x24>
 8007f24:	bd38      	pop	{r3, r4, r5, pc}
 8007f26:	bf00      	nop
 8007f28:	200001fc 	.word	0x200001fc

08007f2c <_malloc_r>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	1ccd      	adds	r5, r1, #3
 8007f30:	f025 0503 	bic.w	r5, r5, #3
 8007f34:	3508      	adds	r5, #8
 8007f36:	2d0c      	cmp	r5, #12
 8007f38:	bf38      	it	cc
 8007f3a:	250c      	movcc	r5, #12
 8007f3c:	2d00      	cmp	r5, #0
 8007f3e:	4606      	mov	r6, r0
 8007f40:	db01      	blt.n	8007f46 <_malloc_r+0x1a>
 8007f42:	42a9      	cmp	r1, r5
 8007f44:	d903      	bls.n	8007f4e <_malloc_r+0x22>
 8007f46:	230c      	movs	r3, #12
 8007f48:	6033      	str	r3, [r6, #0]
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	bd70      	pop	{r4, r5, r6, pc}
 8007f4e:	f000 f88a 	bl	8008066 <__malloc_lock>
 8007f52:	4a21      	ldr	r2, [pc, #132]	; (8007fd8 <_malloc_r+0xac>)
 8007f54:	6814      	ldr	r4, [r2, #0]
 8007f56:	4621      	mov	r1, r4
 8007f58:	b991      	cbnz	r1, 8007f80 <_malloc_r+0x54>
 8007f5a:	4c20      	ldr	r4, [pc, #128]	; (8007fdc <_malloc_r+0xb0>)
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	b91b      	cbnz	r3, 8007f68 <_malloc_r+0x3c>
 8007f60:	4630      	mov	r0, r6
 8007f62:	f000 f863 	bl	800802c <_sbrk_r>
 8007f66:	6020      	str	r0, [r4, #0]
 8007f68:	4629      	mov	r1, r5
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f000 f85e 	bl	800802c <_sbrk_r>
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	d124      	bne.n	8007fbe <_malloc_r+0x92>
 8007f74:	230c      	movs	r3, #12
 8007f76:	6033      	str	r3, [r6, #0]
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f000 f875 	bl	8008068 <__malloc_unlock>
 8007f7e:	e7e4      	b.n	8007f4a <_malloc_r+0x1e>
 8007f80:	680b      	ldr	r3, [r1, #0]
 8007f82:	1b5b      	subs	r3, r3, r5
 8007f84:	d418      	bmi.n	8007fb8 <_malloc_r+0x8c>
 8007f86:	2b0b      	cmp	r3, #11
 8007f88:	d90f      	bls.n	8007faa <_malloc_r+0x7e>
 8007f8a:	600b      	str	r3, [r1, #0]
 8007f8c:	50cd      	str	r5, [r1, r3]
 8007f8e:	18cc      	adds	r4, r1, r3
 8007f90:	4630      	mov	r0, r6
 8007f92:	f000 f869 	bl	8008068 <__malloc_unlock>
 8007f96:	f104 000b 	add.w	r0, r4, #11
 8007f9a:	1d23      	adds	r3, r4, #4
 8007f9c:	f020 0007 	bic.w	r0, r0, #7
 8007fa0:	1ac3      	subs	r3, r0, r3
 8007fa2:	d0d3      	beq.n	8007f4c <_malloc_r+0x20>
 8007fa4:	425a      	negs	r2, r3
 8007fa6:	50e2      	str	r2, [r4, r3]
 8007fa8:	e7d0      	b.n	8007f4c <_malloc_r+0x20>
 8007faa:	428c      	cmp	r4, r1
 8007fac:	684b      	ldr	r3, [r1, #4]
 8007fae:	bf16      	itet	ne
 8007fb0:	6063      	strne	r3, [r4, #4]
 8007fb2:	6013      	streq	r3, [r2, #0]
 8007fb4:	460c      	movne	r4, r1
 8007fb6:	e7eb      	b.n	8007f90 <_malloc_r+0x64>
 8007fb8:	460c      	mov	r4, r1
 8007fba:	6849      	ldr	r1, [r1, #4]
 8007fbc:	e7cc      	b.n	8007f58 <_malloc_r+0x2c>
 8007fbe:	1cc4      	adds	r4, r0, #3
 8007fc0:	f024 0403 	bic.w	r4, r4, #3
 8007fc4:	42a0      	cmp	r0, r4
 8007fc6:	d005      	beq.n	8007fd4 <_malloc_r+0xa8>
 8007fc8:	1a21      	subs	r1, r4, r0
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f000 f82e 	bl	800802c <_sbrk_r>
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d0cf      	beq.n	8007f74 <_malloc_r+0x48>
 8007fd4:	6025      	str	r5, [r4, #0]
 8007fd6:	e7db      	b.n	8007f90 <_malloc_r+0x64>
 8007fd8:	200001fc 	.word	0x200001fc
 8007fdc:	20000200 	.word	0x20000200

08007fe0 <_realloc_r>:
 8007fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe2:	4607      	mov	r7, r0
 8007fe4:	4614      	mov	r4, r2
 8007fe6:	460e      	mov	r6, r1
 8007fe8:	b921      	cbnz	r1, 8007ff4 <_realloc_r+0x14>
 8007fea:	4611      	mov	r1, r2
 8007fec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ff0:	f7ff bf9c 	b.w	8007f2c <_malloc_r>
 8007ff4:	b922      	cbnz	r2, 8008000 <_realloc_r+0x20>
 8007ff6:	f7ff ff4b 	bl	8007e90 <_free_r>
 8007ffa:	4625      	mov	r5, r4
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008000:	f000 f833 	bl	800806a <_malloc_usable_size_r>
 8008004:	42a0      	cmp	r0, r4
 8008006:	d20f      	bcs.n	8008028 <_realloc_r+0x48>
 8008008:	4621      	mov	r1, r4
 800800a:	4638      	mov	r0, r7
 800800c:	f7ff ff8e 	bl	8007f2c <_malloc_r>
 8008010:	4605      	mov	r5, r0
 8008012:	2800      	cmp	r0, #0
 8008014:	d0f2      	beq.n	8007ffc <_realloc_r+0x1c>
 8008016:	4631      	mov	r1, r6
 8008018:	4622      	mov	r2, r4
 800801a:	f7ff ff15 	bl	8007e48 <memcpy>
 800801e:	4631      	mov	r1, r6
 8008020:	4638      	mov	r0, r7
 8008022:	f7ff ff35 	bl	8007e90 <_free_r>
 8008026:	e7e9      	b.n	8007ffc <_realloc_r+0x1c>
 8008028:	4635      	mov	r5, r6
 800802a:	e7e7      	b.n	8007ffc <_realloc_r+0x1c>

0800802c <_sbrk_r>:
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	4c06      	ldr	r4, [pc, #24]	; (8008048 <_sbrk_r+0x1c>)
 8008030:	2300      	movs	r3, #0
 8008032:	4605      	mov	r5, r0
 8008034:	4608      	mov	r0, r1
 8008036:	6023      	str	r3, [r4, #0]
 8008038:	f7f9 fdee 	bl	8001c18 <_sbrk>
 800803c:	1c43      	adds	r3, r0, #1
 800803e:	d102      	bne.n	8008046 <_sbrk_r+0x1a>
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	b103      	cbz	r3, 8008046 <_sbrk_r+0x1a>
 8008044:	602b      	str	r3, [r5, #0]
 8008046:	bd38      	pop	{r3, r4, r5, pc}
 8008048:	200004e4 	.word	0x200004e4

0800804c <__ascii_wctomb>:
 800804c:	b149      	cbz	r1, 8008062 <__ascii_wctomb+0x16>
 800804e:	2aff      	cmp	r2, #255	; 0xff
 8008050:	bf85      	ittet	hi
 8008052:	238a      	movhi	r3, #138	; 0x8a
 8008054:	6003      	strhi	r3, [r0, #0]
 8008056:	700a      	strbls	r2, [r1, #0]
 8008058:	f04f 30ff 	movhi.w	r0, #4294967295
 800805c:	bf98      	it	ls
 800805e:	2001      	movls	r0, #1
 8008060:	4770      	bx	lr
 8008062:	4608      	mov	r0, r1
 8008064:	4770      	bx	lr

08008066 <__malloc_lock>:
 8008066:	4770      	bx	lr

08008068 <__malloc_unlock>:
 8008068:	4770      	bx	lr

0800806a <_malloc_usable_size_r>:
 800806a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800806e:	1f18      	subs	r0, r3, #4
 8008070:	2b00      	cmp	r3, #0
 8008072:	bfbc      	itt	lt
 8008074:	580b      	ldrlt	r3, [r1, r0]
 8008076:	18c0      	addlt	r0, r0, r3
 8008078:	4770      	bx	lr
	...

0800807c <_init>:
 800807c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807e:	bf00      	nop
 8008080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008082:	bc08      	pop	{r3}
 8008084:	469e      	mov	lr, r3
 8008086:	4770      	bx	lr

08008088 <_fini>:
 8008088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808a:	bf00      	nop
 800808c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800808e:	bc08      	pop	{r3}
 8008090:	469e      	mov	lr, r3
 8008092:	4770      	bx	lr
